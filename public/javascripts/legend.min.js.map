{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/enum/ContextId.ts","webpack:///./src/lib/geometry/Dimension.ts","webpack:///./src/lib/math/Vector2.ts","webpack:///./src/lib/collision/HitBox.ts","webpack:///./src/lib/observer/Observable.ts","webpack:///./src/LegendLoop.ts","webpack:///./src/enum/Actions.ts","webpack:///./src/config/Settings.ts","webpack:///./src/lib/entity/Entity.ts","webpack:///./src/model/Tile.ts","webpack:///./src/lib/collision/CollisionManager.ts","webpack:///./src/lib/audio/Sound.ts","webpack:///./src/lib/client/AudioManager.ts","webpack:///./src/lib/interfaces/ICollideAble.ts","webpack:///./src/lib/collision/QuadTree.ts","webpack:///./src/LegendState.ts","webpack:///./src/lib/ajax/Ajax.ts","webpack:///./src/lib/graphics/2D/SpriteSheet.ts","webpack:///./src/lib/client/AssetManager.ts","webpack:///./src/lib/client/InputManager.ts","webpack:///./src/LegendOfTheVoid.ts","webpack:///./src/app.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","prototype","hasOwnProperty","p","s","t","e","ContextId","BACKGROUND","CREEPS","PLAYER","[object Object]","width","height","this","factor","Vector2","x","y","v1","v2","vector","scalar","Error","_x","_y","Math","sqrt","magnitude","mag","divide","max","floor","normalize","multiply","pow","Vector2_1","ICollideAble_1","position","colliding","collidesWith","type","EntityType","BOX","push","other","includes","toString","observers","state","observer","filter","obs","forEach","update","game","lastTime","init","running","frameId","requestAnimationFrame","loop","bind","cancelAnimationFrame","stop","start","paused","time","diff","render","Actions","UP","DOWN","LEFT","RIGHT","SHOOT","RESTART","ROTATE_LEFT","ROTATE_RIGHT","Dimension_1","Actions_1","canvas","gameSize","keyboard","w","ArrowUp","ArrowDown","space","keys","key","newKey","action","oldKey","findKey","console","log","dimension","settings","JSON","stringify","json","obj","parse","Entity_1","ContextId_1","super","color","contextId","ctx","fillStyle","fillRect","clearRect","quadTree","objects","getAllObjects","length","findObjects","j","isCollideAbleWith","alive","audioContext","masterGain","buffer","gainNode","createGain","gain","connect","playing","source","createBufferSource","Sound_1","initAudioContext","window","AudioContext","webkitAudioContext","effectsGain","ambientGain","destination","data","id","callback","decodeAudioData","then","error","ambient","ENEMY","ENEMY_BULLET","PLAYER_BULLET","MAP","GAME_OVER","LASER","MAIN_THEME","EXPLOSION_I","EXPLOSION_II","ARENA","HitBox_1","QuadTree","hitBox","level","maxObjects","maxLevels","nodes","node","clear","returnedObjects","index","getIndex","Array","element","insert","split","splice","verticalMidpoint","horizontalMidpoint","topQuadrant","bottomQuadrant","subWidth","subHeight","QuadTree_1","Observable_1","inputManager","entities","collideables","movables","renderables","kills","cash","dt","movable","move","entity","points","notify","Ajax","opts","xHttp","XMLHttpRequest","addEventListener","response","open","method","defaults","url","async","setRequestHeader","contentType","responseType","send","image","frameWidth","frameHeight","framesPerRow","SpriteSheet_1","Ajax_1","AssetType","SPRITE","SPRITE_SHEET","AUDIO","AUDIO_AMB","audioManager","cache","assetsDir","downloadCount","queue","path","item","create","decodeAudio","audio","done","sprite","Image","src","sprites","spriteSheet","spriteSheets","loadAudio","loadSprite","loadSpriteSheet","createSound","inputMap","initializeTouchHandler","touches","event","el","document","getElementById","evt","preventDefault","touchstartX","pageX","touchstartY","pageY","thisInstance","reset","changedTouches","toucheMoveX","touchMoveY","a","InputManager_1","AssetManager_1","LegendState_1","AudioManager_1","CollisionManager_1","mapData","Tile_1","contexts","assetManager","collisionManager","tiles","row","col","tile","blocked","buildable","initMap","downloadAll","renderable","asset","assetId","LegendOfTheVoid_1","Settings_1","LegendLoop_1","container","Map","bgCanvas","createElement","creepCanvas","playerCanvas","appendChild","set","getContext","innerWidth","innerHeight"],"mappings":"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","file":"legend.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 22);\n","export enum ContextId {\r\n  BACKGROUND, CREEPS, PLAYER\r\n}\r\n","/**\r\n * Dimension class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Dimension {\r\n  width: number\r\n  height: number\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {number} width Width\r\n   * @param {number} height Height\r\n   */\r\n  constructor (width: number, height: number) {\r\n    this.width = width\r\n    this.height = height\r\n  }\r\n\r\n  /**\r\n   * Scale the dimension.\r\n   *\r\n   * @param {number} factor\r\n   */\r\n  public scale (factor: number) {\r\n    this.width *= factor\r\n    this.height *= factor\r\n  }\r\n}\r\n","/**\r\n * 2D vector implementation.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Vector2 {\r\n  private _x: number\r\n  private _y: number\r\n\r\n  /**\r\n   * Default constructor. Sets x and y values.\r\n   *\r\n   * @param {number} x initial x value\r\n   * @param {number} y initial y value\r\n   */\r\n  constructor (x: number, y: number) {\r\n    this.x = x\r\n    this.y = y\r\n  }\r\n\r\n  /**\r\n   * Static addVector method to combine two vectors into a new one.\r\n   *\r\n   * @param {Vector2} v1 first vector\r\n   * @param {Vector2} v2 second vector\r\n   * @returns {Vector2} combined vector\r\n   */\r\n  static addVector (v1: Vector2, v2: Vector2): Vector2 {\r\n    return new Vector2(v1.x + v2.x, v1.y + v2.y)\r\n  }\r\n\r\n  /**\r\n   * Subtract two vector from each other and put the result into a new vector.\r\n   *\r\n   * @param {Vector2} v1 first vector\r\n   * @param {Vector2} v2 second vector\r\n   * @returns {Vector2} resulting vector\r\n   */\r\n  static subtractVector (v1: Vector2, v2: Vector2): Vector2 {\r\n    return new Vector2(v1.x - v2.x, v1.y - v2.y)\r\n  }\r\n\r\n  /**\r\n   * Multiplies a vector with a scalar and returns the resulting vector.\r\n   *\r\n   * @param {Vector2} vector initial vector\r\n   * @param {number} scalar scalar to scale the vector\r\n   * @returns {Vector2} the resulting vector\r\n   */\r\n  static multiply (vector: Vector2, scalar: number): Vector2 {\r\n    return new Vector2(vector.x * scalar, vector.y * scalar)\r\n  }\r\n\r\n  /**\r\n   * Divides a vector by a scalar and returns the result in a new vector.\r\n   * Throws error if trying to divide by zero.\r\n   *\r\n   * @param {Vector2} vector vector to divide\r\n   * @param {number} scalar scalar used to divide vector\r\n   * @returns {Vector2} resulting vector\r\n   */\r\n  static divide (vector: Vector2, scalar: number): Vector2 {\r\n    if (scalar === 0) {\r\n      throw new Error('cannot divide vector by scalar with value \"0\"')\r\n    }\r\n    return new Vector2(vector.x / scalar, vector.y / scalar)\r\n  }\r\n\r\n  /**\r\n   * Set x value of this vector.\r\n   *\r\n   * @param {number} x new x value\r\n   */\r\n  set x (x: number) {\r\n    this._x = x\r\n  }\r\n\r\n  /**\r\n   * Set y value of this vector.\r\n   *\r\n   * @param {number} y new y value\r\n   */\r\n  set y (y: number) {\r\n    this._y = y\r\n  }\r\n\r\n  /**\r\n   * Getter for x value\r\n   * @returns {number} x value\r\n   */\r\n  get x (): number {\r\n    return this._x\r\n  }\r\n\r\n  /**\r\n   * Getter for y value\r\n   * @returns {number} y value\r\n   */\r\n  get y (): number {\r\n    return this._y\r\n  }\r\n\r\n  /**\r\n   * Set vector with both x and y values.\r\n   *\r\n   * @param {number} x new x value\r\n   * @param {number} y new y value\r\n   */\r\n  set (x: number, y: number): void {\r\n    this.x = x\r\n    this.y = y\r\n  }\r\n\r\n  /**\r\n   * Set vector location to another vector.\r\n   *\r\n   * @param {Vector2} vector other vector\r\n   */\r\n  setVector (vector: Vector2): void {\r\n    this.x = vector.x\r\n    this.y = vector.y\r\n  }\r\n\r\n  /**\r\n   * Add x and y to this vector.\r\n   *\r\n   * @param {number} x x value\r\n   * @param {number} y y value\r\n   */\r\n  add (x: number, y: number): void {\r\n    this.x += x\r\n    this.y += y\r\n  }\r\n\r\n  /**\r\n   * Add vector to this vector.\r\n   *\r\n   * @param {Vector2} vector other vector\r\n   */\r\n  addVector (vector: Vector2): void {\r\n    this.x += vector.x\r\n    this.y += vector.y\r\n  }\r\n\r\n  /**\r\n   * Subtraxt x and y from this vector.\r\n   *\r\n   * @param {number} x x value\r\n   * @param {number} y y value\r\n   */\r\n  subtract (x: number, y: number): void {\r\n    this.x -= x\r\n    this.y -= y\r\n  }\r\n\r\n  /**\r\n   * Subtract a vector from this vector.\r\n   *\r\n   * @param {Vector2} vector other vector\r\n   */\r\n  subtractVector (vector: Vector2): void {\r\n    this.x -= vector.x\r\n    this.y -= vector.y\r\n  }\r\n\r\n  /**\r\n   * Multiply this vector by scalar.\r\n   *\r\n   * @param scalar scalar to multiply the vector\r\n   */\r\n  multiply (scalar: number): void {\r\n    this.x *= scalar\r\n    this.y *= scalar\r\n  }\r\n\r\n  /**\r\n   * Divides this vector by a scalar.\r\n   * Throws error when trying to divide by zero.\r\n   *\r\n   * @param {number} scalar scalar used to divide this vector\r\n   */\r\n  divide (scalar: number): void {\r\n    if (scalar === 0) {\r\n      throw new Error('cannot divide vector by \"0\"')\r\n    }\r\n    this.x /= scalar\r\n    this.y /= scalar\r\n  }\r\n\r\n  /**\r\n   * Get the magnitude / elementsCount of this vector.\r\n   *\r\n   * @returns {number} magnitude / elementsCount of this vector\r\n   */\r\n  mag (): number {\r\n    return Math.sqrt(this.x * this.x + this.y * this.y)\r\n  }\r\n\r\n  /**\r\n   * Negate the x and y values of this vector and return the result as a new Vector2 object.\r\n   *\r\n   * @returns {Vector2}\r\n   */\r\n  negative (): Vector2 {\r\n    return new Vector2(-this.x, -this.y)\r\n  }\r\n\r\n  /**\r\n   * Normalize the vector.\r\n   */\r\n  normalize (): void {\r\n    let magnitude = this.mag()\r\n    if (magnitude !== 0) {\r\n      this.divide(magnitude)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Limit the vector to a maximum elementsCount.\r\n   *\r\n   * @param max maximum elementsCount\r\n   */\r\n  limit (max): void {\r\n    if (Math.floor(this.mag()) > max) {\r\n      this.normalize()\r\n      this.multiply(max)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the distance of this vector to another vector.\r\n   *\r\n   * @param {Vector2} vector other vector\r\n   * @returns {number} calculated distance\r\n   */\r\n  distanceTo (vector: Vector2): number {\r\n    return Math.sqrt(Math.pow(vector.x - this.x, 2) + Math.pow(vector.y - this.y, 2))\r\n  }\r\n\r\n  /**\r\n   * Get the dot product between this vector and another vector.\r\n   *\r\n   * @param {Vector2} vector\r\n   * @returns {number} the dot product of this vector and the one passed as param.\r\n   */\r\n  dot (vector: Vector2): number {\r\n    return this.x * vector.x + this.y * vector.y\r\n  }\r\n\r\n  floor (): void {\r\n    this.x = Math.floor(this.x)\r\n    this.x = Math.floor(this.x)\r\n  }\r\n\r\n  /**\r\n   * Create a clone of this vector.\r\n   *\r\n   * @returns {Vector2} cloned vector\r\n   */\r\n  clone (): Vector2 {\r\n    return new Vector2(this.x, this.y)\r\n  }\r\n}\r\n","import Vector2 from '../math/Vector2'\r\nimport ICollideAble, { EntityType } from '../interfaces/ICollideAble'\r\n\r\n/**\r\n * Hitbox used for defining collision boundaries.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class HitBox implements ICollideAble {\r\n  type: EntityType\r\n  collidesWith\r\n  colliding: boolean\r\n  position: Vector2\r\n  width: number\r\n  height: number\r\n\r\n  /**\r\n   * Initializes position and dimension.\r\n   * @param {number} x position x\r\n   * @param {number} y position y\r\n   * @param {number} width dimension width\r\n   * @param {number} height dimension height\r\n   */\r\n  constructor (x, y, width, height) {\r\n    this.position = new Vector2(x, y)\r\n    this.width = width\r\n    this.height = height\r\n    this.colliding = false\r\n    this.collidesWith = []\r\n    this.type = EntityType.BOX\r\n    this.collidesWith.push(EntityType.PLAYER)\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {ICollideAble} other\r\n   * @returns {boolean}\r\n   */\r\n  isCollideAbleWith (other: ICollideAble): boolean {\r\n    return this.collidesWith.includes(other.type.toString())\r\n  }\r\n}\r\n","import Observer from './Observer'\r\n\r\n/**\r\n * Observable class to be extended by a class that should be observed.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Observable {\r\n  protected observers: Observer[]\r\n  protected state: any\r\n\r\n  constructor () {\r\n    this.observers = []\r\n    this.state = {}\r\n  }\r\n\r\n  /**\r\n   * Register an observer on this observable.\r\n   *\r\n   * @param {Observer} observer Object implementing the Observer interface\r\n   */\r\n  register (observer: Observer): void {\r\n    this.observers.push(observer)\r\n  }\r\nd\r\n  /**\r\n   * Remove an observer from this observables observers list.\r\n   *\r\n   * @param {Observer} observer Object implementing the Observer interface\r\n   */\r\n  unRegister (observer: Observer): void {\r\n    this.observers = this.observers.filter(obs => {return obs !== observer})\r\n  }\r\n\r\n  /**\r\n   * Notify all observers.\r\n   */\r\n  notify (): void {\r\n    this.observers.forEach(observer => observer.update(this.state))\r\n  }\r\n}\r\n","/**\r\n * Legend of the void game loop class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nimport IGameLoop from './lib/interfaces/IGameLoop'\r\nimport IGame from './lib/interfaces/IGame'\r\n\r\nexport default class LegendLoop implements IGameLoop {\r\n  public game: IGame\r\n  public lastTime: number\r\n  public frameId: number\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {IGame} game Game instance\r\n   */\r\n  constructor (game: IGame) {\r\n    this.game = game\r\n    this.lastTime = null\r\n  }\r\n\r\n  /**\r\n   * Start the game loop.\r\n   */\r\n  public start (): void {\r\n    this.game.init()\r\n    this.game.state.running = true\r\n    this.frameId = requestAnimationFrame(this.loop.bind(this))\r\n  }\r\n\r\n  /**\r\n   * Stop the game loop.\r\n   */\r\n  public stop (): void {\r\n    this.game.state.running = false\r\n    if (this.frameId) {\r\n      cancelAnimationFrame(this.frameId)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop the game loop and start it again.\r\n   */\r\n  public restart (): void {\r\n    this.stop()\r\n    this.start()\r\n  }\r\n\r\n  /**\r\n   * Pause/unpause game.\r\n   */\r\n  public togglePause (): void {\r\n    this.game.state.paused = !this.game.state.paused\r\n  }\r\n\r\n  /**\r\n   * Main loop executing update and render methods.\r\n   */\r\n  public loop (time: number): void {\r\n    if (this.game.state.running) {\r\n      if (!this.game.state.paused) {\r\n        if (this.lastTime !== null) {\r\n          const diff = time - this.lastTime\r\n          this.game.state.update(diff / 1000)\r\n        }\r\n        this.lastTime = time\r\n        this.game.render()\r\n        this.frameId = requestAnimationFrame(this.loop.bind(this))\r\n      }\r\n    }\r\n  }\r\n}\r\n","export enum Actions {\r\n  UP = 'UP',\r\n  DOWN = 'DOWN',\r\n  LEFT = 'LEFT',\r\n  RIGHT = 'RIGHT',\r\n  SHOOT = 'SHOOT',\r\n  RESTART = 'RESTART',\r\n  ROTATE_LEFT = 'R-LEFT',\r\n  ROTATE_RIGHT = 'R-RIGHT'\r\n}\r\n","import Dimension from '../lib/geometry/Dimension'\r\nimport { Actions } from '../enum/Actions'\r\nimport Player from '../model/Player'\r\n/**\r\n * Pong game settings.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Settings {\r\n  gameSize: Dimension\r\n  canvas: HTMLCanvasElement\r\n  keyboard\r\n  player\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {HTMLCanvasElement} canvas\r\n   */\r\n  constructor (canvas: HTMLCanvasElement) {\r\n    this.gameSize = new Dimension(canvas.width, canvas.height)\r\n    this.canvas = canvas\r\n    this.keyboard = {\r\n      'w': Actions.UP,\r\n      's': Actions.DOWN,\r\n      'ArrowUp': Actions.LEFT,\r\n      'ArrowDown': Actions.RIGHT,\r\n      'space': Actions.SHOOT,\r\n      'r': Actions.RESTART\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param value\r\n   * @returns {string}\r\n   */\r\n  findKey (value): string {\r\n    return Object.keys(this.keyboard).filter(key => this.keyboard[key] === value)[0]\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param newKey\r\n   * @param {Actions} action\r\n   */\r\n  setKey (newKey, action: Actions): void {\r\n    let oldKey = this.findKey(action)\r\n    if (newKey !== oldKey) {\r\n      console.log('old:' + oldKey, ' new: ' + newKey + ' value: ' + action)\r\n      this.keyboard[newKey] = this.keyboard[oldKey]\r\n      delete this.keyboard[oldKey]\r\n    }\r\n  }\r\n}\r\n","import Vector2 from '../math/Vector2'\r\nimport Settings from '../../config/Settings'\r\nimport Dimension from '../geometry/Dimension'\r\nimport IJSONSerializable from '../interfaces/IJSONSerializable'\r\n\r\n/**\r\n * Base entity class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Entity implements IJSONSerializable {\r\n  id: string\r\n  dimension: Dimension\r\n  settings: Settings\r\n  position: Vector2\r\n\r\n  /**\r\n   * Constructor. Sets position and dimension of entity.\r\n   *\r\n   * @param {Vector2} position Initial position\r\n   * @param {Dimension} dimension Initial dimension\r\n   * @param {Settings} settings\r\n   */\r\n  constructor (position?: Vector2, dimension?: Dimension, settings?: Settings) {\r\n    this.position = position\r\n    this.dimension = dimension\r\n    this.settings = settings\r\n  }\r\n\r\n  public init (): void {\r\n    throw new Error('Implement in subclass.')\r\n  }\r\n\r\n  /**\r\n   * Create a JSON string from this object.\r\n   * \r\n   * @returns {string} The JSoN string\r\n   */\r\n  public toJSON (): string {\r\n    return JSON.stringify(this)\r\n  }\r\n\r\n  /**\r\n   * Load data into this object from JSON.\r\n   *\r\n   * @param json JSON string\r\n   */\r\n  public fromJSON (json: string): void {\r\n    const obj = JSON.parse(json)\r\n    \r\n    // Map parsed object to the attributes of this entity.\r\n    Object.keys(obj).forEach(key => {\r\n      if ( this.hasOwnProperty( key ) ) {\r\n        this[key] = obj[key]\r\n      }\r\n    })\r\n  }\r\n}\r\n","import Entity from '../lib/entity/Entity'\r\nimport Settings from '../config/Settings'\r\nimport Vector2 from '../lib/math/Vector2'\r\nimport Dimension from '../lib/geometry/Dimension'\r\nimport Turret from './Turret'\r\nimport IRenderable from '../lib/interfaces/IRenderable'\r\nimport { ContextId } from '../enum/ContextId'\r\nimport { AssetId } from '../enum/AssetId'\r\n\r\n/**\r\n * 2D Tower defense tile class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Tile extends Entity implements IRenderable {\r\n  contextId: ContextId\r\n  assetId: AssetId\r\n  asset\r\n  blocked: boolean\r\n  buildable: boolean\r\n  turret: Turret\r\n  color: string\r\n\r\n  /**\r\n   * Conscrutor.\r\n   *\r\n   * @param x\r\n   * @param y\r\n   * @param width\r\n   * @param height\r\n   * @param settings\r\n   */\r\n  constructor (x: number, y: number, width: number, height: number, settings: Settings) {\r\n    super(new Vector2(x, y), new Dimension(width, height), settings)\r\n    this.color = '#ffffff'\r\n    this.contextId = ContextId.BACKGROUND\r\n  }\r\n\r\n  init (): void {\r\n\r\n  }\r\n\r\n  render (ctx: CanvasRenderingContext2D): void {\r\n    ctx.fillStyle = this.color\r\n    ctx.fillRect(this.position.x, this.position.y, this.dimension.width, this.dimension.height)\r\n  }\r\n\r\n  clear (ctx: CanvasRenderingContext2D): void {\r\n    ctx.clearRect(this.position.x, this.position.y, this.dimension.width, this.dimension.height)\r\n  }\r\n}\r\n","import QuadTree from './QuadTree'\r\nimport ICollisionManager from '../interfaces/ICollisionManager'\r\n\r\n/**\r\n * Collision Manager.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class CollisionManager implements ICollisionManager {\r\n  quadTree: QuadTree\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {QuadTree} quadTree\r\n   */\r\n  constructor (quadTree: QuadTree) {\r\n    this.quadTree = quadTree\r\n  }\r\n\r\n  /**\r\n   * Collision detection algorithm.\r\n   */\r\n  detectCollision (): void {\r\n    let objects = []\r\n    this.quadTree.getAllObjects(objects)\r\n    for (let i = 0; i < objects.length; i++) {\r\n      let obj = []\r\n      this.quadTree.findObjects(obj, objects[i])\r\n\r\n      for (let j = 0; j < obj.length; j++) {\r\n        if (objects[i].isCollideAbleWith(obj[j]) &&\r\n          (Math.floor(objects[i].position.x) < Math.floor(obj[j].position.x) + obj[j].dimension.width &&\r\n            Math.floor(objects[i].position.x) + objects[i].dimension.width > Math.floor(obj[j].position.x) &&\r\n            Math.floor(objects[i].position.y) < Math.floor(obj[j].position.y) + obj[j].dimension.height &&\r\n            Math.floor(objects[i].position.y) + objects[i].dimension.height > Math.floor(obj[j].position.y))\r\n        && objects[i].alive && obj[j].alive) {\r\n          console.log(objects[i])\r\n          objects[i].colliding = true\r\n          obj[j].colliding = true\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Sound class used to play a sound from a file.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Sound {\r\n  audioContext: AudioContext\r\n  source: AudioBufferSourceNode\r\n  gainNode: GainNode\r\n  masterGain: GainNode\r\n  buffer\r\n  playing: boolean\r\n\r\n  /**\r\n   *\r\n   * @param audioContext\r\n   * @param {GainNode} masterGain\r\n   * @param buffer\r\n   */\r\n  constructor (audioContext, masterGain: GainNode, buffer) {\r\n    this.audioContext = audioContext\r\n    this.masterGain = masterGain\r\n    this.buffer = buffer\r\n    this.gainNode = this.audioContext.createGain()\r\n    this.gainNode.gain.value = 0.2\r\n    this.gainNode.connect(this.masterGain)\r\n    this.playing = false\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {boolean} loop\r\n   */\r\n  play (loop = false): void {\r\n    this.source = this.audioContext.createBufferSource()\r\n    this.source.buffer = this.buffer\r\n    this.source.loop = loop\r\n    this.source.connect(this.gainNode)\r\n    this.source.start(0)\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  stop (): void {\r\n    if (this.source) {\r\n      this.source.stop(0)\r\n    }\r\n  }\r\n}\r\n","import Sound from '../audio/Sound'\r\n\r\n/**\r\n * Audio manager class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class AudioManager {\r\n  private audioContext: AudioContext\r\n  private masterGain: GainNode\r\n  private effectsGain: GainNode\r\n  private ambientGain: GainNode\r\n\r\n  /**\r\n   *\r\n   */\r\n  constructor () {\r\n    this.initAudioContext()\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  initAudioContext (): void {\r\n    try {\r\n      // Fix for browsers using prefixes\r\n      window.AudioContext = window.AudioContext || webkitAudioContext\r\n      this.audioContext = new AudioContext()\r\n      this.masterGain = this.audioContext.createGain()\r\n      this.effectsGain = this.audioContext.createGain()\r\n      this.ambientGain = this.audioContext.createGain()\r\n      this.masterGain.gain.value = 1\r\n      this.masterGain.connect(this.audioContext.destination)\r\n      this.effectsGain.connect(this.masterGain)\r\n      this.ambientGain.connect(this.masterGain)\r\n      this.ambientGain.gain.value = 1\r\n      this.effectsGain.gain.value = 1\r\n    } catch (e) {\r\n      console.log('Web Audio API is not supported in this browser')\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param data\r\n   * @param id\r\n   * @param callback\r\n   */\r\n  decodeAudio (data, id, callback): void {\r\n    this.audioContext.decodeAudioData(data).then(\r\n      buffer => callback(buffer),\r\n      error => { console.log('Error with decoding audio data' + error) }\r\n    )\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {number} value\r\n   */\r\n  adjustMasterVolume (value: number): void {\r\n    this.masterGain.gain.value = value\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {number} value\r\n   */\r\n  adjustAmbientVolume (value: number): void {\r\n    this.ambientGain.gain.value = value\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {number} value\r\n   */\r\n  adjustEffectsVolume (value: number): void {\r\n    this.effectsGain.gain.value = value\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param buffer\r\n   * @param {boolean} ambient\r\n   * @returns {Sound}\r\n   */\r\n  createSound (buffer, ambient: boolean): Sound {\r\n    return new Sound(this.audioContext, ambient ? this.ambientGain : this.effectsGain, buffer)\r\n  }\r\n}\r\n","export enum EntityType {\r\n  PLAYER = 'ship',\r\n  ENEMY = 'enemy',\r\n  ENEMY_BULLET = 'bulletEnemy',\r\n  PLAYER_BULLET = 'bullet',\r\n  BACKGROUND = 'background',\r\n  MAP = 'map',\r\n  GAME_OVER = 'gameOver',\r\n  LASER = 'laser',\r\n  MAIN_THEME = 'shockWave',\r\n  EXPLOSION_I = 'explosion1',\r\n  EXPLOSION_II = 'explosion2',\r\n  BOX = 'box',\r\n  ARENA = 'arena'\r\n}\r\n\r\n/**\r\n * Interface for collideable entities.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default interface ICollideAble {\r\n  collidesWith: EntityType[]\r\n  colliding: boolean\r\n  type: EntityType\r\n\r\n  /**\r\n   *\r\n   * @param {ICollideAble} other\r\n   * @returns {boolean}\r\n   */\r\n  isCollideAbleWith (other: ICollideAble): boolean\r\n}\r\n","import HitBox from './HitBox'\r\nimport ICollideAble from '../interfaces/ICollideAble'\r\n\r\n/**\r\n * QuadTree class used to optimize collision checking.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class QuadTree {\r\n  level: number\r\n  maxObjects: number\r\n  maxLevels: number\r\n  hitBox: HitBox\r\n  objects: ICollideAble[]\r\n  nodes: QuadTree[]\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {HitBox} hitBox\r\n   * @param {number} level\r\n   */\r\n  constructor (hitBox = new HitBox(0, 0, 0, 0), level = 0) {\r\n    this.level = level\r\n    this.maxObjects = 10\r\n    this.maxLevels = 5\r\n    this.hitBox = hitBox\r\n    this.objects = []\r\n    this.nodes = []\r\n  }\r\n\r\n  /**\r\n   * Clears the QuadTree and its sub nodes from all models objects.\r\n   */\r\n  clear (): void {\r\n    this.objects = []\r\n    this.nodes.forEach(node => node.clear())\r\n    this.nodes = []\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param returnedObjects\r\n   * @returns {any}\r\n   */\r\n  getAllObjects (returnedObjects) {\r\n    this.nodes.forEach(node => node.getAllObjects(returnedObjects))\r\n    this.objects.forEach(object => returnedObjects.push(object))\r\n    return returnedObjects\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param returnedObjects\r\n   * @param object\r\n   * @returns {any}\r\n   */\r\n  findObjects (returnedObjects, object) {\r\n    if (typeof object === 'undefined') {\r\n      console.log('UNDEFINED OBJECT')\r\n      return\r\n    }\r\n    let index = this.getIndex(object)\r\n    if (index !== -1 && this.nodes.length) {\r\n      this.nodes[index].findObjects(returnedObjects, object)\r\n    }\r\n    this.objects.forEach(obj => returnedObjects.push(obj))\r\n    return returnedObjects\r\n  }\r\n\r\n  /**\r\n   * Insert an object into the QuadTree.\r\n   *\r\n   * @param object\r\n   */\r\n  insert (object): void {\r\n    if (typeof object === 'undefined') {\r\n      return\r\n    }\r\n    if (object instanceof Array) {\r\n      object.forEach(element => this.insert(element))\r\n      return\r\n    }\r\n    if (this.nodes.length > 0) {\r\n      let index = this.getIndex(object)\r\n      // Only addVector the object to a sub node if it can fit completely within one\r\n      if (index !== -1) {\r\n        this.nodes[index].insert(object)\r\n        return\r\n      }\r\n    }\r\n    this.objects.push(object)\r\n\r\n    if (this.objects.length > this.maxObjects && this.level < this.maxLevels) {\r\n      if (typeof this.nodes[0] === 'undefined') {\r\n        this.split()\r\n      }\r\n      let i = 0\r\n      while (i < this.objects.length) {\r\n        let index = this.getIndex(this.objects[i])\r\n        if (index !== -1) {\r\n          this.nodes[index].insert((this.objects.splice(i, 1))[0])\r\n        } else {\r\n          i++\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the index of an object from the QuadTree.\r\n   *\r\n   * @param object\r\n   * @returns {number}\r\n   */\r\n  getIndex (object): number {\r\n    let index = -1\r\n    let verticalMidpoint = this.hitBox.position.x + this.hitBox.width / 2\r\n    let horizontalMidpoint = this.hitBox.position.y + this.hitBox.height / 2\r\n    // Object can fit completely within the top quadrant\r\n    let topQuadrant = (object.position.y < horizontalMidpoint && object.position.y + object.height < horizontalMidpoint)\r\n    // Object can fit completely within the bottom quadrant\r\n    let bottomQuadrant = (object.position.y > horizontalMidpoint)\r\n    // Object can fit completely within the left quadrants\r\n    if (object.position.x < verticalMidpoint && object.position.x + object.width < verticalMidpoint) {\r\n      if (topQuadrant) {\r\n        index = 1\r\n      } else if (bottomQuadrant) {\r\n        index = 2\r\n      }\r\n    } else if (object.position.x > verticalMidpoint) { // Object can fix completely within the right quadrants\r\n      if (topQuadrant) {\r\n        index = 0\r\n      } else if (bottomQuadrant) {\r\n        index = 3\r\n      }\r\n    }\r\n    return index\r\n  }\r\n\r\n  /**\r\n   * Split the tree on demand.\r\n   */\r\n  split (): void {\r\n    let subWidth = (this.hitBox.width / 2) | 0\r\n    let subHeight = (this.hitBox.height / 2) | 0\r\n    this.nodes[0] = new QuadTree(\r\n      new HitBox(this.hitBox.position.x + subWidth, this.hitBox.position.y, subWidth, subHeight), this.level + 1)\r\n    this.nodes[1] = new QuadTree(\r\n      new HitBox(this.hitBox.position.x, this.hitBox.position.y, subWidth, subHeight), this.level + 1)\r\n    this.nodes[2] = new QuadTree(\r\n      new HitBox(this.hitBox.position.x, this.hitBox.position.y + subHeight, subWidth, subHeight), this.level + 1)\r\n    this.nodes[3] = new QuadTree(\r\n      new HitBox(this.hitBox.position.x + subWidth, this.hitBox.position.y + subHeight, subWidth, subHeight), this.level + 1)\r\n  }\r\n}\r\n","import IGameState from './lib/interfaces/IGameState'\r\nimport QuadTree from './lib/collision/QuadTree'\r\nimport Entity from './lib/entity/Entity'\r\nimport ICollideAble from './lib/interfaces/ICollideAble'\r\nimport Settings from './config/Settings'\r\nimport InputManager from './lib/client/InputManager'\r\nimport IRenderable from './lib/interfaces/IRenderable'\r\nimport IMovable from './lib/interfaces/IMovable'\r\nimport Tile from './model/Tile'\r\nimport Observable from './lib/observer/Observable'\r\nimport HitBox from './lib/collision/HitBox'\r\n\r\n/**\r\n * Legend of the void game state class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class LegendState extends Observable implements IGameState {\r\n  public running: boolean\r\n  public paused: boolean\r\n  public quadTree: QuadTree\r\n  public entities: Entity[]\r\n  public collideables: ICollideAble[]\r\n  public movables: IMovable[]\r\n  public renderables: IRenderable[]\r\n  public map: Tile[]\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {Settings} settings\r\n   * @param {InputManager} inputManager\r\n   */\r\n  constructor (settings: Settings, inputManager: InputManager) {\r\n    super()\r\n    this.running = false\r\n    this.paused = false\r\n    this.entities = []\r\n    this.quadTree = new QuadTree(new HitBox(0, 0, settings.gameSize.width, settings.gameSize.height))\r\n    this.collideables = []\r\n    this.movables = []\r\n    this.renderables = []\r\n    this.state = {\r\n      kills: 0,\r\n      cash: 0\r\n    }\r\n  }\r\n\r\n  public update (dt: number): void {\r\n    this.movables.forEach(movable => movable.move(dt))\r\n  }\r\n\r\n  public reset (): void {\r\n    this.entities.forEach(entity => entity.init())\r\n  }\r\n\r\n  public scorePoints (points: number): void {\r\n    this.state.cash += points\r\n    this.state.kills++\r\n    this.notify()\r\n  }\r\n}\r\n","export default class Ajax {\r\n  private static defaults = {\r\n    url: '',\r\n    method: 'GET',\r\n    contentType: 'text/html',\r\n    async: true,\r\n    data: null\r\n  }\r\n\r\n  /**\r\n   * Create and send an XML-HTTP request.\r\n   * Requires an options object.\r\n   *\r\n   * @param opts Possible option properties:\r\n   * url = url to send the request to.\r\n   * method = request method. GET, POST, PUT, DELETE.\r\n   * contentType = specify the content type of the request.\r\n   * async = boolean flag for async calls. Defaults to true.\r\n   * data = request body.\r\n   * @param callback success callback function\r\n   */\r\n  public static create (opts, callback): void {\r\n    let xHttp = new XMLHttpRequest()\r\n    xHttp.addEventListener('load', () => {\r\n      callback(xHttp.response)\r\n    })\r\n    xHttp.open(\r\n      opts.method ? opts.method : Ajax.defaults.method,\r\n      opts.url ? opts.url : Ajax.defaults.url,\r\n      opts.async ? opts.async : Ajax.defaults.async\r\n    )\r\n    if (opts.hasOwnProperty('contentType')) {\r\n      xHttp.setRequestHeader(\r\n        'Content-Type',\r\n        opts.contentType ? opts.contentType : Ajax.defaults.contentType\r\n      )\r\n    }\r\n    if (opts.hasOwnProperty('responseType')) {\r\n      xHttp.responseType = opts.responseType\r\n    }\r\n    if (opts.hasOwnProperty('data') && typeof opts.data === 'object') {\r\n      opts.data = JSON.stringify(opts.data)\r\n    }\r\n    xHttp.send(opts.data ? opts.data : null)\r\n  }\r\n}\r\n","/**\r\n * Sprite sheet definition.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class SpriteSheet {\r\n  public image: HTMLImageElement\r\n  public frameWidth: number\r\n  public frameHeight: number\r\n  public framesPerRow: number\r\n\r\n  /**\r\n   * Constructor. Sets frame dimensions and calculates number of frames.\r\n   *\r\n   * @param image\r\n   * @param frameWidth\r\n   * @param frameHeight\r\n   */\r\n  constructor (image: HTMLImageElement, frameWidth, frameHeight) {\r\n    this.image = image\r\n    this.frameWidth = frameWidth\r\n    this.frameHeight = frameHeight\r\n    this.framesPerRow = Math.floor(image.width / frameWidth)\r\n  }\r\n}\r\n","import SpriteSheet from '../graphics/2D/SpriteSheet'\r\nimport Sound from '../audio/Sound'\r\nimport Ajax from '../ajax/Ajax'\r\nimport { AssetId } from '../../enum/AssetId'\r\nimport AudioManager from './AudioManager'\r\n\r\nexport enum AssetType {\r\n  SPRITE = 'sprite', SPRITE_SHEET = 'sprite-sheet', AUDIO = 'audio', AUDIO_AMB = 'audio-amb'\r\n}\r\n\r\n/**\r\n * Asset manager Class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class AssetManager {\r\n  private cache\r\n  private assetsDir: string\r\n  private queue\r\n  private downloadCount: number\r\n  private audioManager: AudioManager\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {AudioManager} audioManager\r\n   */\r\n  constructor (audioManager: AudioManager) {\r\n    this.cache = []\r\n    this.assetsDir = 'assets/'\r\n    this.downloadCount = 0\r\n    this.queue = []\r\n    this.audioManager = audioManager\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns {boolean}\r\n   */\r\n  done (): boolean {\r\n    return this.downloadCount === this.queue.length\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {AssetId} id\r\n   * @param {AssetType} type\r\n   * @param {any} opts\r\n   */\r\n  queueDownload (id: AssetId, type: AssetType, opts = null): void {\r\n    this.queue.push({ id: id, path: this.assetsDir + type + '/' + id, type: type, opts: opts })\r\n  }\r\n\r\n  /**\r\n   * Build an AJAX Request to loadAudio audio file into the buffer cache.\r\n   *\r\n   * @param item object with name of file and path to file\r\n   * @param callback function to execute on done\r\n   */\r\n  loadAudio (item, callback): void {\r\n    Ajax.create({\r\n      method: 'GET',\r\n      url: item.path,\r\n      responseType: 'arraybuffer'\r\n    }, response => {\r\n      this.audioManager.decodeAudio(response, item.id, buffer => {\r\n        this.cache.audio[item.id] = buffer\r\n        this.downloadCount += 1\r\n        if (this.done()) {\r\n          callback()\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param item\r\n   * @param callback\r\n   */\r\n  loadSprite (item, callback): void {\r\n    let sprite = new Image()\r\n    sprite.addEventListener('load', () => {\r\n      this.downloadCount++\r\n      if (this.done()) {\r\n        callback()\r\n      }\r\n    })\r\n    sprite.src = item.path\r\n    this.cache.sprites[item.id] = sprite\r\n  }\r\n\r\n  /**\r\n   * Load sprites sheet.\r\n   *\r\n   * @param item sprite sheet info\r\n   * @param callback called upon downloading all\r\n   */\r\n  loadSpriteSheet (item, callback): void {\r\n    let spriteSheet = new Image()\r\n    spriteSheet.addEventListener('load', () => {\r\n      this.cache.spriteSheets[item.id] = new SpriteSheet(spriteSheet, item.opts.frameWidth || 0, item.opts.frameHeight || 0)\r\n      this.downloadCount += 1\r\n      if (this.done()) {\r\n        callback()\r\n      }\r\n    })\r\n    spriteSheet.src = item.path\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param callback\r\n   */\r\n  downloadAll (callback): void {\r\n    this.queue.forEach(item => {\r\n      if (item.type === AssetType.AUDIO) {\r\n        this.loadAudio(item, callback)\r\n      } else if (item.type === AssetType.SPRITE) {\r\n        this.loadSprite(item, callback)\r\n      } else if (item.type === AssetType.SPRITE_SHEET) {\r\n        this.loadSpriteSheet(item, callback)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Create an audio buffer source node from cached buffer.\r\n   * Send it to the destination of the audio context and play it.\r\n   *\r\n   * @param {AssetId} id File id\r\n   * @param {AssetType} type\r\n   */\r\n  get (id: AssetId, type: AssetType = AssetType.SPRITE): Sound {\r\n    if (type === AssetType.AUDIO || type === AssetType.AUDIO_AMB) {\r\n      let ambient = type === AssetType.AUDIO_AMB\r\n      return this.audioManager.createSound(this.cache[id], ambient)\r\n    } else {\r\n      return this.cache[id]\r\n    }\r\n  }\r\n}\r\n","import Observable from '../observer/Observable'\r\nimport Settings from '../../config/Settings'\r\n\r\n/**\r\n * Input manager class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class InputManager extends Observable {\r\n  inputMap\r\n  touches\r\n\r\n  /**\r\n   *\r\n   */\r\n  constructor (settings: Settings) {\r\n    super()\r\n    this.inputMap = settings.keyboard\r\n    this.init()\r\n    this.initializeTouchHandler()\r\n    this.touches = {\r\n      start: [],\r\n      move: []\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register pressed keys and notify observers.\r\n   */\r\n  init (): void {\r\n    window.addEventListener('keydown', event => {\r\n      let key = event.key !== ' ' ? event.key : 'space'\r\n      this.state[this.inputMap[key]] = true\r\n      this.notify()\r\n    })\r\n    window.addEventListener('keyup', event => {\r\n      let key = event.key !== ' ' ? event.key : 'space'\r\n      this.state[this.inputMap[key]] = false\r\n      this.notify()\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Maps swipe directions to key press booleans.\r\n   * Allows touch controls on mobile.\r\n   */\r\n  initializeTouchHandler (): void {\r\n    // Register the event listeners\r\n    let button = document.getElementById('move')\r\n    let el = button ? button : window\r\n    el.addEventListener('touchstart', handleTouchStart, false)\r\n    el.addEventListener('touchmove', handleTouchMove, false)\r\n    el.addEventListener('touchend', handleTouchEnd, false)\r\n    el.addEventListener('contextmenu', event => {\r\n      event.preventDefault()\r\n      return false\r\n    })\r\n\r\n    let start = []\r\n    let move = []\r\n    let touchstartX = 0\r\n    let touchstartY = 0\r\n    let toucheMoveX = 0\r\n    let touchMoveY = 0\r\n    let thisInstance = this\r\n\r\n    function handleTouchStart (evt): void {\r\n      evt.preventDefault()\r\n      start = evt.touches\r\n      touchstartX = evt.touches[0].pageX\r\n      touchstartY = evt.touches[0].pageY\r\n    }\r\n\r\n    function handleTouchMove (evt): void {\r\n      thisInstance.reset()\r\n      evt.preventDefault()\r\n      move = evt.changedTouches\r\n      toucheMoveX = evt.touches[0].pageX\r\n      touchMoveY = evt.touches[0].pageY\r\n      for (let i = 0; i < evt.touches.length; i++) {\r\n        // Positive values equals left. Negative values equals right\r\n        if (move[i].pageX < start[i].pageX) {\r\n          thisInstance.state[thisInstance.inputMap['a']] = true\r\n        }\r\n        if (move[i].pageX > start[i].pageX) {\r\n          thisInstance.state[thisInstance.inputMap['d']] = true\r\n        }\r\n        if (move[i].pageY < start[i].pageY) {\r\n          thisInstance.state[thisInstance.inputMap['w']] = true\r\n        }\r\n        if (move[i].pageY > start[i].pageY) {\r\n          thisInstance.state[thisInstance.inputMap['s']] = true\r\n        }\r\n        thisInstance.notify()\r\n      }\r\n    }\r\n\r\n    function handleTouchEnd (evt): void {\r\n      evt.preventDefault()\r\n      thisInstance.reset()\r\n    }\r\n  }\r\n\r\n  shoot (): void {\r\n    this.state[this.inputMap['space']] = true\r\n  }\r\n\r\n  cancelShoot (): void {\r\n    this.state[this.inputMap['space']] = false\r\n  }\r\n\r\n  reset (): void {\r\n    this.state[this.inputMap['w']] = false\r\n    this.state[this.inputMap['a']] = false\r\n    this.state[this.inputMap['s']] = false\r\n    this.state[this.inputMap['d']] = false\r\n  }\r\n}\r\n","import IGameState from './lib/interfaces/IGameState'\r\nimport IGame from './lib/interfaces/IGame'\r\nimport ICollisionManager from './lib/interfaces/ICollisionManager'\r\nimport InputManager from './lib/client/InputManager'\r\nimport AssetManager from './lib/client/AssetManager'\r\nimport { ContextId } from './enum/ContextId'\r\nimport Settings from './config/Settings'\r\nimport LegendState from './LegendState'\r\nimport AudioManager from './lib/client/AudioManager'\r\nimport CollisionManager from './lib/collision/CollisionManager'\r\nimport * as mapData from './../public/definitions/maps.json'\r\nimport Tile from './model/Tile'\r\n\r\n/**\r\n * Main game Class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class LegendOfTheVoid implements IGame {\r\n  audioManager: AudioManager\r\n  inputManager: InputManager\r\n  assetManager: AssetManager\r\n  collisionManager: ICollisionManager\r\n  state: IGameState\r\n  contexts: Map<ContextId, CanvasRenderingContext2D>\r\n  settings: Settings\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {Map<ContextId, CanvasRenderingContext2D>} contexts\r\n   * @param {Settings} settings\r\n   */\r\n  constructor (contexts: Map<ContextId, CanvasRenderingContext2D>, settings: Settings) {\r\n    this.audioManager = new AudioManager()\r\n    this.inputManager = new InputManager(settings)\r\n    this.assetManager = new AssetManager(this.audioManager)\r\n    this.state = new LegendState(settings, this.inputManager)\r\n    this.collisionManager = new CollisionManager(this.state.quadTree)\r\n    this.contexts = contexts\r\n    this.settings = settings\r\n  }\r\n\r\n  initMap (): void {\r\n    console.log(mapData)\r\n    let y = 0\r\n    mapData[0].tiles.forEach(row => {\r\n      let width = 30\r\n      let height = 30\r\n      let x = 0\r\n      row.forEach(col => {\r\n        const tile = new Tile(x, y, width, height, this.settings)\r\n        switch (col) {\r\n          case 0:\r\n            tile.blocked = true\r\n            tile.color = '#000000'\r\n            break\r\n          case 1:\r\n            tile.buildable = true\r\n            tile.color = '#ff00ff'\r\n            break\r\n          case 3:\r\n            tile.color = '#00ff00'\r\n            break\r\n          case 4:\r\n            tile.color = '#ff0000'\r\n            break\r\n        }\r\n        this.state.entities.push(tile)\r\n        this.state.renderables.push(tile)\r\n        x += width\r\n      })\r\n      y += height\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Initialize the game.\r\n   */\r\n  init (): void {\r\n   this.initMap()\r\n    this.assetManager.downloadAll(() => {\r\n      this.state.renderables.forEach(renderable => renderable.asset = this.assetManager.get(renderable.assetId))\r\n      this.state.reset()\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Render current state.\r\n   */\r\n  render (): void {\r\n    this.state.renderables.forEach(renderable => renderable.render(this.contexts.get(renderable.contextId)))\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  clear (): void {\r\n    this.state.renderables.forEach(renderable => renderable.clear(this.contexts.get(renderable.contextId)))\r\n  }\r\n}\r\n","import LegendOfTheVoid from './LegendOfTheVoid'\r\nimport GameSettings from './config/Settings'\r\nimport LegendState from './LegendState'\r\nimport InputManager from './lib/client/InputManager'\r\nimport { ContextId } from './enum/ContextId'\r\nimport LegendLoop from './LegendLoop'\r\n\r\n/**\r\n * Entry script for legend of the void.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  const container = document.getElementById('contents')\r\n  const contexts = new Map<ContextId, CanvasRenderingContext2D>()\r\n  const bgCanvas = document.createElement('canvas')\r\n  const creepCanvas = document.createElement('canvas')\r\n  const playerCanvas = document.createElement('canvas')\r\n  container.appendChild(bgCanvas)\r\n  container.appendChild(creepCanvas)\r\n  container.appendChild(playerCanvas)\r\n  contexts.set(ContextId.BACKGROUND, bgCanvas.getContext('2d'))\r\n  contexts.set(ContextId.CREEPS, creepCanvas.getContext('2d'))\r\n  contexts.set(ContextId.PLAYER, playerCanvas.getContext('2d'))\r\n  bgCanvas.width = window.innerWidth\r\n  bgCanvas.height = window.innerHeight\r\n  creepCanvas.width = window.innerWidth\r\n  creepCanvas.height = window.innerHeight\r\n  playerCanvas.width = window.innerWidth\r\n  playerCanvas.height = window.innerHeight\r\n\r\n  const settings = new GameSettings(bgCanvas)\r\n  const game = new LegendOfTheVoid(contexts, settings)\r\n  const loop = new LegendLoop(game)\r\n\r\n  loop.start()\r\n})"],"sourceRoot":""}