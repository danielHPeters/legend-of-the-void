{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/lib/geometry/Dimension.ts","webpack:///./src/lib/math/Vector2.ts","webpack:///./src/enum/AssetId.ts","webpack:///./src/enum/ContextId.ts","webpack:///./src/lib/entity/Entity.ts","webpack:///./src/lib/collision/HitBox.ts","webpack:///./src/lib/observer/Observable.ts","webpack:///./src/application/LegendLoop.ts","webpack:///./src/enum/Actions.ts","webpack:///./src/config/Settings.ts","webpack:///./src/ui/BuildMenu.ts","webpack:///./src/model/Turret.ts","webpack:///./src/model/Tile.ts","webpack:///./src/lib/collision/CollisionManager.ts","webpack:///./src/lib/audio/Sound.ts","webpack:///./src/lib/client/AudioManager.ts","webpack:///./src/lib/interfaces/ICollideAble.ts","webpack:///./src/lib/collision/QuadTree.ts","webpack:///./src/application/LegendState.ts","webpack:///./src/lib/ajax/Ajax.ts","webpack:///./src/lib/graphics/2D/SpriteSheet.ts","webpack:///./src/lib/client/AssetManager.ts","webpack:///./src/lib/client/InputManager.ts","webpack:///./src/application/LegendOfTheVoid.ts","webpack:///./src/app.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","prototype","hasOwnProperty","p","s","t","e","[object Object]","width","height","this","factor","Vector2","x","y","v1","v2","vector","scalar","Error","Math","sqrt","magnitude","mag","divide","max","floor","normalize","multiply","pow","AssetId","BASE_VOID","TURRET_LASER","CREEP_VOID_LEECHER","NONE","ContextId","BACKGROUND","CREEPS","PLAYER","position","dimension","settings","JSON","stringify","json","keys","forEach","key","Vector2_1","ICollideAble_1","colliding","collidesWith","type","EntityType","BOX","push","other","includes","toString","observers","state","observer","filter","obs","update","game","lastTime","init","running","frameId","requestAnimationFrame","loop","bind","cancelAnimationFrame","stop","start","paused","time","diff","render","Actions","UP","DOWN","LEFT","RIGHT","SHOOT","RESTART","ROTATE_LEFT","ROTATE_RIGHT","Dimension_1","Actions_1","canvas","gameSize","keyboard","w","ArrowUp","ArrowDown","space","newKey","action","oldKey","findKey","console","log","elementId","turretList","assetManager","element","document","getElementById","turret","turretBox","createElement","classList","add","appendChild","assetId","addEventListener","Entity_1","ContextId_1","AssetId_1","damage","super","contextId","ctx","drawImage","asset","clearRect","dt","color","fillStyle","fillRect","quadTree","objects","getAllObjects","length","obj","findObjects","j","isCollideAbleWith","alive","audioContext","masterGain","buffer","gainNode","createGain","gain","connect","playing","source","createBufferSource","Sound_1","initAudioContext","window","AudioContext","webkitAudioContext","effectsGain","ambientGain","destination","data","id","callback","decodeAudioData","then","error","ambient","ENEMY","ENEMY_BULLET","PLAYER_BULLET","MAP","GAME_OVER","LASER","MAIN_THEME","EXPLOSION_I","EXPLOSION_II","ARENA","HitBox_1","QuadTree","hitBox","level","maxObjects","maxLevels","nodes","node","clear","returnedObjects","index","getIndex","Array","insert","split","splice","verticalMidpoint","horizontalMidpoint","topQuadrant","bottomQuadrant","subWidth","subHeight","QuadTree_1","Observable_1","inputManager","entities","collideables","movables","renderables","kills","cash","movable","move","entity","points","notify","Ajax","opts","xHttp","XMLHttpRequest","response","open","method","defaults","url","async","setRequestHeader","contentType","responseType","send","image","frameWidth","frameHeight","framesPerRow","SpriteSheet_1","Ajax_1","AssetType","SPRITE","SPRITE_SHEET","AUDIO","AUDIO_AMB","audioManager","cache","assetsDir","downloadCount","queue","path","item","create","decodeAudio","done","sprite","Image","src","spriteSheet","loadAudio","loadSprite","loadSpriteSheet","createSound","inputMap","initializeTouchHandler","touches","event","el","evt","preventDefault","touchstartX","pageX","touchstartY","pageY","thisInstance","reset","changedTouches","toucheMoveX","touchMoveY","a","InputManager_1","AssetManager_1","LegendState_1","AudioManager_1","CollisionManager_1","mapData","turretData","Tile_1","Turret_1","BuildMenu_1","contexts","TILE_SIZE","collisionManager","buildMenu","tiles","row","col","tile","blocked","buildable","queueDownload","initMap","downloadAll","renderable","turrets","turr","fromJSON","LegendOfTheVoid_1","Settings_1","LegendLoop_1","container","Map","bgCanvas","creepCanvas","playerCanvas","set","getContext","ev","addTurret"],"mappings":"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","file":"legend.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 26);\n","/**\r\n * Dimension class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Dimension {\r\n  width: number\r\n  height: number\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {number} width Width\r\n   * @param {number} height Height\r\n   */\r\n  constructor (width: number, height: number) {\r\n    this.width = width\r\n    this.height = height\r\n  }\r\n\r\n  /**\r\n   * Scale the dimension.\r\n   *\r\n   * @param {number} factor\r\n   */\r\n  public scale (factor: number) {\r\n    this.width *= factor\r\n    this.height *= factor\r\n  }\r\n}\r\n","import IVector from '../interfaces/IVector'\r\n\r\n/**\r\n * 2D vector implementation.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Vector2 implements IVector {\r\n  public x: number\r\n  public y: number\r\n\r\n  /**\r\n   * Default constructor. Sets x and y values.\r\n   *\r\n   * @param {number} x initial x value\r\n   * @param {number} y initial y value\r\n   */\r\n  constructor (x: number, y: number) {\r\n    this.x = x\r\n    this.y = y\r\n  }\r\n\r\n  /**\r\n   * Static addVector method to combine two vectors into a new one.\r\n   *\r\n   * @param {Vector2} v1 first vector\r\n   * @param {Vector2} v2 second vector\r\n   * @returns {Vector2} combined vector\r\n   */\r\n  static addVector (v1: Vector2, v2: Vector2): Vector2 {\r\n    return new Vector2(v1.x + v2.x, v1.y + v2.y)\r\n  }\r\n\r\n  /**\r\n   * Subtract two vector from each other and put the result into a new vector.\r\n   *\r\n   * @param {Vector2} v1 first vector\r\n   * @param {Vector2} v2 second vector\r\n   * @returns {Vector2} resulting vector\r\n   */\r\n  static subtractVector (v1: Vector2, v2: Vector2): Vector2 {\r\n    return new Vector2(v1.x - v2.x, v1.y - v2.y)\r\n  }\r\n\r\n  /**\r\n   * Multiplies a vector with a scalar and returns the resulting vector.\r\n   *\r\n   * @param {Vector2} vector initial vector\r\n   * @param {number} scalar scalar to scale the vector\r\n   * @returns {Vector2} the resulting vector\r\n   */\r\n  static multiply (vector: Vector2, scalar: number): Vector2 {\r\n    return new Vector2(vector.x * scalar, vector.y * scalar)\r\n  }\r\n\r\n  /**\r\n   * Divides a vector by a scalar and returns the result in a new vector.\r\n   * Throws error if trying to divide by zero.\r\n   *\r\n   * @param {Vector2} vector vector to divide\r\n   * @param {number} scalar scalar used to divide vector\r\n   * @returns {Vector2} resulting vector\r\n   */\r\n  static divide (vector: Vector2, scalar: number): Vector2 {\r\n    if (scalar === 0) {\r\n      throw new Error('cannot divide vector by scalar with value \"0\"')\r\n    }\r\n    return new Vector2(vector.x / scalar, vector.y / scalar)\r\n  }\r\n\r\n  /**\r\n   * Set vector with both x and y values.\r\n   *\r\n   * @param {number} x new x value\r\n   * @param {number} y new y value\r\n   */\r\n  set (x: number, y: number): void {\r\n    this.x = x\r\n    this.y = y\r\n  }\r\n\r\n  /**\r\n   * Set vector location to another vector.\r\n   *\r\n   * @param {Vector2} vector other vector\r\n   */\r\n  setVector (vector: Vector2): void {\r\n    this.x = vector.x\r\n    this.y = vector.y\r\n  }\r\n\r\n  /**\r\n   * Add x and y to this vector.\r\n   *\r\n   * @param {number} x x value\r\n   * @param {number} y y value\r\n   */\r\n  add (x: number, y: number): void {\r\n    this.x += x\r\n    this.y += y\r\n  }\r\n\r\n  /**\r\n   * Add vector to this vector.\r\n   *\r\n   * @param {Vector2} vector other vector\r\n   */\r\n  addVector (vector: Vector2): void {\r\n    this.x += vector.x\r\n    this.y += vector.y\r\n  }\r\n\r\n  /**\r\n   * Subtraxt x and y from this vector.\r\n   *\r\n   * @param {number} x x value\r\n   * @param {number} y y value\r\n   */\r\n  subtract (x: number, y: number): void {\r\n    this.x -= x\r\n    this.y -= y\r\n  }\r\n\r\n  /**\r\n   * Subtract a vector from this vector.\r\n   *\r\n   * @param {Vector2} vector other vector\r\n   */\r\n  subtractVector (vector: Vector2): void {\r\n    this.x -= vector.x\r\n    this.y -= vector.y\r\n  }\r\n\r\n  /**\r\n   * Multiply this vector by scalar.\r\n   *\r\n   * @param scalar scalar to multiply the vector\r\n   */\r\n  multiply (scalar: number): void {\r\n    this.x *= scalar\r\n    this.y *= scalar\r\n  }\r\n\r\n  /**\r\n   * Divides this vector by a scalar.\r\n   * Throws error when trying to divide by zero.\r\n   *\r\n   * @param {number} scalar scalar used to divide this vector\r\n   */\r\n  divide (scalar: number): void {\r\n    if (scalar === 0) {\r\n      throw new Error('cannot divide vector by \"0\"')\r\n    }\r\n    this.x /= scalar\r\n    this.y /= scalar\r\n  }\r\n\r\n  /**\r\n   * Get the magnitude / elementsCount of this vector.\r\n   *\r\n   * @returns {number} magnitude / elementsCount of this vector\r\n   */\r\n  mag (): number {\r\n    return Math.sqrt(this.x * this.x + this.y * this.y)\r\n  }\r\n\r\n  /**\r\n   * Negate the x and y values of this vector and return the result as a new Vector2 object.\r\n   *\r\n   * @returns {Vector2}\r\n   */\r\n  negative (): Vector2 {\r\n    return new Vector2(-this.x, -this.y)\r\n  }\r\n\r\n  /**\r\n   * Normalize the vector.\r\n   */\r\n  normalize (): void {\r\n    let magnitude = this.mag()\r\n    if (magnitude !== 0) {\r\n      this.divide(magnitude)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Limit the vector to a maximum elementsCount.\r\n   *\r\n   * @param {number} max maximum elementsCount\r\n   */\r\n  limit (max: number): void {\r\n    if (Math.floor(this.mag()) > max) {\r\n      this.normalize()\r\n      this.multiply(max)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the distance of this vector to another vector.\r\n   *\r\n   * @param {Vector2} vector other vector\r\n   * @returns {number} calculated distance\r\n   */\r\n  distanceTo (vector: Vector2): number {\r\n    return Math.sqrt(Math.pow(vector.x - this.x, 2) + Math.pow(vector.y - this.y, 2))\r\n  }\r\n\r\n  /**\r\n   * Get the dot product between this vector and another vector.\r\n   *\r\n   * @param {Vector2} vector\r\n   * @returns {number} the dot product of this vector and the one passed as param.\r\n   */\r\n  dot (vector: Vector2): number {\r\n    return this.x * vector.x + this.y * vector.y\r\n  }\r\n\r\n  floor (): void {\r\n    this.x = Math.floor(this.x)\r\n    this.x = Math.floor(this.x)\r\n  }\r\n\r\n  /**\r\n   * Create a clone of this vector.\r\n   *\r\n   * @returns {Vector2} cloned vector\r\n   */\r\n  clone (): Vector2 {\r\n    return new Vector2(this.x, this.y)\r\n  }\r\n}\r\n","/**\r\n *\r\n */\r\nexport enum AssetId {\r\n  BASE_VOID = 'base-void',\r\n  TURRET_LASER = 'turret-laser',\r\n  CREEP_VOID_LEECHER = 'creep-void-leecher',\r\n  NONE = 'none'\r\n}\r\n","export enum ContextId {\r\n  BACKGROUND = 'background', CREEPS ='creeps' , PLAYER = 'player'\r\n}\r\n","import Vector2 from '../math/Vector2'\r\nimport Settings from '../../config/Settings'\r\nimport Dimension from '../geometry/Dimension'\r\nimport IJSONSerializable from '../interfaces/IJSONSerializable'\r\n\r\n/**\r\n * Base entity class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Entity implements IJSONSerializable {\r\n  id: string\r\n  dimension: Dimension\r\n  settings: Settings\r\n  position: Vector2\r\n\r\n  /**\r\n   * Constructor. Sets position and dimension of entity.\r\n   *\r\n   * @param {Vector2} position Initial position\r\n   * @param {Dimension} dimension Initial dimension\r\n   * @param {Settings} settings\r\n   */\r\n  constructor (position?: Vector2, dimension?: Dimension, settings?: Settings) {\r\n    this.position = position\r\n    this.dimension = dimension\r\n    this.settings = settings\r\n  }\r\n\r\n  public init (): void {\r\n    throw new Error('Implement in subclass.')\r\n  }\r\n\r\n  /**\r\n   * Create a JSON string from this object.\r\n   * \r\n   * @returns {string} The JSoN string\r\n   */\r\n  public toJSON (): string {\r\n    return JSON.stringify(this)\r\n  }\r\n\r\n  /**\r\n   * Load data into this object from JSON.\r\n   *\r\n   * @param json JSON string\r\n   */\r\n  public fromJSON (json: any): void {\r\n    \r\n    // Map parsed object to the attributes of this entity.\r\n    Object.keys(json).forEach(key => {\r\n      if ( this.hasOwnProperty( key ) ) {\r\n        this[key] = json[key]\r\n      }\r\n    })\r\n  }\r\n}\r\n","import Vector2 from '../math/Vector2'\r\nimport ICollideAble, { EntityType } from '../interfaces/ICollideAble'\r\n\r\n/**\r\n * Hitbox used for defining collision boundaries.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class HitBox implements ICollideAble {\r\n  type: EntityType\r\n  collidesWith\r\n  colliding: boolean\r\n  position: Vector2\r\n  width: number\r\n  height: number\r\n\r\n  /**\r\n   * Initializes position and dimension.\r\n   * @param {number} x position x\r\n   * @param {number} y position y\r\n   * @param {number} width dimension width\r\n   * @param {number} height dimension height\r\n   */\r\n  constructor (x, y, width, height) {\r\n    this.position = new Vector2(x, y)\r\n    this.width = width\r\n    this.height = height\r\n    this.colliding = false\r\n    this.collidesWith = []\r\n    this.type = EntityType.BOX\r\n    this.collidesWith.push(EntityType.PLAYER)\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {ICollideAble} other\r\n   * @returns {boolean}\r\n   */\r\n  isCollideAbleWith (other: ICollideAble): boolean {\r\n    return this.collidesWith.includes(other.type.toString())\r\n  }\r\n}\r\n","import Observer from './Observer'\r\n\r\n/**\r\n * Observable class to be extended by a class that should be observed.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Observable {\r\n  protected observers: Observer[]\r\n  protected state: any\r\n\r\n  constructor () {\r\n    this.observers = []\r\n    this.state = {}\r\n  }\r\n\r\n  /**\r\n   * Register an observer on this observable.\r\n   *\r\n   * @param {Observer} observer Object implementing the Observer interface\r\n   */\r\n  register (observer: Observer): void {\r\n    this.observers.push(observer)\r\n  }\r\nd\r\n  /**\r\n   * Remove an observer from this observables observers list.\r\n   *\r\n   * @param {Observer} observer Object implementing the Observer interface\r\n   */\r\n  unRegister (observer: Observer): void {\r\n    this.observers = this.observers.filter(obs => {return obs !== observer})\r\n  }\r\n\r\n  /**\r\n   * Notify all observers.\r\n   */\r\n  notify (): void {\r\n    this.observers.forEach(observer => observer.update(this.state))\r\n  }\r\n}\r\n","/**\r\n * Legend of the void game loop class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nimport IGameLoop from '../lib/interfaces/IGameLoop'\r\nimport IGame from '../lib/interfaces/IGame'\r\n\r\nexport default class LegendLoop implements IGameLoop {\r\n  public game: IGame\r\n  public lastTime: number\r\n  public frameId: number\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {IGame} game Game instance\r\n   */\r\n  constructor (game: IGame) {\r\n    this.game = game\r\n    this.lastTime = null\r\n  }\r\n\r\n  /**\r\n   * Start the game loop.\r\n   */\r\n  public start (): void {\r\n    this.game.init()\r\n    this.game.state.running = true\r\n    this.frameId = requestAnimationFrame(this.loop.bind(this))\r\n  }\r\n\r\n  /**\r\n   * Stop the game loop.\r\n   */\r\n  public stop (): void {\r\n    this.game.state.running = false\r\n    if (this.frameId) {\r\n      cancelAnimationFrame(this.frameId)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop the game loop and start it again.\r\n   */\r\n  public restart (): void {\r\n    this.stop()\r\n    this.start()\r\n  }\r\n\r\n  /**\r\n   * Pause/unpause game.\r\n   */\r\n  public togglePause (): void {\r\n    this.game.state.paused = !this.game.state.paused\r\n  }\r\n\r\n  /**\r\n   * Main loop executing update and render methods.\r\n   */\r\n  public loop (time: number): void {\r\n    if (this.game.state.running) {\r\n      if (!this.game.state.paused) {\r\n        if (this.lastTime !== null) {\r\n          const diff = time - this.lastTime\r\n          this.game.state.update(diff / 1000)\r\n        }\r\n        this.lastTime = time\r\n        this.game.render()\r\n        this.frameId = requestAnimationFrame(this.loop.bind(this))\r\n      }\r\n    }\r\n  }\r\n}\r\n","export enum Actions {\r\n  UP = 'UP',\r\n  DOWN = 'DOWN',\r\n  LEFT = 'LEFT',\r\n  RIGHT = 'RIGHT',\r\n  SHOOT = 'SHOOT',\r\n  RESTART = 'RESTART',\r\n  ROTATE_LEFT = 'R-LEFT',\r\n  ROTATE_RIGHT = 'R-RIGHT'\r\n}\r\n","import Dimension from '../lib/geometry/Dimension'\r\nimport { Actions } from '../enum/Actions'\r\nimport Player from '../model/Player'\r\n/**\r\n * Pong game settings.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Settings {\r\n  gameSize: Dimension\r\n  canvas: HTMLCanvasElement\r\n  keyboard\r\n  player\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {HTMLCanvasElement} canvas\r\n   */\r\n  constructor (canvas: HTMLCanvasElement) {\r\n    this.gameSize = new Dimension(canvas.width, canvas.height)\r\n    this.canvas = canvas\r\n    this.keyboard = {\r\n      'w': Actions.UP,\r\n      's': Actions.DOWN,\r\n      'ArrowUp': Actions.LEFT,\r\n      'ArrowDown': Actions.RIGHT,\r\n      'space': Actions.SHOOT,\r\n      'r': Actions.RESTART\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param value\r\n   * @returns {string}\r\n   */\r\n  findKey (value): string {\r\n    return Object.keys(this.keyboard).filter(key => this.keyboard[key] === value)[0]\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param newKey\r\n   * @param {Actions} action\r\n   */\r\n  setKey (newKey, action: Actions): void {\r\n    let oldKey = this.findKey(action)\r\n    if (newKey !== oldKey) {\r\n      console.log('old:' + oldKey, ' new: ' + newKey + ' value: ' + action)\r\n      this.keyboard[newKey] = this.keyboard[oldKey]\r\n      delete this.keyboard[oldKey]\r\n    }\r\n  }\r\n}\r\n","import IGameState from '../lib/interfaces/IGameState'\r\nimport Turret from '../model/Turret'\r\nimport AssetManager from '../lib/client/AssetManager'\r\n\r\n/** \r\n * Build menu for building Towers etc.\r\n * \r\n * @author Daniel Peters\r\n * @version 1.0\r\n*/\r\nexport default class BuildMenu {\r\n  element: HTMLElement\r\n  state: IGameState\r\n  turretList: Turret[]\r\n  assetManager: AssetManager\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {string} elementId\r\n   * @param {Turret[]} turretList\r\n   * @param assetManager\r\n   */\r\n  constructor (elementId: string, turretList, assetManager: AssetManager) {\r\n    this.element = document.getElementById(elementId)\r\n    this.turretList = turretList\r\n    this.assetManager = assetManager\r\n  }\r\n\r\n  /**\r\n   * Initialize the menu.\r\n   */\r\n  init (): void {\r\n    this.turretList.forEach(turret => {\r\n      const turretBox = document.createElement('div')\r\n      turretBox.classList.add('build-box')\r\n      turretBox.appendChild(this.assetManager.get(turret.assetId))\r\n      turretBox.addEventListener('click', () => {})\r\n      this.element.appendChild(turretBox)\r\n    })\r\n  }\r\n}\r\n","import Entity from '../lib/entity/Entity'\r\nimport Vector2 from '../lib/math/Vector2'\r\nimport Dimension from '../lib/geometry/Dimension'\r\nimport Settings from '../config/Settings'\r\nimport IRenderable from '../lib/interfaces/IRenderable'\r\nimport IMovable from '../lib/interfaces/IMovable'\r\nimport { ContextId } from '../enum/ContextId'\r\nimport { TurretType } from '../enum/TurretType'\r\nimport { AssetId } from '../enum/AssetId'\r\n\r\n/**\r\n * Turret class.\r\n * \r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Turret extends Entity implements IRenderable, IMovable {\r\n  type: TurretType\r\n  description: string\r\n  assetId: AssetId\r\n  damage: number\r\n  rate: number\r\n  range: number\r\n  asset\r\n  contextId: ContextId\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {number} x Starting position on x axis\r\n   * @param {number} y Starting position on y axis\r\n   * @param {number} width Turret width\r\n   * @param {number} height Turret height\r\n   * @param {number} damage Turret attack\r\n   * @param {Settings} settings Game settings.\r\n   * @param {TurretType} type\r\n   * @param {AssetId} assetId\r\n   */\r\n  constructor (x?: number, y?: number, width?: number, height?: number, damage?: number, settings?: Settings, type?: TurretType, assetId: AssetId = AssetId.TURRET_LASER) {\r\n    super(new Vector2(x, y), new Dimension(width, height), settings)\r\n    this.type = type\r\n    this.damage = damage\r\n    this.contextId = ContextId.PLAYER\r\n    this.assetId = assetId\r\n  }\r\n\r\n  public init (): void {\r\n    \r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {CanvasRenderingContext2D} ctx \r\n   */\r\n  public render (ctx: CanvasRenderingContext2D) {\r\n    ctx.drawImage(this.asset, this.position.x, this.position.y, this.dimension.width, this.dimension.height)\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {CanvasRenderingContext2D} ctx \r\n   */\r\n  public clear (ctx: CanvasRenderingContext2D) {\r\n    ctx.clearRect(this.position.x, this.position.y, this.dimension.width, this.dimension.height)\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {number} dt \r\n   */\r\n  public move (dt: number) {\r\n\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  private shoot (): void {\r\n\r\n  }\r\n}\r\n","import Entity from '../lib/entity/Entity'\r\nimport Settings from '../config/Settings'\r\nimport Vector2 from '../lib/math/Vector2'\r\nimport Dimension from '../lib/geometry/Dimension'\r\nimport Turret from './Turret'\r\nimport IRenderable from '../lib/interfaces/IRenderable'\r\nimport { ContextId } from '../enum/ContextId'\r\nimport { AssetId } from '../enum/AssetId'\r\n\r\n/**\r\n * 2D Tower defense tile class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Tile extends Entity implements IRenderable {\r\n  contextId: ContextId\r\n  assetId: AssetId\r\n  asset\r\n  blocked: boolean\r\n  buildable: boolean\r\n  turret: Turret\r\n  color: string\r\n\r\n  /**\r\n   * Conscrutor.\r\n   *\r\n   * @param x\r\n   * @param y\r\n   * @param width\r\n   * @param height\r\n   * @param settings\r\n   */\r\n  constructor (x: number, y: number, width: number, height: number, settings: Settings) {\r\n    super(new Vector2(x, y), new Dimension(width, height), settings)\r\n    this.color = '#ffffff'\r\n    this.contextId = ContextId.BACKGROUND\r\n    this.assetId = AssetId.NONE\r\n  }\r\n\r\n  init (): void {\r\n\r\n  }\r\n\r\n  render (ctx: CanvasRenderingContext2D): void {\r\n    ctx.fillStyle = this.color\r\n    ctx.fillRect(this.position.x, this.position.y, this.dimension.width, this.dimension.height)\r\n  }\r\n\r\n  clear (ctx: CanvasRenderingContext2D): void {\r\n    ctx.clearRect(this.position.x, this.position.y, this.dimension.width, this.dimension.height)\r\n  }\r\n}\r\n","import QuadTree from './QuadTree'\r\nimport ICollisionManager from '../interfaces/ICollisionManager'\r\n\r\n/**\r\n * Collision Manager.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class CollisionManager implements ICollisionManager {\r\n  quadTree: QuadTree\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {QuadTree} quadTree\r\n   */\r\n  constructor (quadTree: QuadTree) {\r\n    this.quadTree = quadTree\r\n  }\r\n\r\n  /**\r\n   * Collision detection algorithm.\r\n   */\r\n  detectCollision (): void {\r\n    let objects = []\r\n    this.quadTree.getAllObjects(objects)\r\n    for (let i = 0; i < objects.length; i++) {\r\n      let obj = []\r\n      this.quadTree.findObjects(obj, objects[i])\r\n\r\n      for (let j = 0; j < obj.length; j++) {\r\n        if (objects[i].isCollideAbleWith(obj[j]) &&\r\n          (Math.floor(objects[i].position.x) < Math.floor(obj[j].position.x) + obj[j].dimension.width &&\r\n            Math.floor(objects[i].position.x) + objects[i].dimension.width > Math.floor(obj[j].position.x) &&\r\n            Math.floor(objects[i].position.y) < Math.floor(obj[j].position.y) + obj[j].dimension.height &&\r\n            Math.floor(objects[i].position.y) + objects[i].dimension.height > Math.floor(obj[j].position.y))\r\n        && objects[i].alive && obj[j].alive) {\r\n          console.log(objects[i])\r\n          objects[i].colliding = true\r\n          obj[j].colliding = true\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Sound class used to play a sound from a file.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Sound {\r\n  audioContext: AudioContext\r\n  source: AudioBufferSourceNode\r\n  gainNode: GainNode\r\n  masterGain: GainNode\r\n  buffer\r\n  playing: boolean\r\n\r\n  /**\r\n   *\r\n   * @param audioContext\r\n   * @param {GainNode} masterGain\r\n   * @param buffer\r\n   */\r\n  constructor (audioContext, masterGain: GainNode, buffer) {\r\n    this.audioContext = audioContext\r\n    this.masterGain = masterGain\r\n    this.buffer = buffer\r\n    this.gainNode = this.audioContext.createGain()\r\n    this.gainNode.gain.value = 0.2\r\n    this.gainNode.connect(this.masterGain)\r\n    this.playing = false\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {boolean} loop\r\n   */\r\n  play (loop = false): void {\r\n    this.source = this.audioContext.createBufferSource()\r\n    this.source.buffer = this.buffer\r\n    this.source.loop = loop\r\n    this.source.connect(this.gainNode)\r\n    this.source.start(0)\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  stop (): void {\r\n    if (this.source) {\r\n      this.source.stop(0)\r\n    }\r\n  }\r\n}\r\n","import Sound from '../audio/Sound'\r\n\r\n/**\r\n * Audio manager class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class AudioManager {\r\n  private audioContext: AudioContext\r\n  private masterGain: GainNode\r\n  private effectsGain: GainNode\r\n  private ambientGain: GainNode\r\n\r\n  /**\r\n   *\r\n   */\r\n  constructor () {\r\n    this.initAudioContext()\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  initAudioContext (): void {\r\n    try {\r\n      // Fix for browsers using prefixes\r\n      window.AudioContext = window.AudioContext || webkitAudioContext\r\n      this.audioContext = new AudioContext()\r\n      this.masterGain = this.audioContext.createGain()\r\n      this.effectsGain = this.audioContext.createGain()\r\n      this.ambientGain = this.audioContext.createGain()\r\n      this.masterGain.gain.value = 1\r\n      this.masterGain.connect(this.audioContext.destination)\r\n      this.effectsGain.connect(this.masterGain)\r\n      this.ambientGain.connect(this.masterGain)\r\n      this.ambientGain.gain.value = 1\r\n      this.effectsGain.gain.value = 1\r\n    } catch (e) {\r\n      console.log('Web Audio API is not supported in this browser')\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param data\r\n   * @param id\r\n   * @param callback\r\n   */\r\n  decodeAudio (data, id, callback): void {\r\n    this.audioContext.decodeAudioData(data).then(\r\n      buffer => callback(buffer),\r\n      error => { console.log('Error with decoding audio data' + error) }\r\n    )\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {number} value\r\n   */\r\n  adjustMasterVolume (value: number): void {\r\n    this.masterGain.gain.value = value\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {number} value\r\n   */\r\n  adjustAmbientVolume (value: number): void {\r\n    this.ambientGain.gain.value = value\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {number} value\r\n   */\r\n  adjustEffectsVolume (value: number): void {\r\n    this.effectsGain.gain.value = value\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param buffer\r\n   * @param {boolean} ambient\r\n   * @returns {Sound}\r\n   */\r\n  createSound (buffer, ambient: boolean): Sound {\r\n    return new Sound(this.audioContext, ambient ? this.ambientGain : this.effectsGain, buffer)\r\n  }\r\n}\r\n","export enum EntityType {\r\n  PLAYER = 'ship',\r\n  ENEMY = 'enemy',\r\n  ENEMY_BULLET = 'bulletEnemy',\r\n  PLAYER_BULLET = 'bullet',\r\n  BACKGROUND = 'background',\r\n  MAP = 'map',\r\n  GAME_OVER = 'gameOver',\r\n  LASER = 'laser',\r\n  MAIN_THEME = 'shockWave',\r\n  EXPLOSION_I = 'explosion1',\r\n  EXPLOSION_II = 'explosion2',\r\n  BOX = 'box',\r\n  ARENA = 'arena'\r\n}\r\n\r\n/**\r\n * Interface for collideable entities.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default interface ICollideAble {\r\n  collidesWith: EntityType[]\r\n  colliding: boolean\r\n  type: EntityType\r\n\r\n  /**\r\n   *\r\n   * @param {ICollideAble} other\r\n   * @returns {boolean}\r\n   */\r\n  isCollideAbleWith (other: ICollideAble): boolean\r\n}\r\n","import HitBox from './HitBox'\r\nimport ICollideAble from '../interfaces/ICollideAble'\r\n\r\n/**\r\n * QuadTree class used to optimize collision checking.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class QuadTree {\r\n  level: number\r\n  maxObjects: number\r\n  maxLevels: number\r\n  hitBox: HitBox\r\n  objects: ICollideAble[]\r\n  nodes: QuadTree[]\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {HitBox} hitBox\r\n   * @param {number} level\r\n   */\r\n  constructor (hitBox = new HitBox(0, 0, 0, 0), level = 0) {\r\n    this.level = level\r\n    this.maxObjects = 10\r\n    this.maxLevels = 5\r\n    this.hitBox = hitBox\r\n    this.objects = []\r\n    this.nodes = []\r\n  }\r\n\r\n  /**\r\n   * Clears the QuadTree and its sub nodes from all models objects.\r\n   */\r\n  clear (): void {\r\n    this.objects = []\r\n    this.nodes.forEach(node => node.clear())\r\n    this.nodes = []\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param returnedObjects\r\n   * @returns {any}\r\n   */\r\n  getAllObjects (returnedObjects) {\r\n    this.nodes.forEach(node => node.getAllObjects(returnedObjects))\r\n    this.objects.forEach(object => returnedObjects.push(object))\r\n    return returnedObjects\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param returnedObjects\r\n   * @param object\r\n   * @returns {any}\r\n   */\r\n  findObjects (returnedObjects, object) {\r\n    if (typeof object === 'undefined') {\r\n      console.log('UNDEFINED OBJECT')\r\n      return\r\n    }\r\n    let index = this.getIndex(object)\r\n    if (index !== -1 && this.nodes.length) {\r\n      this.nodes[index].findObjects(returnedObjects, object)\r\n    }\r\n    this.objects.forEach(obj => returnedObjects.push(obj))\r\n    return returnedObjects\r\n  }\r\n\r\n  /**\r\n   * Insert an object into the QuadTree.\r\n   *\r\n   * @param object\r\n   */\r\n  insert (object): void {\r\n    if (typeof object === 'undefined') {\r\n      return\r\n    }\r\n    if (object instanceof Array) {\r\n      object.forEach(element => this.insert(element))\r\n      return\r\n    }\r\n    if (this.nodes.length > 0) {\r\n      let index = this.getIndex(object)\r\n      // Only addVector the object to a sub node if it can fit completely within one\r\n      if (index !== -1) {\r\n        this.nodes[index].insert(object)\r\n        return\r\n      }\r\n    }\r\n    this.objects.push(object)\r\n\r\n    if (this.objects.length > this.maxObjects && this.level < this.maxLevels) {\r\n      if (typeof this.nodes[0] === 'undefined') {\r\n        this.split()\r\n      }\r\n      let i = 0\r\n      while (i < this.objects.length) {\r\n        let index = this.getIndex(this.objects[i])\r\n        if (index !== -1) {\r\n          this.nodes[index].insert((this.objects.splice(i, 1))[0])\r\n        } else {\r\n          i++\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the index of an object from the QuadTree.\r\n   *\r\n   * @param object\r\n   * @returns {number}\r\n   */\r\n  getIndex (object): number {\r\n    let index = -1\r\n    let verticalMidpoint = this.hitBox.position.x + this.hitBox.width / 2\r\n    let horizontalMidpoint = this.hitBox.position.y + this.hitBox.height / 2\r\n    // Object can fit completely within the top quadrant\r\n    let topQuadrant = (object.position.y < horizontalMidpoint && object.position.y + object.height < horizontalMidpoint)\r\n    // Object can fit completely within the bottom quadrant\r\n    let bottomQuadrant = (object.position.y > horizontalMidpoint)\r\n    // Object can fit completely within the left quadrants\r\n    if (object.position.x < verticalMidpoint && object.position.x + object.width < verticalMidpoint) {\r\n      if (topQuadrant) {\r\n        index = 1\r\n      } else if (bottomQuadrant) {\r\n        index = 2\r\n      }\r\n    } else if (object.position.x > verticalMidpoint) { // Object can fix completely within the right quadrants\r\n      if (topQuadrant) {\r\n        index = 0\r\n      } else if (bottomQuadrant) {\r\n        index = 3\r\n      }\r\n    }\r\n    return index\r\n  }\r\n\r\n  /**\r\n   * Split the tree on demand.\r\n   */\r\n  split (): void {\r\n    let subWidth = (this.hitBox.width / 2) | 0\r\n    let subHeight = (this.hitBox.height / 2) | 0\r\n    this.nodes[0] = new QuadTree(\r\n      new HitBox(this.hitBox.position.x + subWidth, this.hitBox.position.y, subWidth, subHeight), this.level + 1)\r\n    this.nodes[1] = new QuadTree(\r\n      new HitBox(this.hitBox.position.x, this.hitBox.position.y, subWidth, subHeight), this.level + 1)\r\n    this.nodes[2] = new QuadTree(\r\n      new HitBox(this.hitBox.position.x, this.hitBox.position.y + subHeight, subWidth, subHeight), this.level + 1)\r\n    this.nodes[3] = new QuadTree(\r\n      new HitBox(this.hitBox.position.x + subWidth, this.hitBox.position.y + subHeight, subWidth, subHeight), this.level + 1)\r\n  }\r\n}\r\n","import IGameState from '../lib/interfaces/IGameState'\r\nimport QuadTree from '../lib/collision/QuadTree'\r\nimport Entity from '../lib/entity/Entity'\r\nimport ICollideAble from '../lib/interfaces/ICollideAble'\r\nimport Settings from '../config/Settings'\r\nimport InputManager from '../lib/client/InputManager'\r\nimport IRenderable from '../lib/interfaces/IRenderable'\r\nimport IMovable from '../lib/interfaces/IMovable'\r\nimport Tile from '../model/Tile'\r\nimport Observable from '../lib/observer/Observable'\r\nimport HitBox from '../lib/collision/HitBox'\r\n\r\n/**\r\n * Legend of the void game state class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class LegendState extends Observable implements IGameState {\r\n  public running: boolean\r\n  public paused: boolean\r\n  public quadTree: QuadTree\r\n  public entities: Entity[]\r\n  public collideables: ICollideAble[]\r\n  public movables: IMovable[]\r\n  public renderables: IRenderable[]\r\n  public map: Tile[]\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {Settings} settings\r\n   * @param {InputManager} inputManager\r\n   */\r\n  constructor (settings: Settings, inputManager: InputManager) {\r\n    super()\r\n    this.running = false\r\n    this.paused = false\r\n    this.entities = []\r\n    this.quadTree = new QuadTree(new HitBox(0, 0, settings.gameSize.width, settings.gameSize.height))\r\n    this.collideables = []\r\n    this.movables = []\r\n    this.renderables = []\r\n    this.state = {\r\n      kills: 0,\r\n      cash: 0\r\n    }\r\n  }\r\n\r\n  public update (dt: number): void {\r\n    this.movables.forEach(movable => movable.move(dt))\r\n  }\r\n\r\n  public reset (): void {\r\n    this.entities.forEach(entity => entity.init())\r\n  }\r\n\r\n  public scorePoints (points: number): void {\r\n    this.state.cash += points\r\n    this.state.kills++\r\n    this.notify()\r\n  }\r\n}\r\n","export default class Ajax {\r\n  private static defaults = {\r\n    url: '',\r\n    method: 'GET',\r\n    contentType: 'text/html',\r\n    async: true,\r\n    data: null\r\n  }\r\n\r\n  /**\r\n   * Create and send an XML-HTTP request.\r\n   * Requires an options object.\r\n   *\r\n   * @param opts Possible option properties:\r\n   * url = url to send the request to.\r\n   * method = request method. GET, POST, PUT, DELETE.\r\n   * contentType = specify the content type of the request.\r\n   * async = boolean flag for async calls. Defaults to true.\r\n   * data = request body.\r\n   * @param callback success callback function\r\n   */\r\n  public static create (opts, callback): void {\r\n    let xHttp = new XMLHttpRequest()\r\n    xHttp.addEventListener('load', () => {\r\n      callback(xHttp.response)\r\n    })\r\n    xHttp.open(\r\n      opts.method ? opts.method : Ajax.defaults.method,\r\n      opts.url ? opts.url : Ajax.defaults.url,\r\n      opts.async ? opts.async : Ajax.defaults.async\r\n    )\r\n    if (opts.hasOwnProperty('contentType')) {\r\n      xHttp.setRequestHeader(\r\n        'Content-Type',\r\n        opts.contentType ? opts.contentType : Ajax.defaults.contentType\r\n      )\r\n    }\r\n    if (opts.hasOwnProperty('responseType')) {\r\n      xHttp.responseType = opts.responseType\r\n    }\r\n    if (opts.hasOwnProperty('data') && typeof opts.data === 'object') {\r\n      opts.data = JSON.stringify(opts.data)\r\n    }\r\n    xHttp.send(opts.data ? opts.data : null)\r\n  }\r\n}\r\n","/**\r\n * Sprite sheet definition.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class SpriteSheet {\r\n  public image: HTMLImageElement\r\n  public frameWidth: number\r\n  public frameHeight: number\r\n  public framesPerRow: number\r\n\r\n  /**\r\n   * Constructor. Sets frame dimensions and calculates number of frames.\r\n   *\r\n   * @param image\r\n   * @param frameWidth\r\n   * @param frameHeight\r\n   */\r\n  constructor (image: HTMLImageElement, frameWidth, frameHeight) {\r\n    this.image = image\r\n    this.frameWidth = frameWidth\r\n    this.frameHeight = frameHeight\r\n    this.framesPerRow = Math.floor(image.width / frameWidth)\r\n  }\r\n}\r\n","import SpriteSheet from '../graphics/2D/SpriteSheet'\r\nimport Sound from '../audio/Sound'\r\nimport Ajax from '../ajax/Ajax'\r\nimport { AssetId } from '../../enum/AssetId'\r\nimport AudioManager from './AudioManager'\r\n\r\nexport enum AssetType {\r\n  SPRITE = 'sprite', SPRITE_SHEET = 'sprite-sheet', AUDIO = 'audio', AUDIO_AMB = 'audio-amb'\r\n}\r\n\r\n/**\r\n * Asset manager Class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class AssetManager {\r\n  private cache\r\n  private assetsDir: string\r\n  private queue\r\n  private downloadCount: number\r\n  private audioManager: AudioManager\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {AudioManager} audioManager\r\n   */\r\n  constructor (audioManager: AudioManager) {\r\n    this.cache = []\r\n    this.assetsDir = 'assets/'\r\n    this.downloadCount = 0\r\n    this.queue = []\r\n    this.audioManager = audioManager\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns {boolean}\r\n   */\r\n  done (): boolean {\r\n    return this.downloadCount === this.queue.length\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {AssetId} id\r\n   * @param {AssetType} type\r\n   * @param {any} opts\r\n   */\r\n  queueDownload (id: AssetId, type: AssetType, opts = null): void {\r\n    this.queue.push({ id: id, path: this.assetsDir + type + '/' + id + '.png', type: type, opts: opts })\r\n  }\r\n\r\n  /**\r\n   * Build an AJAX Request to loadAudio audio file into the buffer cache.\r\n   *\r\n   * @param item object with name of file and path to file\r\n   * @param callback function to execute on done\r\n   */\r\n  loadAudio (item, callback): void {\r\n    Ajax.create({\r\n      method: 'GET',\r\n      url: item.path,\r\n      responseType: 'arraybuffer'\r\n    }, response => {\r\n      this.audioManager.decodeAudio(response, item.id, buffer => {\r\n        this.cache[item.id] = buffer\r\n        this.downloadCount += 1\r\n        if (this.done()) {\r\n          callback()\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param item\r\n   * @param callback\r\n   */\r\n  loadSprite (item, callback): void {\r\n    let sprite = new Image()\r\n    sprite.addEventListener('load', () => {\r\n      this.downloadCount++\r\n      if (this.done()) {\r\n        callback()\r\n      }\r\n    })\r\n    sprite.src = item.path\r\n    this.cache[item.id] = sprite\r\n  }\r\n\r\n  /**\r\n   * Load sprites sheet.\r\n   *\r\n   * @param item sprite sheet info\r\n   * @param callback called upon downloading all\r\n   */\r\n  loadSpriteSheet (item, callback): void {\r\n    let spriteSheet = new Image()\r\n    spriteSheet.addEventListener('load', () => {\r\n      this.cache[item.id] = new SpriteSheet(spriteSheet, item.opts.frameWidth || 0, item.opts.frameHeight || 0)\r\n      this.downloadCount += 1\r\n      if (this.done()) {\r\n        callback()\r\n      }\r\n    })\r\n    spriteSheet.src = item.path\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param callback\r\n   */\r\n  downloadAll (callback): void {\r\n    this.queue.forEach(item => {\r\n      if (item.type === AssetType.AUDIO) {\r\n        this.loadAudio(item, callback)\r\n      } else if (item.type === AssetType.SPRITE) {\r\n        this.loadSprite(item, callback)\r\n      } else if (item.type === AssetType.SPRITE_SHEET) {\r\n        this.loadSpriteSheet(item, callback)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Create an audio buffer source node from cached buffer.\r\n   * Send it to the destination of the audio context and play it.\r\n   *\r\n   * @param {AssetId} id File id\r\n   * @param {AssetType} type\r\n   */\r\n  get (id: AssetId, type: AssetType = AssetType.SPRITE): any {\r\n    if (type === AssetType.AUDIO || type === AssetType.AUDIO_AMB) {\r\n      let ambient = type === AssetType.AUDIO_AMB\r\n      return this.audioManager.createSound(this.cache[id], ambient)\r\n    } else {\r\n      console.log(this.cache[id])\r\n      return this.cache[id]\r\n    }\r\n  }\r\n}\r\n","import Observable from '../observer/Observable'\r\nimport Settings from '../../config/Settings'\r\n\r\n/**\r\n * Input manager class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class InputManager extends Observable {\r\n  inputMap\r\n  touches\r\n\r\n  /**\r\n   *\r\n   */\r\n  constructor (settings: Settings) {\r\n    super()\r\n    this.inputMap = settings.keyboard\r\n    this.init()\r\n    this.initializeTouchHandler()\r\n    this.touches = {\r\n      start: [],\r\n      move: []\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register pressed keys and notify observers.\r\n   */\r\n  init (): void {\r\n    window.addEventListener('keydown', event => {\r\n      let key = event.key !== ' ' ? event.key : 'space'\r\n      this.state[this.inputMap[key]] = true\r\n      this.notify()\r\n    })\r\n    window.addEventListener('keyup', event => {\r\n      let key = event.key !== ' ' ? event.key : 'space'\r\n      this.state[this.inputMap[key]] = false\r\n      this.notify()\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Maps swipe directions to key press booleans.\r\n   * Allows touch controls on mobile.\r\n   */\r\n  initializeTouchHandler (): void {\r\n    // Register the event listeners\r\n    let button = document.getElementById('move')\r\n    let el = button ? button : window\r\n    el.addEventListener('touchstart', handleTouchStart, false)\r\n    el.addEventListener('touchmove', handleTouchMove, false)\r\n    el.addEventListener('touchend', handleTouchEnd, false)\r\n    el.addEventListener('contextmenu', event => {\r\n      event.preventDefault()\r\n      return false\r\n    })\r\n\r\n    let start = []\r\n    let move = []\r\n    let touchstartX = 0\r\n    let touchstartY = 0\r\n    let toucheMoveX = 0\r\n    let touchMoveY = 0\r\n    let thisInstance = this\r\n\r\n    function handleTouchStart (evt): void {\r\n      evt.preventDefault()\r\n      start = evt.touches\r\n      touchstartX = evt.touches[0].pageX\r\n      touchstartY = evt.touches[0].pageY\r\n    }\r\n\r\n    function handleTouchMove (evt): void {\r\n      thisInstance.reset()\r\n      evt.preventDefault()\r\n      move = evt.changedTouches\r\n      toucheMoveX = evt.touches[0].pageX\r\n      touchMoveY = evt.touches[0].pageY\r\n      for (let i = 0; i < evt.touches.length; i++) {\r\n        // Positive values equals left. Negative values equals right\r\n        if (move[i].pageX < start[i].pageX) {\r\n          thisInstance.state[thisInstance.inputMap['a']] = true\r\n        }\r\n        if (move[i].pageX > start[i].pageX) {\r\n          thisInstance.state[thisInstance.inputMap['d']] = true\r\n        }\r\n        if (move[i].pageY < start[i].pageY) {\r\n          thisInstance.state[thisInstance.inputMap['w']] = true\r\n        }\r\n        if (move[i].pageY > start[i].pageY) {\r\n          thisInstance.state[thisInstance.inputMap['s']] = true\r\n        }\r\n        thisInstance.notify()\r\n      }\r\n    }\r\n\r\n    function handleTouchEnd (evt): void {\r\n      evt.preventDefault()\r\n      thisInstance.reset()\r\n    }\r\n  }\r\n\r\n  shoot (): void {\r\n    this.state[this.inputMap['space']] = true\r\n  }\r\n\r\n  cancelShoot (): void {\r\n    this.state[this.inputMap['space']] = false\r\n  }\r\n\r\n  reset (): void {\r\n    this.state[this.inputMap['w']] = false\r\n    this.state[this.inputMap['a']] = false\r\n    this.state[this.inputMap['s']] = false\r\n    this.state[this.inputMap['d']] = false\r\n  }\r\n}\r\n","import IGameState from '../lib/interfaces/IGameState'\r\nimport IGame from '../lib/interfaces/IGame'\r\nimport ICollisionManager from '../lib/interfaces/ICollisionManager'\r\nimport InputManager from '../lib/client/InputManager'\r\nimport AssetManager, { AssetType } from '../lib/client/AssetManager'\r\nimport { ContextId } from '../enum/ContextId'\r\nimport Settings from '../config/Settings'\r\nimport LegendState from './LegendState'\r\nimport AudioManager from '../lib/client/AudioManager'\r\nimport CollisionManager from '../lib/collision/CollisionManager'\r\nimport * as mapData from '../../public/definitions/maps.json'\r\nimport * as turretData from '../../public/definitions/turrets.json'\r\nimport Tile from '../model/Tile'\r\nimport Turret from '../model/Turret'\r\nimport Dimension from '../lib/geometry/Dimension'\r\nimport Vector2 from '../lib/math/Vector2'\r\nimport { AssetId } from '../enum/AssetId'\r\nimport BuildMenu from '../ui/BuildMenu'\r\n\r\n/**\r\n * Main game Class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class LegendOfTheVoid implements IGame {\r\n  audioManager: AudioManager\r\n  inputManager: InputManager\r\n  assetManager: AssetManager\r\n  collisionManager: ICollisionManager\r\n  state: IGameState\r\n  contexts: Map<ContextId, CanvasRenderingContext2D>\r\n  settings: Settings\r\n  buildMenu: BuildMenu\r\n  private TILE_SIZE = 60\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {Map<ContextId, CanvasRenderingContext2D>} contexts\r\n   * @param {Settings} settings\r\n   */\r\n  constructor (contexts: Map<ContextId, CanvasRenderingContext2D>, settings: Settings) {\r\n    this.audioManager = new AudioManager()\r\n    this.inputManager = new InputManager(settings)\r\n    this.assetManager = new AssetManager(this.audioManager)\r\n    this.state = new LegendState(settings, this.inputManager)\r\n    this.collisionManager = new CollisionManager(this.state.quadTree)\r\n    this.contexts = contexts\r\n    this.settings = settings\r\n    this.buildMenu = new BuildMenu('buildMenu', turretData, this.assetManager)\r\n  }\r\n\r\n  initMap (): void {\r\n    console.log(mapData)\r\n    let y = 0\r\n    mapData[0].tiles.forEach(row => {\r\n      let width = this.TILE_SIZE\r\n      let height = this.TILE_SIZE\r\n      let x = 0\r\n      row.forEach(col => {\r\n        const tile = new Tile(x, y, width, height, this.settings)\r\n        switch (col) {\r\n          case 0:\r\n            tile.blocked = true\r\n            tile.color = '#000000'\r\n            break\r\n          case 1:\r\n            tile.buildable = true\r\n            tile.color = '#ff00ff'\r\n            break\r\n          case 3:\r\n            tile.color = '#00ff00'\r\n            break\r\n          case 4:\r\n            tile.color = '#ff0000'\r\n            break\r\n        }\r\n        this.state.entities.push(tile)\r\n        this.state.renderables.push(tile)\r\n        x += width\r\n      })\r\n      y += height\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Initialize the game.\r\n   */\r\n  init (): void {\r\n    this.assetManager.queueDownload(AssetId.TURRET_LASER, AssetType.SPRITE )\r\n   this.initMap()\r\n    this.assetManager.downloadAll(() => {\r\n      console.log(this.state.renderables)\r\n      this.state.renderables\r\n        .filter(element => {return element.assetId !== AssetId.NONE })\r\n        .forEach(renderable => renderable.asset = this.assetManager.get(renderable.assetId))\r\n      this.state.reset()\r\n      this.buildMenu.init()\r\n    })\r\n  }\r\n\r\n  addTurret(type: string, position: Vector2) {\r\n    let turrets = (<any>turretData)\r\n    let turr = new Turret()\r\n    turr.fromJSON(turrets.filter(turret => {return turret.type === type})[0])\r\n    turr.position = position\r\n    turr.dimension = new Dimension(this.TILE_SIZE, this.TILE_SIZE)\r\n    turr.asset = this.assetManager.get(turr.assetId)\r\n    this.state.entities.push(turr)\r\n    this.state.renderables.push(turr)\r\n  }\r\n\r\n  /**\r\n   * Render current state.\r\n   */\r\n  render (): void {\r\n    this.state.renderables.forEach(renderable => renderable.render(this.contexts.get(renderable.contextId)))\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  clear (): void {\r\n    this.state.renderables.forEach(renderable => renderable.clear(this.contexts.get(renderable.contextId)))\r\n  }\r\n}\r\n","import LegendOfTheVoid from './application/LegendOfTheVoid'\r\nimport GameSettings from './config/Settings'\r\nimport { ContextId } from './enum/ContextId'\r\nimport LegendLoop from './application/LegendLoop'\r\nimport Vector2 from './lib/math/Vector2'\r\n\r\n/**\r\n * Entry script for legend of the void.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  const container = document.getElementById('contents')\r\n  const contexts = new Map<ContextId, CanvasRenderingContext2D>()\r\n  const bgCanvas = document.createElement('canvas')\r\n  const creepCanvas = document.createElement('canvas')\r\n  const playerCanvas = document.createElement('canvas')\r\n  const canvasSize = 660\r\n  container.appendChild(bgCanvas)\r\n  container.appendChild(creepCanvas)\r\n  container.appendChild(playerCanvas)\r\n  contexts.set(ContextId.BACKGROUND, bgCanvas.getContext('2d'))\r\n  contexts.set(ContextId.CREEPS, creepCanvas.getContext('2d'))\r\n  contexts.set(ContextId.PLAYER, playerCanvas.getContext('2d'))\r\n  bgCanvas.width = canvasSize\r\n  bgCanvas.height = canvasSize\r\n  creepCanvas.width = canvasSize\r\n  creepCanvas.height = canvasSize\r\n  playerCanvas.width = canvasSize\r\n  playerCanvas.height = canvasSize\r\n\r\n  bgCanvas.addEventListener('click', ev => {\r\n  })\r\n\r\n  const settings = new GameSettings(bgCanvas)\r\n  const game = new LegendOfTheVoid(contexts, settings)\r\n  const loop = new LegendLoop(game)\r\n\r\n  loop.start()\r\n  game.addTurret(\"laser\", new Vector2(2, 2))\r\n})"],"sourceRoot":""}