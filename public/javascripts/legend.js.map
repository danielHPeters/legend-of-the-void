{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/lib/geometry/Dimension.ts","webpack:///./src/lib/math/Vector2.ts","webpack:///./src/enum/AssetId.ts","webpack:///./src/enum/ContextId.ts","webpack:///./src/lib/entity/Entity.ts","webpack:///./src/lib/collision/HitBox.ts","webpack:///./src/lib/observer/Observable.ts","webpack:///./src/application/LegendLoop.ts","webpack:///./src/enum/Actions.ts","webpack:///./src/config/Settings.ts","webpack:///./src/ui/BuildMenu.ts","webpack:///./src/model/Turret.ts","webpack:///./src/model/Tile.ts","webpack:///./src/lib/collision/CollisionManager.ts","webpack:///./src/lib/audio/Sound.ts","webpack:///./src/lib/client/AudioManager.ts","webpack:///./src/lib/interfaces/ICollideAble.ts","webpack:///./src/lib/collision/QuadTree.ts","webpack:///./src/application/LegendState.ts","webpack:///./src/lib/ajax/Ajax.ts","webpack:///./src/lib/graphics/2D/SpriteSheet.ts","webpack:///./src/lib/client/AssetManager.ts","webpack:///./src/lib/client/InputManager.ts","webpack:///./src/application/LegendOfTheVoid.ts","webpack:///./src/app.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","default","[object Object]","width","height","this","factor","Vector2","x","y","v1","v2","vector","scalar","Error","Math","sqrt","magnitude","mag","divide","max","floor","normalize","multiply","pow","AssetId","ContextId","position","dimension","settings","JSON","stringify","json","keys","forEach","key","Vector2_1","ICollideAble_1","colliding","collidesWith","type","EntityType","BOX","push","PLAYER","other","includes","toString","observers","state","observer","filter","obs","update","game","lastTime","init","running","frameId","requestAnimationFrame","loop","bind","cancelAnimationFrame","stop","start","paused","time","diff","render","Actions","Dimension_1","Actions_1","canvas","gameSize","keyboard","w","UP","DOWN","ArrowUp","LEFT","ArrowDown","RIGHT","space","SHOOT","RESTART","newKey","action","oldKey","findKey","console","log","elementId","turretList","assetManager","element","document","getElementById","turret","turretBox","createElement","classList","add","appendChild","assetId","addEventListener","Entity_1","ContextId_1","AssetId_1","damage","TURRET_LASER","super","contextId","ctx","drawImage","asset","clearRect","dt","color","BACKGROUND","NONE","fillStyle","fillRect","quadTree","objects","getAllObjects","length","obj","findObjects","j","isCollideAbleWith","alive","audioContext","masterGain","buffer","gainNode","createGain","gain","connect","playing","source","createBufferSource","Sound_1","initAudioContext","window","AudioContext","webkitAudioContext","effectsGain","ambientGain","destination","e","data","id","callback","decodeAudioData","then","error","ambient","HitBox_1","QuadTree","hitBox","level","maxObjects","maxLevels","nodes","node","clear","returnedObjects","index","getIndex","Array","insert","split","splice","verticalMidpoint","horizontalMidpoint","topQuadrant","bottomQuadrant","subWidth","subHeight","QuadTree_1","Observable_1","inputManager","entities","collideables","movables","renderables","kills","cash","movable","move","entity","points","notify","Ajax","opts","xHttp","XMLHttpRequest","response","open","method","defaults","url","async","setRequestHeader","contentType","responseType","send","image","frameWidth","frameHeight","framesPerRow","SpriteSheet_1","Ajax_1","AssetType","audioManager","cache","assetsDir","downloadCount","queue","path","item","create","decodeAudio","done","sprite","Image","src","spriteSheet","AUDIO","loadAudio","SPRITE","loadSprite","SPRITE_SHEET","loadSpriteSheet","AUDIO_AMB","createSound","inputMap","initializeTouchHandler","touches","event","button","el","evt","preventDefault","touchstartX","pageX","touchstartY","pageY","thisInstance","reset","changedTouches","toucheMoveX","touchMoveY","InputManager_1","AssetManager_1","LegendState_1","AudioManager_1","CollisionManager_1","mapData","turretData","Tile_1","Turret_1","BuildMenu_1","contexts","TILE_SIZE","collisionManager","buildMenu","tiles","row","col","tile","blocked","buildable","queueDownload","initMap","downloadAll","renderable","turrets","turr","fromJSON","LegendOfTheVoid_1","Settings_1","LegendLoop_1","container","Map","bgCanvas","creepCanvas","playerCanvas","set","getContext","CREEPS","ev","addTurret"],"mappings":"aACA,IAAAA,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,IACAG,EAAAH,EACAI,GAAA,EACAH,YAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAZ,EAAAmB,EAAA,SAAAjB,GACAY,OAAAC,eAAAb,EAAA,cAAiDkB,OAAA,KAIjDpB,EAAAqB,EAAA,SAAAlB,GACA,IAAAS,EAAAT,KAAAmB,WACA,WAA2B,OAAAnB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAU,EAAAC,GAAsD,OAAAV,OAAAW,UAAAC,eAAAnB,KAAAgB,EAAAC,IAGtDxB,EAAA2B,EAAA,GAIA3B,IAAA4B,EAAA,oFC7DA1B,EAAA2B,cAUEC,YAAaC,EAAeC,GAC1BC,KAAKF,MAAQA,EACbE,KAAKD,OAASA,EAQTF,MAAOI,GACZD,KAAKF,OAASG,EACdD,KAAKD,QAAUE,yFCpBnBC,EAUEL,YAAaM,EAAWC,GACtBJ,KAAKG,EAAIA,EACTH,KAAKI,EAAIA,EAUXP,iBAAkBQ,EAAaC,GAC7B,OAAO,IAAIJ,EAAQG,EAAGF,EAAIG,EAAGH,EAAGE,EAAGD,EAAIE,EAAGF,GAU5CP,sBAAuBQ,EAAaC,GAClC,OAAO,IAAIJ,EAAQG,EAAGF,EAAIG,EAAGH,EAAGE,EAAGD,EAAIE,EAAGF,GAU5CP,gBAAiBU,EAAiBC,GAChC,OAAO,IAAIN,EAAQK,EAAOJ,EAAIK,EAAQD,EAAOH,EAAII,GAWnDX,cAAeU,EAAiBC,GAC9B,GAAe,IAAXA,EACF,MAAM,IAAIC,MAAM,iDAElB,OAAO,IAAIP,EAAQK,EAAOJ,EAAIK,EAAQD,EAAOH,EAAII,GASnDX,IAAKM,EAAWC,GACdJ,KAAKG,EAAIA,EACTH,KAAKI,EAAIA,EAQXP,UAAWU,GACTP,KAAKG,EAAII,EAAOJ,EAChBH,KAAKI,EAAIG,EAAOH,EASlBP,IAAKM,EAAWC,GACdJ,KAAKG,GAAKA,EACVH,KAAKI,GAAKA,EAQZP,UAAWU,GACTP,KAAKG,GAAKI,EAAOJ,EACjBH,KAAKI,GAAKG,EAAOH,EASnBP,SAAUM,EAAWC,GACnBJ,KAAKG,GAAKA,EACVH,KAAKI,GAAKA,EAQZP,eAAgBU,GACdP,KAAKG,GAAKI,EAAOJ,EACjBH,KAAKI,GAAKG,EAAOH,EAQnBP,SAAUW,GACRR,KAAKG,GAAKK,EACVR,KAAKI,GAAKI,EASZX,OAAQW,GACN,GAAe,IAAXA,EACF,MAAM,IAAIC,MAAM,+BAElBT,KAAKG,GAAKK,EACVR,KAAKI,GAAKI,EAQZX,MACE,OAAOa,KAAKC,KAAKX,KAAKG,EAAIH,KAAKG,EAAIH,KAAKI,EAAIJ,KAAKI,GAQnDP,WACE,OAAO,IAAIK,GAASF,KAAKG,GAAIH,KAAKI,GAMpCP,YACE,IAAIe,EAAYZ,KAAKa,MACH,IAAdD,GACFZ,KAAKc,OAAOF,GAShBf,MAAOkB,GACDL,KAAKM,MAAMhB,KAAKa,OAASE,IAC3Bf,KAAKiB,YACLjB,KAAKkB,SAASH,IAUlBlB,WAAYU,GACV,OAAOG,KAAKC,KAAKD,KAAKS,IAAIZ,EAAOJ,EAAIH,KAAKG,EAAG,GAAKO,KAAKS,IAAIZ,EAAOH,EAAIJ,KAAKI,EAAG,IAShFP,IAAKU,GACH,OAAOP,KAAKG,EAAII,EAAOJ,EAAIH,KAAKI,EAAIG,EAAOH,EAG7CP,QACEG,KAAKG,EAAIO,KAAKM,MAAMhB,KAAKG,GACzBH,KAAKG,EAAIO,KAAKM,MAAMhB,KAAKG,GAQ3BN,QACE,OAAO,IAAIK,EAAQF,KAAKG,EAAGH,KAAKI,IA7NpCnC,EAAA2B,QAAAM,iFCLA,SAAYkB,GACVA,EAAA,sBACAA,EAAA,4BACAA,EAAA,wCACAA,EAAA,YAJF,CAAYnD,EAAAmD,UAAAnD,EAAAmD,4FCHZ,SAAYC,GACVA,EAAA,wBAA2BA,EAAA,gBAAmBA,EAAA,gBADhD,CAAYpD,EAAAoD,YAAApD,EAAAoD,8FCWZpD,EAAA2B,cAaEC,YAAayB,EAAoBC,EAAuBC,GACtDxB,KAAKsB,SAAWA,EAChBtB,KAAKuB,UAAYA,EACjBvB,KAAKwB,SAAWA,EAGX3B,OACL,MAAM,IAAIY,MAAM,0BAQXZ,SACL,OAAO4B,KAAKC,UAAU1B,MAQjBH,SAAU8B,GAGf9C,OAAO+C,KAAKD,GAAME,QAAQC,IACnB9B,KAAKP,eAAgBqC,KACxB9B,KAAK8B,GAAOH,EAAKG,uFCrDzB,MAAAC,EAAAhE,EAAA,GACAiE,EAAAjE,EAAA,IAQAE,EAAA2B,cAeEC,YAAaM,EAAGC,EAAGN,EAAOC,GACxBC,KAAKsB,SAAW,IAAIS,EAAAnC,QAAQO,EAAGC,GAC/BJ,KAAKF,MAAQA,EACbE,KAAKD,OAASA,EACdC,KAAKiC,WAAY,EACjBjC,KAAKkC,gBACLlC,KAAKmC,KAAOH,EAAAI,WAAWC,IACvBrC,KAAKkC,aAAaI,KAAKN,EAAAI,WAAWG,QAQpC1C,kBAAmB2C,GACjB,OAAOxC,KAAKkC,aAAaO,SAASD,EAAML,KAAKO,6FChCjDzE,EAAA2B,cAIEC,cACEG,KAAK2C,aACL3C,KAAK4C,SAQP/C,SAAUgD,GACR7C,KAAK2C,UAAUL,KAAKO,GAQtBhD,WAAYgD,GACV7C,KAAK2C,UAAY3C,KAAK2C,UAAUG,OAAOC,GAAeA,IAAQF,GAMhEhD,SACEG,KAAK2C,UAAUd,QAAQgB,GAAYA,EAASG,OAAOhD,KAAK4C,yFC9B5D3E,EAAA2B,cAUEC,YAAaoD,GACXjD,KAAKiD,KAAOA,EACZjD,KAAKkD,SAAW,KAMXrD,QACLG,KAAKiD,KAAKE,OACVnD,KAAKiD,KAAKL,MAAMQ,SAAU,EAC1BpD,KAAKqD,QAAUC,sBAAsBtD,KAAKuD,KAAKC,KAAKxD,OAM/CH,OACLG,KAAKiD,KAAKL,MAAMQ,SAAU,EACtBpD,KAAKqD,SACPI,qBAAqBzD,KAAKqD,SAOvBxD,UACLG,KAAK0D,OACL1D,KAAK2D,QAMA9D,cACLG,KAAKiD,KAAKL,MAAMgB,QAAU5D,KAAKiD,KAAKL,MAAMgB,OAMrC/D,KAAMgE,GACX,GAAI7D,KAAKiD,KAAKL,MAAMQ,UACbpD,KAAKiD,KAAKL,MAAMgB,OAAQ,CAC3B,GAAsB,OAAlB5D,KAAKkD,SAAmB,CAC1B,MAAMY,EAAOD,EAAO7D,KAAKkD,SACzBlD,KAAKiD,KAAKL,MAAMI,OAAOc,EAAO,KAEhC9D,KAAKkD,SAAWW,EAChB7D,KAAKiD,KAAKc,SACV/D,KAAKqD,QAAUC,sBAAsBtD,KAAKuD,KAAKC,KAAKxD,yFCtE5D,SAAYgE,GACVA,EAAA,QACAA,EAAA,YACAA,EAAA,YACAA,EAAA,cACAA,EAAA,cACAA,EAAA,kBACAA,EAAA,qBACAA,EAAA,uBARF,CAAY/F,EAAA+F,UAAA/F,EAAA+F,4FCAZ,MAAAC,EAAAlG,EAAA,GACAmG,EAAAnG,EAAA,GAQAE,EAAA2B,cAWEC,YAAasE,GACXnE,KAAKoE,SAAW,IAAIH,EAAArE,QAAUuE,EAAOrE,MAAOqE,EAAOpE,QACnDC,KAAKmE,OAASA,EACdnE,KAAKqE,UACHC,EAAKJ,EAAAF,QAAQO,GACb5E,EAAKuE,EAAAF,QAAQQ,KACbC,QAAWP,EAAAF,QAAQU,KACnBC,UAAaT,EAAAF,QAAQY,MACrBC,MAASX,EAAAF,QAAQc,MACjB5F,EAAKgF,EAAAF,QAAQe,SASjBlF,QAASV,GACP,OAAON,OAAO+C,KAAK5B,KAAKqE,UAAUvB,OAAOhB,GAAO9B,KAAKqE,SAASvC,KAAS3C,GAAO,GAQhFU,OAAQmF,EAAQC,GACd,IAAIC,EAASlF,KAAKmF,QAAQF,GACtBD,IAAWE,IACbE,QAAQC,IAAI,OAASH,EAAQ,SAAWF,EAAS,WAAaC,GAC9DjF,KAAKqE,SAASW,GAAUhF,KAAKqE,SAASa,UAC/BlF,KAAKqE,SAASa,qFC1C3BjH,EAAA2B,cAaEC,YAAayF,EAAmBC,EAAYC,GAC1CxF,KAAKyF,QAAUC,SAASC,eAAeL,GACvCtF,KAAKuF,WAAaA,EAClBvF,KAAKwF,aAAeA,EAMtB3F,OACEG,KAAKuF,WAAW1D,QAAQ+D,IACtB,MAAMC,EAAYH,SAASI,cAAc,OACzCD,EAAUE,UAAUC,IAAI,aACxBH,EAAUI,YAAYjG,KAAKwF,aAAavG,IAAI2G,EAAOM,UACnDL,EAAUM,iBAAiB,QAAS,QACpCnG,KAAKyF,QAAQQ,YAAYJ,sFCtC/B,MAAAO,EAAArI,EAAA,GACAgE,EAAAhE,EAAA,GACAkG,EAAAlG,EAAA,GAIAsI,EAAAtI,EAAA,GAEAuI,EAAAvI,EAAA,GAQAE,EAAA2B,sBAAoCwG,EAAAxG,QAsBlCC,YAAaM,EAAYC,EAAYN,EAAgBC,EAAiBwG,EAAiB/E,EAAqBW,EAAmB+D,EAAmBI,EAAAlF,QAAQoF,cACxJC,MAAM,IAAI1E,EAAAnC,QAAQO,EAAGC,GAAI,IAAI6D,EAAArE,QAAUE,EAAOC,GAASyB,GACvDxB,KAAKmC,KAAOA,EACZnC,KAAKuG,OAASA,EACdvG,KAAK0G,UAAYL,EAAAhF,UAAUkB,OAC3BvC,KAAKkG,QAAUA,EAGVrG,QAQAA,OAAQ8G,GACbA,EAAIC,UAAU5G,KAAK6G,MAAO7G,KAAKsB,SAASnB,EAAGH,KAAKsB,SAASlB,EAAGJ,KAAKuB,UAAUzB,MAAOE,KAAKuB,UAAUxB,QAO5FF,MAAO8G,GACZA,EAAIG,UAAU9G,KAAKsB,SAASnB,EAAGH,KAAKsB,SAASlB,EAAGJ,KAAKuB,UAAUzB,MAAOE,KAAKuB,UAAUxB,QAOhFF,KAAMkH,IAOLlH,0FC7EV,MAAAuG,EAAArI,EAAA,GAEAgE,EAAAhE,EAAA,GACAkG,EAAAlG,EAAA,GAGAsI,EAAAtI,EAAA,GACAuI,EAAAvI,EAAA,GAQAE,EAAA2B,sBAAkCwG,EAAAxG,QAkBhCC,YAAaM,EAAWC,EAAWN,EAAeC,EAAgByB,GAChEiF,MAAM,IAAI1E,EAAAnC,QAAQO,EAAGC,GAAI,IAAI6D,EAAArE,QAAUE,EAAOC,GAASyB,GACvDxB,KAAKgH,MAAQ,UACbhH,KAAK0G,UAAYL,EAAAhF,UAAU4F,WAC3BjH,KAAKkG,QAAUI,EAAAlF,QAAQ8F,KAGzBrH,QAIAA,OAAQ8G,GACNA,EAAIQ,UAAYnH,KAAKgH,MACrBL,EAAIS,SAASpH,KAAKsB,SAASnB,EAAGH,KAAKsB,SAASlB,EAAGJ,KAAKuB,UAAUzB,MAAOE,KAAKuB,UAAUxB,QAGtFF,MAAO8G,GACLA,EAAIG,UAAU9G,KAAKsB,SAASnB,EAAGH,KAAKsB,SAASlB,EAAGJ,KAAKuB,UAAUzB,MAAOE,KAAKuB,UAAUxB,4mBCzCzF9B,EAAA2B,cAQEC,YAAawH,GACXrH,KAAKqH,SAAWA,EAMlBxH,kBACE,IAAIyH,KACJtH,KAAKqH,SAASE,cAAcD,GAC5B,IAAK,IAAInJ,EAAI,EAAGA,EAAImJ,EAAQE,OAAQrJ,IAAK,CACvC,IAAIsJ,KACJzH,KAAKqH,SAASK,YAAYD,EAAKH,EAAQnJ,IAEvC,IAAK,IAAIwJ,EAAI,EAAGA,EAAIF,EAAID,OAAQG,IAC1BL,EAAQnJ,GAAGyJ,kBAAkBH,EAAIE,KAClCjH,KAAKM,MAAMsG,EAAQnJ,GAAGmD,SAASnB,GAAKO,KAAKM,MAAMyG,EAAIE,GAAGrG,SAASnB,GAAKsH,EAAIE,GAAGpG,UAAUzB,OACpFY,KAAKM,MAAMsG,EAAQnJ,GAAGmD,SAASnB,GAAKmH,EAAQnJ,GAAGoD,UAAUzB,MAAQY,KAAKM,MAAMyG,EAAIE,GAAGrG,SAASnB,IAC5FO,KAAKM,MAAMsG,EAAQnJ,GAAGmD,SAASlB,GAAKM,KAAKM,MAAMyG,EAAIE,GAAGrG,SAASlB,GAAKqH,EAAIE,GAAGpG,UAAUxB,QACrFW,KAAKM,MAAMsG,EAAQnJ,GAAGmD,SAASlB,GAAKkH,EAAQnJ,GAAGoD,UAAUxB,OAASW,KAAKM,MAAMyG,EAAIE,GAAGrG,SAASlB,IAC9FkH,EAAQnJ,GAAG0J,OAASJ,EAAIE,GAAGE,QAC5BzC,QAAQC,IAAIiC,EAAQnJ,IACpBmJ,EAAQnJ,GAAG8D,WAAY,EACvBwF,EAAIE,GAAG1F,WAAY,qFClC7BhE,EAAA2B,cAcEC,YAAaiI,EAAcC,EAAsBC,GAC/ChI,KAAK8H,aAAeA,EACpB9H,KAAK+H,WAAaA,EAClB/H,KAAKgI,OAASA,EACdhI,KAAKiI,SAAWjI,KAAK8H,aAAaI,aAClClI,KAAKiI,SAASE,KAAKhJ,MAAQ,GAC3Ba,KAAKiI,SAASG,QAAQpI,KAAK+H,YAC3B/H,KAAKqI,SAAU,EAOjBxI,KAAM0D,GAAO,GACXvD,KAAKsI,OAAStI,KAAK8H,aAAaS,qBAChCvI,KAAKsI,OAAON,OAAShI,KAAKgI,OAC1BhI,KAAKsI,OAAO/E,KAAOA,EACnBvD,KAAKsI,OAAOF,QAAQpI,KAAKiI,UACzBjI,KAAKsI,OAAO3E,MAAM,GAMpB9D,OACMG,KAAKsI,QACPtI,KAAKsI,OAAO5E,KAAK,oFC/CvB,MAAA8E,EAAAzK,EAAA,IAQAE,EAAA2B,cASEC,cACEG,KAAKyI,mBAMP5I,mBACE,IAEE6I,OAAOC,aAAeD,OAAOC,cAAgBC,mBAC7C5I,KAAK8H,aAAe,IAAIa,aACxB3I,KAAK+H,WAAa/H,KAAK8H,aAAaI,aACpClI,KAAK6I,YAAc7I,KAAK8H,aAAaI,aACrClI,KAAK8I,YAAc9I,KAAK8H,aAAaI,aACrClI,KAAK+H,WAAWI,KAAKhJ,MAAQ,EAC7Ba,KAAK+H,WAAWK,QAAQpI,KAAK8H,aAAaiB,aAC1C/I,KAAK6I,YAAYT,QAAQpI,KAAK+H,YAC9B/H,KAAK8I,YAAYV,QAAQpI,KAAK+H,YAC9B/H,KAAK8I,YAAYX,KAAKhJ,MAAQ,EAC9Ba,KAAK6I,YAAYV,KAAKhJ,MAAQ,EAC9B,MAAO6J,GACP5D,QAAQC,IAAI,mDAUhBxF,YAAaoJ,EAAMC,EAAIC,GACrBnJ,KAAK8H,aAAasB,gBAAgBH,GAAMI,KACtCrB,GAAUmB,EAASnB,GACnBsB,IAAWlE,QAAQC,IAAI,iCAAmCiE,KAQ9DzJ,mBAAoBV,GAClBa,KAAK+H,WAAWI,KAAKhJ,MAAQA,EAO/BU,oBAAqBV,GACnBa,KAAK8I,YAAYX,KAAKhJ,MAAQA,EAOhCU,oBAAqBV,GACnBa,KAAK6I,YAAYV,KAAKhJ,MAAQA,EAShCU,YAAamI,EAAQuB,GACnB,OAAO,IAAIf,EAAA5I,QAAMI,KAAK8H,aAAcyB,EAAUvJ,KAAK8I,YAAc9I,KAAK6I,YAAab,oFCvFvF,SAAY5F,GACVA,EAAA,cACAA,EAAA,cACAA,EAAA,2BACAA,EAAA,uBACAA,EAAA,wBACAA,EAAA,UACAA,EAAA,qBACAA,EAAA,cACAA,EAAA,uBACAA,EAAA,yBACAA,EAAA,0BACAA,EAAA,UACAA,EAAA,cAbF,CAAYnE,EAAAmE,aAAAnE,EAAAmE,+FCAZ,MAAAoH,EAAAzL,EAAA,SASA0L,EAcE5J,YAAa6J,EAAS,IAAIF,EAAA5J,QAAO,EAAG,EAAG,EAAG,GAAI+J,EAAQ,GACpD3J,KAAK2J,MAAQA,EACb3J,KAAK4J,WAAa,GAClB5J,KAAK6J,UAAY,EACjB7J,KAAK0J,OAASA,EACd1J,KAAKsH,WACLtH,KAAK8J,SAMPjK,QACEG,KAAKsH,WACLtH,KAAK8J,MAAMjI,QAAQkI,GAAQA,EAAKC,SAChChK,KAAK8J,SAQPjK,cAAeoK,GAGb,OAFAjK,KAAK8J,MAAMjI,QAAQkI,GAAQA,EAAKxC,cAAc0C,IAC9CjK,KAAKsH,QAAQzF,QAAQvC,GAAU2K,EAAgB3H,KAAKhD,IAC7C2K,EASTpK,YAAaoK,EAAiB3K,GAC5B,QAAsB,IAAXA,EAET,YADA8F,QAAQC,IAAI,oBAGd,IAAI6E,EAAQlK,KAAKmK,SAAS7K,GAK1B,OAJe,IAAX4K,GAAgBlK,KAAK8J,MAAMtC,QAC7BxH,KAAK8J,MAAMI,GAAOxC,YAAYuC,EAAiB3K,GAEjDU,KAAKsH,QAAQzF,QAAQ4F,GAAOwC,EAAgB3H,KAAKmF,IAC1CwC,EAQTpK,OAAQP,GACN,QAAsB,IAAXA,EAGX,GAAIA,aAAkB8K,MACpB9K,EAAOuC,QAAQ4D,GAAWzF,KAAKqK,OAAO5E,QADxC,CAIA,GAAIzF,KAAK8J,MAAMtC,OAAS,EAAG,CACzB,IAAI0C,EAAQlK,KAAKmK,SAAS7K,GAE1B,IAAe,IAAX4K,EAEF,YADAlK,KAAK8J,MAAMI,GAAOG,OAAO/K,GAM7B,GAFAU,KAAKsH,QAAQhF,KAAKhD,GAEdU,KAAKsH,QAAQE,OAASxH,KAAK4J,YAAc5J,KAAK2J,MAAQ3J,KAAK6J,UAAW,MAC3C,IAAlB7J,KAAK8J,MAAM,IACpB9J,KAAKsK,QAEP,IAAInM,EAAI,EACR,KAAOA,EAAI6B,KAAKsH,QAAQE,QAAQ,CAC9B,IAAI0C,EAAQlK,KAAKmK,SAASnK,KAAKsH,QAAQnJ,KACxB,IAAX+L,EACFlK,KAAK8J,MAAMI,GAAOG,OAAQrK,KAAKsH,QAAQiD,OAAOpM,EAAG,GAAI,IAErDA,OAYR0B,SAAUP,GACR,IAAI4K,GAAS,EACTM,EAAmBxK,KAAK0J,OAAOpI,SAASnB,EAAIH,KAAK0J,OAAO5J,MAAQ,EAChE2K,EAAqBzK,KAAK0J,OAAOpI,SAASlB,EAAIJ,KAAK0J,OAAO3J,OAAS,EAEnE2K,EAAepL,EAAOgC,SAASlB,EAAIqK,GAAsBnL,EAAOgC,SAASlB,EAAId,EAAOS,OAAS0K,EAE7FE,EAAkBrL,EAAOgC,SAASlB,EAAIqK,EAe1C,OAbInL,EAAOgC,SAASnB,EAAIqK,GAAoBlL,EAAOgC,SAASnB,EAAIb,EAAOQ,MAAQ0K,EACzEE,EACFR,EAAQ,EACCS,IACTT,EAAQ,GAED5K,EAAOgC,SAASnB,EAAIqK,IACzBE,EACFR,EAAQ,EACCS,IACTT,EAAQ,IAGLA,EAMTrK,QACE,IAAI+K,EAAY5K,KAAK0J,OAAO5J,MAAQ,EAAK,EACrC+K,EAAa7K,KAAK0J,OAAO3J,OAAS,EAAK,EAC3CC,KAAK8J,MAAM,GAAK,IAAIL,EAClB,IAAID,EAAA5J,QAAOI,KAAK0J,OAAOpI,SAASnB,EAAIyK,EAAU5K,KAAK0J,OAAOpI,SAASlB,EAAGwK,EAAUC,GAAY7K,KAAK2J,MAAQ,GAC3G3J,KAAK8J,MAAM,GAAK,IAAIL,EAClB,IAAID,EAAA5J,QAAOI,KAAK0J,OAAOpI,SAASnB,EAAGH,KAAK0J,OAAOpI,SAASlB,EAAGwK,EAAUC,GAAY7K,KAAK2J,MAAQ,GAChG3J,KAAK8J,MAAM,GAAK,IAAIL,EAClB,IAAID,EAAA5J,QAAOI,KAAK0J,OAAOpI,SAASnB,EAAGH,KAAK0J,OAAOpI,SAASlB,EAAIyK,EAAWD,EAAUC,GAAY7K,KAAK2J,MAAQ,GAC5G3J,KAAK8J,MAAM,GAAK,IAAIL,EAClB,IAAID,EAAA5J,QAAOI,KAAK0J,OAAOpI,SAASnB,EAAIyK,EAAU5K,KAAK0J,OAAOpI,SAASlB,EAAIyK,EAAWD,EAAUC,GAAY7K,KAAK2J,MAAQ,IAjJ3H1L,EAAA2B,QAAA6J,iFCRA,MAAAqB,EAAA/M,EAAA,IAQAgN,EAAAhN,EAAA,GACAyL,EAAAzL,EAAA,GAQAE,EAAA2B,sBAAyCmL,EAAAnL,QAgBvCC,YAAa2B,EAAoBwJ,GAC/BvE,QACAzG,KAAKoD,SAAU,EACfpD,KAAK4D,QAAS,EACd5D,KAAKiL,YACLjL,KAAKqH,SAAW,IAAIyD,EAAAlL,QAAS,IAAI4J,EAAA5J,QAAO,EAAG,EAAG4B,EAAS4C,SAAStE,MAAO0B,EAAS4C,SAASrE,SACzFC,KAAKkL,gBACLlL,KAAKmL,YACLnL,KAAKoL,eACLpL,KAAK4C,OACHyI,MAAO,EACPC,KAAM,GAIHzL,OAAQkH,GACb/G,KAAKmL,SAAStJ,QAAQ0J,GAAWA,EAAQC,KAAKzE,IAGzClH,QACLG,KAAKiL,SAASpJ,QAAQ4J,GAAUA,EAAOtI,QAGlCtD,YAAa6L,GAClB1L,KAAK4C,MAAM0I,MAAQI,EACnB1L,KAAK4C,MAAMyI,QACXrL,KAAK2L,gGC5DTC,EAqBS/L,cAAegM,EAAM1C,GAC1B,IAAI2C,EAAQ,IAAIC,eAChBD,EAAM3F,iBAAiB,OAAQ,KAC7BgD,EAAS2C,EAAME,YAEjBF,EAAMG,KACJJ,EAAKK,OAASL,EAAKK,OAASN,EAAKO,SAASD,OAC1CL,EAAKO,IAAMP,EAAKO,IAAMR,EAAKO,SAASC,IACpCP,EAAKQ,MAAQR,EAAKQ,MAAQT,EAAKO,SAASE,OAEtCR,EAAKpM,eAAe,gBACtBqM,EAAMQ,iBACJ,eACAT,EAAKU,YAAcV,EAAKU,YAAcX,EAAKO,SAASI,aAGpDV,EAAKpM,eAAe,kBACtBqM,EAAMU,aAAeX,EAAKW,cAExBX,EAAKpM,eAAe,SAAgC,iBAAdoM,EAAK5C,OAC7C4C,EAAK5C,KAAOxH,KAAKC,UAAUmK,EAAK5C,OAElC6C,EAAMW,KAAKZ,EAAK5C,KAAO4C,EAAK5C,KAAO,OA1CtB2C,EAAAO,UACbC,IAAK,GACLF,OAAQ,MACRK,YAAa,YACbF,OAAO,EACPpD,KAAM,MANVhL,EAAA2B,QAAAgM,iFCMA3N,EAAA2B,cAaEC,YAAa6M,EAAyBC,EAAYC,GAChD5M,KAAK0M,MAAQA,EACb1M,KAAK2M,WAAaA,EAClB3M,KAAK4M,YAAcA,EACnB5M,KAAK6M,aAAenM,KAAKM,MAAM0L,EAAM5M,MAAQ6M,oFCvBjD,MAAAG,EAAA/O,EAAA,IAEAgP,EAAAhP,EAAA,IAIA,IAAYiP,GAAZ,SAAYA,GACVA,EAAA,gBAAmBA,EAAA,4BAA+BA,EAAA,cAAiBA,EAAA,sBADrE,CAAYA,EAAA/O,EAAA+O,YAAA/O,EAAA+O,eAUZ/O,EAAA2B,cAYEC,YAAaoN,GACXjN,KAAKkN,SACLlN,KAAKmN,UAAY,UACjBnN,KAAKoN,cAAgB,EACrBpN,KAAKqN,SACLrN,KAAKiN,aAAeA,EAOtBpN,OACE,OAAOG,KAAKoN,gBAAkBpN,KAAKqN,MAAM7F,OAS3C3H,cAAeqJ,EAAa/G,EAAiB0J,EAAO,MAClD7L,KAAKqN,MAAM/K,MAAO4G,GAAIA,EAAIoE,KAAMtN,KAAKmN,UAAYhL,EAAO,IAAM+G,EAAK,OAAQ/G,KAAMA,EAAM0J,KAAMA,IAS/FhM,UAAW0N,EAAMpE,GACf4D,EAAAnN,QAAK4N,QACHtB,OAAQ,MACRE,IAAKmB,EAAKD,KACVd,aAAc,eACbR,IACDhM,KAAKiN,aAAaQ,YAAYzB,EAAUuB,EAAKrE,GAAIlB,IAC/ChI,KAAKkN,MAAMK,EAAKrE,IAAMlB,EACtBhI,KAAKoN,eAAiB,EAClBpN,KAAK0N,QACPvE,QAWRtJ,WAAY0N,EAAMpE,GAChB,IAAIwE,EAAS,IAAIC,MACjBD,EAAOxH,iBAAiB,OAAQ,KAC9BnG,KAAKoN,gBACDpN,KAAK0N,QACPvE,MAGJwE,EAAOE,IAAMN,EAAKD,KAClBtN,KAAKkN,MAAMK,EAAKrE,IAAMyE,EASxB9N,gBAAiB0N,EAAMpE,GACrB,IAAI2E,EAAc,IAAIF,MACtBE,EAAY3H,iBAAiB,OAAQ,KACnCnG,KAAKkN,MAAMK,EAAKrE,IAAM,IAAI4D,EAAAlN,QAAYkO,EAAaP,EAAK1B,KAAKc,YAAc,EAAGY,EAAK1B,KAAKe,aAAe,GACvG5M,KAAKoN,eAAiB,EAClBpN,KAAK0N,QACPvE,MAGJ2E,EAAYD,IAAMN,EAAKD,KAOzBzN,YAAasJ,GACXnJ,KAAKqN,MAAMxL,QAAQ0L,IACbA,EAAKpL,OAAS6K,EAAUe,MAC1B/N,KAAKgO,UAAUT,EAAMpE,GACZoE,EAAKpL,OAAS6K,EAAUiB,OACjCjO,KAAKkO,WAAWX,EAAMpE,GACboE,EAAKpL,OAAS6K,EAAUmB,cACjCnO,KAAKoO,gBAAgBb,EAAMpE,KAYjCtJ,IAAKqJ,EAAa/G,EAAkB6K,EAAUiB,QAC5C,GAAI9L,IAAS6K,EAAUe,OAAS5L,IAAS6K,EAAUqB,UAAW,CAC5D,IAAI9E,EAAUpH,IAAS6K,EAAUqB,UACjC,OAAOrO,KAAKiN,aAAaqB,YAAYtO,KAAKkN,MAAMhE,GAAKK,GAGrD,OADAnE,QAAQC,IAAIrF,KAAKkN,MAAMhE,IAChBlJ,KAAKkN,MAAMhE,oFC5IxB,MAAA6B,EAAAhN,EAAA,GASAE,EAAA2B,sBAA0CmL,EAAAnL,QAOxCC,YAAa2B,GACXiF,QACAzG,KAAKuO,SAAW/M,EAAS6C,SACzBrE,KAAKmD,OACLnD,KAAKwO,yBACLxO,KAAKyO,SACH9K,SACA6H,SAOJ3L,OACE6I,OAAOvC,iBAAiB,UAAWuI,IACjC,IAAI5M,EAAoB,MAAd4M,EAAM5M,IAAc4M,EAAM5M,IAAM,QAC1C9B,KAAK4C,MAAM5C,KAAKuO,SAASzM,KAAQ,EACjC9B,KAAK2L,WAEPjD,OAAOvC,iBAAiB,QAASuI,IAC/B,IAAI5M,EAAoB,MAAd4M,EAAM5M,IAAc4M,EAAM5M,IAAM,QAC1C9B,KAAK4C,MAAM5C,KAAKuO,SAASzM,KAAQ,EACjC9B,KAAK2L,WAQT9L,yBAEE,IAAI8O,EAASjJ,SAASC,eAAe,QACjCiJ,EAAKD,GAAkBjG,OAC3BkG,EAAGzI,iBAAiB,aAgBpB,SAA2B0I,GACzBA,EAAIC,iBACJnL,EAAQkL,EAAIJ,QACZM,EAAcF,EAAIJ,QAAQ,GAAGO,MAC7BC,EAAcJ,EAAIJ,QAAQ,GAAGS,QApBqB,GACpDN,EAAGzI,iBAAiB,YAsBpB,SAA0B0I,GACxBM,EAAaC,QACbP,EAAIC,iBACJtD,EAAOqD,EAAIQ,eACXC,EAAcT,EAAIJ,QAAQ,GAAGO,MAC7BO,EAAaV,EAAIJ,QAAQ,GAAGS,MAC5B,IAAK,IAAI/Q,EAAI,EAAGA,EAAI0Q,EAAIJ,QAAQjH,OAAQrJ,IAElCqN,EAAKrN,GAAG6Q,MAAQrL,EAAMxF,GAAG6Q,QAC3BG,EAAavM,MAAMuM,EAAaZ,SAAY,IAAK,GAE/C/C,EAAKrN,GAAG6Q,MAAQrL,EAAMxF,GAAG6Q,QAC3BG,EAAavM,MAAMuM,EAAaZ,SAAY,IAAK,GAE/C/C,EAAKrN,GAAG+Q,MAAQvL,EAAMxF,GAAG+Q,QAC3BC,EAAavM,MAAMuM,EAAaZ,SAAY,IAAK,GAE/C/C,EAAKrN,GAAG+Q,MAAQvL,EAAMxF,GAAG+Q,QAC3BC,EAAavM,MAAMuM,EAAaZ,SAAY,IAAK,GAEnDY,EAAaxD,WA1CiC,GAClDiD,EAAGzI,iBAAiB,WA6CpB,SAAyB0I,GACvBA,EAAIC,iBACJK,EAAaC,UA/CiC,GAChDR,EAAGzI,iBAAiB,cAAeuI,IACjCA,EAAMI,kBACC,IAGT,IAAInL,KACA6H,KACAuD,EAAc,EACdE,EAAc,EACdK,EAAc,EACdC,EAAa,EACbJ,EAAenP,KAuCrBH,QACEG,KAAK4C,MAAM5C,KAAKuO,SAAgB,QAAK,EAGvC1O,cACEG,KAAK4C,MAAM5C,KAAKuO,SAAgB,QAAK,EAGvC1O,QACEG,KAAK4C,MAAM5C,KAAKuO,SAAY,IAAK,EACjCvO,KAAK4C,MAAM5C,KAAKuO,SAAY,IAAK,EACjCvO,KAAK4C,MAAM5C,KAAKuO,SAAY,IAAK,EACjCvO,KAAK4C,MAAM5C,KAAKuO,SAAY,IAAK,mFCjHrC,MAAAiB,EAAAzR,EAAA,IACA0R,EAAA1R,EAAA,IAGA2R,EAAA3R,EAAA,IACA4R,EAAA5R,EAAA,IACA6R,EAAA7R,EAAA,IACA8R,EAAA9R,EAAA,IACA+R,EAAA/R,EAAA,IACAgS,EAAAhS,EAAA,IACAiS,EAAAjS,EAAA,IACAkG,EAAAlG,EAAA,GAEAuI,EAAAvI,EAAA,GACAkS,EAAAlS,EAAA,IAQAE,EAAA2B,cAiBEC,YAAaqQ,EAAoD1O,GARzDxB,KAAAmQ,UAAY,GASlBnQ,KAAKiN,aAAe,IAAI0C,EAAA/P,QACxBI,KAAKgL,aAAe,IAAIwE,EAAA5P,QAAa4B,GACrCxB,KAAKwF,aAAe,IAAIiK,EAAA7P,QAAaI,KAAKiN,cAC1CjN,KAAK4C,MAAQ,IAAI8M,EAAA9P,QAAY4B,EAAUxB,KAAKgL,cAC5ChL,KAAKoQ,iBAAmB,IAAIR,EAAAhQ,QAAiBI,KAAK4C,MAAMyE,UACxDrH,KAAKkQ,SAAWA,EAChBlQ,KAAKwB,SAAWA,EAChBxB,KAAKqQ,UAAY,IAAIJ,EAAArQ,QAAU,YAAakQ,EAAY9P,KAAKwF,cAG/D3F,UACEuF,QAAQC,IAAIwK,GACZ,IAAIzP,EAAI,EACRyP,EAAQ,GAAGS,MAAMzO,QAAQ0O,IACvB,IAAIzQ,EAAQE,KAAKmQ,UACbpQ,EAASC,KAAKmQ,UACdhQ,EAAI,EACRoQ,EAAI1O,QAAQ2O,IACV,MAAMC,EAAO,IAAIV,EAAAnQ,QAAKO,EAAGC,EAAGN,EAAOC,EAAQC,KAAKwB,UAChD,OAAQgP,GACN,KAAK,EACHC,EAAKC,SAAU,EACfD,EAAKzJ,MAAQ,UACb,MACF,KAAK,EACHyJ,EAAKE,WAAY,EACjBF,EAAKzJ,MAAQ,UACb,MACF,KAAK,EACHyJ,EAAKzJ,MAAQ,UACb,MACF,KAAK,EACHyJ,EAAKzJ,MAAQ,UAGjBhH,KAAK4C,MAAMqI,SAAS3I,KAAKmO,GACzBzQ,KAAK4C,MAAMwI,YAAY9I,KAAKmO,GAC5BtQ,GAAKL,IAEPM,GAAKL,IAOTF,OACEG,KAAKwF,aAAaoL,cAActK,EAAAlF,QAAQoF,aAAciJ,EAAAzC,UAAUiB,QACjEjO,KAAK6Q,UACJ7Q,KAAKwF,aAAasL,YAAY,KAC5B1L,QAAQC,IAAIrF,KAAK4C,MAAMwI,aACvBpL,KAAK4C,MAAMwI,YACRtI,OAAO2C,GAAmBA,EAAQS,UAAYI,EAAAlF,QAAQ8F,MACtDrF,QAAQkP,GAAcA,EAAWlK,MAAQ7G,KAAKwF,aAAavG,IAAI8R,EAAW7K,UAC7ElG,KAAK4C,MAAMwM,QACXpP,KAAKqQ,UAAUlN,SAInBtD,UAAUsC,EAAcb,GACtB,IAAI0P,EAAgBlB,EAChBmB,EAAO,IAAIjB,EAAApQ,QACfqR,EAAKC,SAASF,EAAQlO,OAAO8C,GAAkBA,EAAOzD,OAASA,GAAO,IACtE8O,EAAK3P,SAAWA,EAChB2P,EAAK1P,UAAY,IAAI0C,EAAArE,QAAUI,KAAKmQ,UAAWnQ,KAAKmQ,WACpDc,EAAKpK,MAAQ7G,KAAKwF,aAAavG,IAAIgS,EAAK/K,SACxClG,KAAK4C,MAAMqI,SAAS3I,KAAK2O,GACzBjR,KAAK4C,MAAMwI,YAAY9I,KAAK2O,GAM9BpR,SACEG,KAAK4C,MAAMwI,YAAYvJ,QAAQkP,GAAcA,EAAWhN,OAAO/D,KAAKkQ,SAASjR,IAAI8R,EAAWrK,aAM9F7G,QACEG,KAAK4C,MAAMwI,YAAYvJ,QAAQkP,GAAcA,EAAW/G,MAAMhK,KAAKkQ,SAASjR,IAAI8R,EAAWrK,8FC5H/F,MAAAyK,EAAApT,EAAA,IACAqT,EAAArT,EAAA,GACAsI,EAAAtI,EAAA,GACAsT,EAAAtT,EAAA,GACAgE,EAAAhE,EAAA,GAQA2H,SAASS,iBAAiB,mBAAoB,KAC5C,MAAMmL,EAAY5L,SAASC,eAAe,YACpCuK,EAAW,IAAIqB,IACfC,EAAW9L,SAASI,cAAc,UAClC2L,EAAc/L,SAASI,cAAc,UACrC4L,EAAehM,SAASI,cAAc,UAE5CwL,EAAUrL,YAAYuL,GACtBF,EAAUrL,YAAYwL,GACtBH,EAAUrL,YAAYyL,GACtBxB,EAASyB,IAAItL,EAAAhF,UAAU4F,WAAYuK,EAASI,WAAW,OACvD1B,EAASyB,IAAItL,EAAAhF,UAAUwQ,OAAQJ,EAAYG,WAAW,OACtD1B,EAASyB,IAAItL,EAAAhF,UAAUkB,OAAQmP,EAAaE,WAAW,OACvDJ,EAAS1R,MAPU,IAQnB0R,EAASzR,OARU,IASnB0R,EAAY3R,MATO,IAUnB2R,EAAY1R,OAVO,IAWnB2R,EAAa5R,MAXM,IAYnB4R,EAAa3R,OAZM,IAcnByR,EAASrL,iBAAiB,QAAS2L,OAGnC,MAAMtQ,EAAW,IAAI4P,EAAAxR,QAAa4R,GAC5BvO,EAAO,IAAIkO,EAAAvR,QAAgBsQ,EAAU1O,GAC9B,IAAI6P,EAAAzR,QAAWqD,GAEvBU,QACLV,EAAK8O,UAAU,QAAS,IAAIhQ,EAAAnC,QAAQ,EAAG","file":"legend.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 26);\n","/**\r\n * Dimension class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Dimension {\r\n  width: number\r\n  height: number\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {number} width Width\r\n   * @param {number} height Height\r\n   */\r\n  constructor (width: number, height: number) {\r\n    this.width = width\r\n    this.height = height\r\n  }\r\n\r\n  /**\r\n   * Scale the dimension.\r\n   *\r\n   * @param {number} factor\r\n   */\r\n  public scale (factor: number) {\r\n    this.width *= factor\r\n    this.height *= factor\r\n  }\r\n}\r\n","import IVector from '../interfaces/IVector'\r\n\r\n/**\r\n * 2D vector implementation.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Vector2 implements IVector {\r\n  public x: number\r\n  public y: number\r\n\r\n  /**\r\n   * Default constructor. Sets x and y values.\r\n   *\r\n   * @param {number} x initial x value\r\n   * @param {number} y initial y value\r\n   */\r\n  constructor (x: number, y: number) {\r\n    this.x = x\r\n    this.y = y\r\n  }\r\n\r\n  /**\r\n   * Static addVector method to combine two vectors into a new one.\r\n   *\r\n   * @param {Vector2} v1 first vector\r\n   * @param {Vector2} v2 second vector\r\n   * @returns {Vector2} combined vector\r\n   */\r\n  static addVector (v1: Vector2, v2: Vector2): Vector2 {\r\n    return new Vector2(v1.x + v2.x, v1.y + v2.y)\r\n  }\r\n\r\n  /**\r\n   * Subtract two vector from each other and put the result into a new vector.\r\n   *\r\n   * @param {Vector2} v1 first vector\r\n   * @param {Vector2} v2 second vector\r\n   * @returns {Vector2} resulting vector\r\n   */\r\n  static subtractVector (v1: Vector2, v2: Vector2): Vector2 {\r\n    return new Vector2(v1.x - v2.x, v1.y - v2.y)\r\n  }\r\n\r\n  /**\r\n   * Multiplies a vector with a scalar and returns the resulting vector.\r\n   *\r\n   * @param {Vector2} vector initial vector\r\n   * @param {number} scalar scalar to scale the vector\r\n   * @returns {Vector2} the resulting vector\r\n   */\r\n  static multiply (vector: Vector2, scalar: number): Vector2 {\r\n    return new Vector2(vector.x * scalar, vector.y * scalar)\r\n  }\r\n\r\n  /**\r\n   * Divides a vector by a scalar and returns the result in a new vector.\r\n   * Throws error if trying to divide by zero.\r\n   *\r\n   * @param {Vector2} vector vector to divide\r\n   * @param {number} scalar scalar used to divide vector\r\n   * @returns {Vector2} resulting vector\r\n   */\r\n  static divide (vector: Vector2, scalar: number): Vector2 {\r\n    if (scalar === 0) {\r\n      throw new Error('cannot divide vector by scalar with value \"0\"')\r\n    }\r\n    return new Vector2(vector.x / scalar, vector.y / scalar)\r\n  }\r\n\r\n  /**\r\n   * Set vector with both x and y values.\r\n   *\r\n   * @param {number} x new x value\r\n   * @param {number} y new y value\r\n   */\r\n  set (x: number, y: number): void {\r\n    this.x = x\r\n    this.y = y\r\n  }\r\n\r\n  /**\r\n   * Set vector location to another vector.\r\n   *\r\n   * @param {Vector2} vector other vector\r\n   */\r\n  setVector (vector: Vector2): void {\r\n    this.x = vector.x\r\n    this.y = vector.y\r\n  }\r\n\r\n  /**\r\n   * Add x and y to this vector.\r\n   *\r\n   * @param {number} x x value\r\n   * @param {number} y y value\r\n   */\r\n  add (x: number, y: number): void {\r\n    this.x += x\r\n    this.y += y\r\n  }\r\n\r\n  /**\r\n   * Add vector to this vector.\r\n   *\r\n   * @param {Vector2} vector other vector\r\n   */\r\n  addVector (vector: Vector2): void {\r\n    this.x += vector.x\r\n    this.y += vector.y\r\n  }\r\n\r\n  /**\r\n   * Subtraxt x and y from this vector.\r\n   *\r\n   * @param {number} x x value\r\n   * @param {number} y y value\r\n   */\r\n  subtract (x: number, y: number): void {\r\n    this.x -= x\r\n    this.y -= y\r\n  }\r\n\r\n  /**\r\n   * Subtract a vector from this vector.\r\n   *\r\n   * @param {Vector2} vector other vector\r\n   */\r\n  subtractVector (vector: Vector2): void {\r\n    this.x -= vector.x\r\n    this.y -= vector.y\r\n  }\r\n\r\n  /**\r\n   * Multiply this vector by scalar.\r\n   *\r\n   * @param scalar scalar to multiply the vector\r\n   */\r\n  multiply (scalar: number): void {\r\n    this.x *= scalar\r\n    this.y *= scalar\r\n  }\r\n\r\n  /**\r\n   * Divides this vector by a scalar.\r\n   * Throws error when trying to divide by zero.\r\n   *\r\n   * @param {number} scalar scalar used to divide this vector\r\n   */\r\n  divide (scalar: number): void {\r\n    if (scalar === 0) {\r\n      throw new Error('cannot divide vector by \"0\"')\r\n    }\r\n    this.x /= scalar\r\n    this.y /= scalar\r\n  }\r\n\r\n  /**\r\n   * Get the magnitude / elementsCount of this vector.\r\n   *\r\n   * @returns {number} magnitude / elementsCount of this vector\r\n   */\r\n  mag (): number {\r\n    return Math.sqrt(this.x * this.x + this.y * this.y)\r\n  }\r\n\r\n  /**\r\n   * Negate the x and y values of this vector and return the result as a new Vector2 object.\r\n   *\r\n   * @returns {Vector2}\r\n   */\r\n  negative (): Vector2 {\r\n    return new Vector2(-this.x, -this.y)\r\n  }\r\n\r\n  /**\r\n   * Normalize the vector.\r\n   */\r\n  normalize (): void {\r\n    let magnitude = this.mag()\r\n    if (magnitude !== 0) {\r\n      this.divide(magnitude)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Limit the vector to a maximum elementsCount.\r\n   *\r\n   * @param {number} max maximum elementsCount\r\n   */\r\n  limit (max: number): void {\r\n    if (Math.floor(this.mag()) > max) {\r\n      this.normalize()\r\n      this.multiply(max)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the distance of this vector to another vector.\r\n   *\r\n   * @param {Vector2} vector other vector\r\n   * @returns {number} calculated distance\r\n   */\r\n  distanceTo (vector: Vector2): number {\r\n    return Math.sqrt(Math.pow(vector.x - this.x, 2) + Math.pow(vector.y - this.y, 2))\r\n  }\r\n\r\n  /**\r\n   * Get the dot product between this vector and another vector.\r\n   *\r\n   * @param {Vector2} vector\r\n   * @returns {number} the dot product of this vector and the one passed as param.\r\n   */\r\n  dot (vector: Vector2): number {\r\n    return this.x * vector.x + this.y * vector.y\r\n  }\r\n\r\n  floor (): void {\r\n    this.x = Math.floor(this.x)\r\n    this.x = Math.floor(this.x)\r\n  }\r\n\r\n  /**\r\n   * Create a clone of this vector.\r\n   *\r\n   * @returns {Vector2} cloned vector\r\n   */\r\n  clone (): Vector2 {\r\n    return new Vector2(this.x, this.y)\r\n  }\r\n}\r\n","/**\r\n *\r\n */\r\nexport enum AssetId {\r\n  BASE_VOID = 'base-void',\r\n  TURRET_LASER = 'turret-laser',\r\n  CREEP_VOID_LEECHER = 'creep-void-leecher',\r\n  NONE = 'none'\r\n}\r\n","export enum ContextId {\r\n  BACKGROUND = 'background', CREEPS ='creeps' , PLAYER = 'player'\r\n}\r\n","import Vector2 from '../math/Vector2'\r\nimport Settings from '../../config/Settings'\r\nimport Dimension from '../geometry/Dimension'\r\nimport IJSONSerializable from '../interfaces/IJSONSerializable'\r\n\r\n/**\r\n * Base entity class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Entity implements IJSONSerializable {\r\n  id: string\r\n  dimension: Dimension\r\n  settings: Settings\r\n  position: Vector2\r\n\r\n  /**\r\n   * Constructor. Sets position and dimension of entity.\r\n   *\r\n   * @param {Vector2} position Initial position\r\n   * @param {Dimension} dimension Initial dimension\r\n   * @param {Settings} settings\r\n   */\r\n  constructor (position?: Vector2, dimension?: Dimension, settings?: Settings) {\r\n    this.position = position\r\n    this.dimension = dimension\r\n    this.settings = settings\r\n  }\r\n\r\n  public init (): void {\r\n    throw new Error('Implement in subclass.')\r\n  }\r\n\r\n  /**\r\n   * Create a JSON string from this object.\r\n   * \r\n   * @returns {string} The JSoN string\r\n   */\r\n  public toJSON (): string {\r\n    return JSON.stringify(this)\r\n  }\r\n\r\n  /**\r\n   * Load data into this object from JSON.\r\n   *\r\n   * @param json JSON string\r\n   */\r\n  public fromJSON (json: any): void {\r\n    \r\n    // Map parsed object to the attributes of this entity.\r\n    Object.keys(json).forEach(key => {\r\n      if ( this.hasOwnProperty( key ) ) {\r\n        this[key] = json[key]\r\n      }\r\n    })\r\n  }\r\n}\r\n","import Vector2 from '../math/Vector2'\r\nimport ICollideAble, { EntityType } from '../interfaces/ICollideAble'\r\n\r\n/**\r\n * Hitbox used for defining collision boundaries.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class HitBox implements ICollideAble {\r\n  type: EntityType\r\n  collidesWith\r\n  colliding: boolean\r\n  position: Vector2\r\n  width: number\r\n  height: number\r\n\r\n  /**\r\n   * Initializes position and dimension.\r\n   * @param {number} x position x\r\n   * @param {number} y position y\r\n   * @param {number} width dimension width\r\n   * @param {number} height dimension height\r\n   */\r\n  constructor (x, y, width, height) {\r\n    this.position = new Vector2(x, y)\r\n    this.width = width\r\n    this.height = height\r\n    this.colliding = false\r\n    this.collidesWith = []\r\n    this.type = EntityType.BOX\r\n    this.collidesWith.push(EntityType.PLAYER)\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {ICollideAble} other\r\n   * @returns {boolean}\r\n   */\r\n  isCollideAbleWith (other: ICollideAble): boolean {\r\n    return this.collidesWith.includes(other.type.toString())\r\n  }\r\n}\r\n","import Observer from './Observer'\r\n\r\n/**\r\n * Observable class to be extended by a class that should be observed.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Observable {\r\n  protected observers: Observer[]\r\n  protected state: any\r\n\r\n  constructor () {\r\n    this.observers = []\r\n    this.state = {}\r\n  }\r\n\r\n  /**\r\n   * Register an observer on this observable.\r\n   *\r\n   * @param {Observer} observer Object implementing the Observer interface\r\n   */\r\n  register (observer: Observer): void {\r\n    this.observers.push(observer)\r\n  }\r\nd\r\n  /**\r\n   * Remove an observer from this observables observers list.\r\n   *\r\n   * @param {Observer} observer Object implementing the Observer interface\r\n   */\r\n  unRegister (observer: Observer): void {\r\n    this.observers = this.observers.filter(obs => {return obs !== observer})\r\n  }\r\n\r\n  /**\r\n   * Notify all observers.\r\n   */\r\n  notify (): void {\r\n    this.observers.forEach(observer => observer.update(this.state))\r\n  }\r\n}\r\n","/**\r\n * Legend of the void game loop class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nimport IGameLoop from '../lib/interfaces/IGameLoop'\r\nimport IGame from '../lib/interfaces/IGame'\r\n\r\nexport default class LegendLoop implements IGameLoop {\r\n  public game: IGame\r\n  public lastTime: number\r\n  public frameId: number\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {IGame} game Game instance\r\n   */\r\n  constructor (game: IGame) {\r\n    this.game = game\r\n    this.lastTime = null\r\n  }\r\n\r\n  /**\r\n   * Start the game loop.\r\n   */\r\n  public start (): void {\r\n    this.game.init()\r\n    this.game.state.running = true\r\n    this.frameId = requestAnimationFrame(this.loop.bind(this))\r\n  }\r\n\r\n  /**\r\n   * Stop the game loop.\r\n   */\r\n  public stop (): void {\r\n    this.game.state.running = false\r\n    if (this.frameId) {\r\n      cancelAnimationFrame(this.frameId)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop the game loop and start it again.\r\n   */\r\n  public restart (): void {\r\n    this.stop()\r\n    this.start()\r\n  }\r\n\r\n  /**\r\n   * Pause/unpause game.\r\n   */\r\n  public togglePause (): void {\r\n    this.game.state.paused = !this.game.state.paused\r\n  }\r\n\r\n  /**\r\n   * Main loop executing update and render methods.\r\n   */\r\n  public loop (time: number): void {\r\n    if (this.game.state.running) {\r\n      if (!this.game.state.paused) {\r\n        if (this.lastTime !== null) {\r\n          const diff = time - this.lastTime\r\n          this.game.state.update(diff / 1000)\r\n        }\r\n        this.lastTime = time\r\n        this.game.render()\r\n        this.frameId = requestAnimationFrame(this.loop.bind(this))\r\n      }\r\n    }\r\n  }\r\n}\r\n","export enum Actions {\r\n  UP = 'UP',\r\n  DOWN = 'DOWN',\r\n  LEFT = 'LEFT',\r\n  RIGHT = 'RIGHT',\r\n  SHOOT = 'SHOOT',\r\n  RESTART = 'RESTART',\r\n  ROTATE_LEFT = 'R-LEFT',\r\n  ROTATE_RIGHT = 'R-RIGHT'\r\n}\r\n","import Dimension from '../lib/geometry/Dimension'\r\nimport { Actions } from '../enum/Actions'\r\nimport Player from '../model/Player'\r\n/**\r\n * Pong game settings.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Settings {\r\n  gameSize: Dimension\r\n  canvas: HTMLCanvasElement\r\n  keyboard\r\n  player\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {HTMLCanvasElement} canvas\r\n   */\r\n  constructor (canvas: HTMLCanvasElement) {\r\n    this.gameSize = new Dimension(canvas.width, canvas.height)\r\n    this.canvas = canvas\r\n    this.keyboard = {\r\n      'w': Actions.UP,\r\n      's': Actions.DOWN,\r\n      'ArrowUp': Actions.LEFT,\r\n      'ArrowDown': Actions.RIGHT,\r\n      'space': Actions.SHOOT,\r\n      'r': Actions.RESTART\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param value\r\n   * @returns {string}\r\n   */\r\n  findKey (value): string {\r\n    return Object.keys(this.keyboard).filter(key => this.keyboard[key] === value)[0]\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param newKey\r\n   * @param {Actions} action\r\n   */\r\n  setKey (newKey, action: Actions): void {\r\n    let oldKey = this.findKey(action)\r\n    if (newKey !== oldKey) {\r\n      console.log('old:' + oldKey, ' new: ' + newKey + ' value: ' + action)\r\n      this.keyboard[newKey] = this.keyboard[oldKey]\r\n      delete this.keyboard[oldKey]\r\n    }\r\n  }\r\n}\r\n","import IGameState from '../lib/interfaces/IGameState'\r\nimport Turret from '../model/Turret'\r\nimport AssetManager from '../lib/client/AssetManager'\r\n\r\n/** \r\n * Build menu for building Towers etc.\r\n * \r\n * @author Daniel Peters\r\n * @version 1.0\r\n*/\r\nexport default class BuildMenu {\r\n  element: HTMLElement\r\n  state: IGameState\r\n  turretList: Turret[]\r\n  assetManager: AssetManager\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {string} elementId\r\n   * @param {Turret[]} turretList\r\n   * @param assetManager\r\n   */\r\n  constructor (elementId: string, turretList, assetManager: AssetManager) {\r\n    this.element = document.getElementById(elementId)\r\n    this.turretList = turretList\r\n    this.assetManager = assetManager\r\n  }\r\n\r\n  /**\r\n   * Initialize the menu.\r\n   */\r\n  init (): void {\r\n    this.turretList.forEach(turret => {\r\n      const turretBox = document.createElement('div')\r\n      turretBox.classList.add('build-box')\r\n      turretBox.appendChild(this.assetManager.get(turret.assetId))\r\n      turretBox.addEventListener('click', () => {})\r\n      this.element.appendChild(turretBox)\r\n    })\r\n  }\r\n}\r\n","import Entity from '../lib/entity/Entity'\r\nimport Vector2 from '../lib/math/Vector2'\r\nimport Dimension from '../lib/geometry/Dimension'\r\nimport Settings from '../config/Settings'\r\nimport IRenderable from '../lib/interfaces/IRenderable'\r\nimport IMovable from '../lib/interfaces/IMovable'\r\nimport { ContextId } from '../enum/ContextId'\r\nimport { TurretType } from '../enum/TurretType'\r\nimport { AssetId } from '../enum/AssetId'\r\n\r\n/**\r\n * Turret class.\r\n * \r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Turret extends Entity implements IRenderable, IMovable {\r\n  type: TurretType\r\n  description: string\r\n  assetId: AssetId\r\n  damage: number\r\n  rate: number\r\n  range: number\r\n  asset\r\n  contextId: ContextId\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {number} x Starting position on x axis\r\n   * @param {number} y Starting position on y axis\r\n   * @param {number} width Turret width\r\n   * @param {number} height Turret height\r\n   * @param {number} damage Turret attack\r\n   * @param {Settings} settings Game settings.\r\n   * @param {TurretType} type\r\n   * @param {AssetId} assetId\r\n   */\r\n  constructor (x?: number, y?: number, width?: number, height?: number, damage?: number, settings?: Settings, type?: TurretType, assetId: AssetId = AssetId.TURRET_LASER) {\r\n    super(new Vector2(x, y), new Dimension(width, height), settings)\r\n    this.type = type\r\n    this.damage = damage\r\n    this.contextId = ContextId.PLAYER\r\n    this.assetId = assetId\r\n  }\r\n\r\n  public init (): void {\r\n    \r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {CanvasRenderingContext2D} ctx \r\n   */\r\n  public render (ctx: CanvasRenderingContext2D) {\r\n    ctx.drawImage(this.asset, this.position.x, this.position.y, this.dimension.width, this.dimension.height)\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {CanvasRenderingContext2D} ctx \r\n   */\r\n  public clear (ctx: CanvasRenderingContext2D) {\r\n    ctx.clearRect(this.position.x, this.position.y, this.dimension.width, this.dimension.height)\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {number} dt \r\n   */\r\n  public move (dt: number) {\r\n\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  private shoot (): void {\r\n\r\n  }\r\n}\r\n","import Entity from '../lib/entity/Entity'\r\nimport Settings from '../config/Settings'\r\nimport Vector2 from '../lib/math/Vector2'\r\nimport Dimension from '../lib/geometry/Dimension'\r\nimport Turret from './Turret'\r\nimport IRenderable from '../lib/interfaces/IRenderable'\r\nimport { ContextId } from '../enum/ContextId'\r\nimport { AssetId } from '../enum/AssetId'\r\n\r\n/**\r\n * 2D Tower defense tile class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Tile extends Entity implements IRenderable {\r\n  contextId: ContextId\r\n  assetId: AssetId\r\n  asset\r\n  blocked: boolean\r\n  buildable: boolean\r\n  turret: Turret\r\n  color: string\r\n\r\n  /**\r\n   * Conscrutor.\r\n   *\r\n   * @param x\r\n   * @param y\r\n   * @param width\r\n   * @param height\r\n   * @param settings\r\n   */\r\n  constructor (x: number, y: number, width: number, height: number, settings: Settings) {\r\n    super(new Vector2(x, y), new Dimension(width, height), settings)\r\n    this.color = '#ffffff'\r\n    this.contextId = ContextId.BACKGROUND\r\n    this.assetId = AssetId.NONE\r\n  }\r\n\r\n  init (): void {\r\n\r\n  }\r\n\r\n  render (ctx: CanvasRenderingContext2D): void {\r\n    ctx.fillStyle = this.color\r\n    ctx.fillRect(this.position.x, this.position.y, this.dimension.width, this.dimension.height)\r\n  }\r\n\r\n  clear (ctx: CanvasRenderingContext2D): void {\r\n    ctx.clearRect(this.position.x, this.position.y, this.dimension.width, this.dimension.height)\r\n  }\r\n}\r\n","import QuadTree from './QuadTree'\r\nimport ICollisionManager from '../interfaces/ICollisionManager'\r\n\r\n/**\r\n * Collision Manager.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class CollisionManager implements ICollisionManager {\r\n  quadTree: QuadTree\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {QuadTree} quadTree\r\n   */\r\n  constructor (quadTree: QuadTree) {\r\n    this.quadTree = quadTree\r\n  }\r\n\r\n  /**\r\n   * Collision detection algorithm.\r\n   */\r\n  detectCollision (): void {\r\n    let objects = []\r\n    this.quadTree.getAllObjects(objects)\r\n    for (let i = 0; i < objects.length; i++) {\r\n      let obj = []\r\n      this.quadTree.findObjects(obj, objects[i])\r\n\r\n      for (let j = 0; j < obj.length; j++) {\r\n        if (objects[i].isCollideAbleWith(obj[j]) &&\r\n          (Math.floor(objects[i].position.x) < Math.floor(obj[j].position.x) + obj[j].dimension.width &&\r\n            Math.floor(objects[i].position.x) + objects[i].dimension.width > Math.floor(obj[j].position.x) &&\r\n            Math.floor(objects[i].position.y) < Math.floor(obj[j].position.y) + obj[j].dimension.height &&\r\n            Math.floor(objects[i].position.y) + objects[i].dimension.height > Math.floor(obj[j].position.y))\r\n        && objects[i].alive && obj[j].alive) {\r\n          console.log(objects[i])\r\n          objects[i].colliding = true\r\n          obj[j].colliding = true\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Sound class used to play a sound from a file.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Sound {\r\n  audioContext: AudioContext\r\n  source: AudioBufferSourceNode\r\n  gainNode: GainNode\r\n  masterGain: GainNode\r\n  buffer\r\n  playing: boolean\r\n\r\n  /**\r\n   *\r\n   * @param audioContext\r\n   * @param {GainNode} masterGain\r\n   * @param buffer\r\n   */\r\n  constructor (audioContext, masterGain: GainNode, buffer) {\r\n    this.audioContext = audioContext\r\n    this.masterGain = masterGain\r\n    this.buffer = buffer\r\n    this.gainNode = this.audioContext.createGain()\r\n    this.gainNode.gain.value = 0.2\r\n    this.gainNode.connect(this.masterGain)\r\n    this.playing = false\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {boolean} loop\r\n   */\r\n  play (loop = false): void {\r\n    this.source = this.audioContext.createBufferSource()\r\n    this.source.buffer = this.buffer\r\n    this.source.loop = loop\r\n    this.source.connect(this.gainNode)\r\n    this.source.start(0)\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  stop (): void {\r\n    if (this.source) {\r\n      this.source.stop(0)\r\n    }\r\n  }\r\n}\r\n","import Sound from '../audio/Sound'\r\n\r\n/**\r\n * Audio manager class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class AudioManager {\r\n  private audioContext: AudioContext\r\n  private masterGain: GainNode\r\n  private effectsGain: GainNode\r\n  private ambientGain: GainNode\r\n\r\n  /**\r\n   *\r\n   */\r\n  constructor () {\r\n    this.initAudioContext()\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  initAudioContext (): void {\r\n    try {\r\n      // Fix for browsers using prefixes\r\n      window.AudioContext = window.AudioContext || webkitAudioContext\r\n      this.audioContext = new AudioContext()\r\n      this.masterGain = this.audioContext.createGain()\r\n      this.effectsGain = this.audioContext.createGain()\r\n      this.ambientGain = this.audioContext.createGain()\r\n      this.masterGain.gain.value = 1\r\n      this.masterGain.connect(this.audioContext.destination)\r\n      this.effectsGain.connect(this.masterGain)\r\n      this.ambientGain.connect(this.masterGain)\r\n      this.ambientGain.gain.value = 1\r\n      this.effectsGain.gain.value = 1\r\n    } catch (e) {\r\n      console.log('Web Audio API is not supported in this browser')\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param data\r\n   * @param id\r\n   * @param callback\r\n   */\r\n  decodeAudio (data, id, callback): void {\r\n    this.audioContext.decodeAudioData(data).then(\r\n      buffer => callback(buffer),\r\n      error => { console.log('Error with decoding audio data' + error) }\r\n    )\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {number} value\r\n   */\r\n  adjustMasterVolume (value: number): void {\r\n    this.masterGain.gain.value = value\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {number} value\r\n   */\r\n  adjustAmbientVolume (value: number): void {\r\n    this.ambientGain.gain.value = value\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {number} value\r\n   */\r\n  adjustEffectsVolume (value: number): void {\r\n    this.effectsGain.gain.value = value\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param buffer\r\n   * @param {boolean} ambient\r\n   * @returns {Sound}\r\n   */\r\n  createSound (buffer, ambient: boolean): Sound {\r\n    return new Sound(this.audioContext, ambient ? this.ambientGain : this.effectsGain, buffer)\r\n  }\r\n}\r\n","export enum EntityType {\r\n  PLAYER = 'ship',\r\n  ENEMY = 'enemy',\r\n  ENEMY_BULLET = 'bulletEnemy',\r\n  PLAYER_BULLET = 'bullet',\r\n  BACKGROUND = 'background',\r\n  MAP = 'map',\r\n  GAME_OVER = 'gameOver',\r\n  LASER = 'laser',\r\n  MAIN_THEME = 'shockWave',\r\n  EXPLOSION_I = 'explosion1',\r\n  EXPLOSION_II = 'explosion2',\r\n  BOX = 'box',\r\n  ARENA = 'arena'\r\n}\r\n\r\n/**\r\n * Interface for collideable entities.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default interface ICollideAble {\r\n  collidesWith: EntityType[]\r\n  colliding: boolean\r\n  type: EntityType\r\n\r\n  /**\r\n   *\r\n   * @param {ICollideAble} other\r\n   * @returns {boolean}\r\n   */\r\n  isCollideAbleWith (other: ICollideAble): boolean\r\n}\r\n","import HitBox from './HitBox'\r\nimport ICollideAble from '../interfaces/ICollideAble'\r\n\r\n/**\r\n * QuadTree class used to optimize collision checking.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class QuadTree {\r\n  level: number\r\n  maxObjects: number\r\n  maxLevels: number\r\n  hitBox: HitBox\r\n  objects: ICollideAble[]\r\n  nodes: QuadTree[]\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {HitBox} hitBox\r\n   * @param {number} level\r\n   */\r\n  constructor (hitBox = new HitBox(0, 0, 0, 0), level = 0) {\r\n    this.level = level\r\n    this.maxObjects = 10\r\n    this.maxLevels = 5\r\n    this.hitBox = hitBox\r\n    this.objects = []\r\n    this.nodes = []\r\n  }\r\n\r\n  /**\r\n   * Clears the QuadTree and its sub nodes from all models objects.\r\n   */\r\n  clear (): void {\r\n    this.objects = []\r\n    this.nodes.forEach(node => node.clear())\r\n    this.nodes = []\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param returnedObjects\r\n   * @returns {any}\r\n   */\r\n  getAllObjects (returnedObjects) {\r\n    this.nodes.forEach(node => node.getAllObjects(returnedObjects))\r\n    this.objects.forEach(object => returnedObjects.push(object))\r\n    return returnedObjects\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param returnedObjects\r\n   * @param object\r\n   * @returns {any}\r\n   */\r\n  findObjects (returnedObjects, object) {\r\n    if (typeof object === 'undefined') {\r\n      console.log('UNDEFINED OBJECT')\r\n      return\r\n    }\r\n    let index = this.getIndex(object)\r\n    if (index !== -1 && this.nodes.length) {\r\n      this.nodes[index].findObjects(returnedObjects, object)\r\n    }\r\n    this.objects.forEach(obj => returnedObjects.push(obj))\r\n    return returnedObjects\r\n  }\r\n\r\n  /**\r\n   * Insert an object into the QuadTree.\r\n   *\r\n   * @param object\r\n   */\r\n  insert (object): void {\r\n    if (typeof object === 'undefined') {\r\n      return\r\n    }\r\n    if (object instanceof Array) {\r\n      object.forEach(element => this.insert(element))\r\n      return\r\n    }\r\n    if (this.nodes.length > 0) {\r\n      let index = this.getIndex(object)\r\n      // Only addVector the object to a sub node if it can fit completely within one\r\n      if (index !== -1) {\r\n        this.nodes[index].insert(object)\r\n        return\r\n      }\r\n    }\r\n    this.objects.push(object)\r\n\r\n    if (this.objects.length > this.maxObjects && this.level < this.maxLevels) {\r\n      if (typeof this.nodes[0] === 'undefined') {\r\n        this.split()\r\n      }\r\n      let i = 0\r\n      while (i < this.objects.length) {\r\n        let index = this.getIndex(this.objects[i])\r\n        if (index !== -1) {\r\n          this.nodes[index].insert((this.objects.splice(i, 1))[0])\r\n        } else {\r\n          i++\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the index of an object from the QuadTree.\r\n   *\r\n   * @param object\r\n   * @returns {number}\r\n   */\r\n  getIndex (object): number {\r\n    let index = -1\r\n    let verticalMidpoint = this.hitBox.position.x + this.hitBox.width / 2\r\n    let horizontalMidpoint = this.hitBox.position.y + this.hitBox.height / 2\r\n    // Object can fit completely within the top quadrant\r\n    let topQuadrant = (object.position.y < horizontalMidpoint && object.position.y + object.height < horizontalMidpoint)\r\n    // Object can fit completely within the bottom quadrant\r\n    let bottomQuadrant = (object.position.y > horizontalMidpoint)\r\n    // Object can fit completely within the left quadrants\r\n    if (object.position.x < verticalMidpoint && object.position.x + object.width < verticalMidpoint) {\r\n      if (topQuadrant) {\r\n        index = 1\r\n      } else if (bottomQuadrant) {\r\n        index = 2\r\n      }\r\n    } else if (object.position.x > verticalMidpoint) { // Object can fix completely within the right quadrants\r\n      if (topQuadrant) {\r\n        index = 0\r\n      } else if (bottomQuadrant) {\r\n        index = 3\r\n      }\r\n    }\r\n    return index\r\n  }\r\n\r\n  /**\r\n   * Split the tree on demand.\r\n   */\r\n  split (): void {\r\n    let subWidth = (this.hitBox.width / 2) | 0\r\n    let subHeight = (this.hitBox.height / 2) | 0\r\n    this.nodes[0] = new QuadTree(\r\n      new HitBox(this.hitBox.position.x + subWidth, this.hitBox.position.y, subWidth, subHeight), this.level + 1)\r\n    this.nodes[1] = new QuadTree(\r\n      new HitBox(this.hitBox.position.x, this.hitBox.position.y, subWidth, subHeight), this.level + 1)\r\n    this.nodes[2] = new QuadTree(\r\n      new HitBox(this.hitBox.position.x, this.hitBox.position.y + subHeight, subWidth, subHeight), this.level + 1)\r\n    this.nodes[3] = new QuadTree(\r\n      new HitBox(this.hitBox.position.x + subWidth, this.hitBox.position.y + subHeight, subWidth, subHeight), this.level + 1)\r\n  }\r\n}\r\n","import IGameState from '../lib/interfaces/IGameState'\r\nimport QuadTree from '../lib/collision/QuadTree'\r\nimport Entity from '../lib/entity/Entity'\r\nimport ICollideAble from '../lib/interfaces/ICollideAble'\r\nimport Settings from '../config/Settings'\r\nimport InputManager from '../lib/client/InputManager'\r\nimport IRenderable from '../lib/interfaces/IRenderable'\r\nimport IMovable from '../lib/interfaces/IMovable'\r\nimport Tile from '../model/Tile'\r\nimport Observable from '../lib/observer/Observable'\r\nimport HitBox from '../lib/collision/HitBox'\r\n\r\n/**\r\n * Legend of the void game state class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class LegendState extends Observable implements IGameState {\r\n  public running: boolean\r\n  public paused: boolean\r\n  public quadTree: QuadTree\r\n  public entities: Entity[]\r\n  public collideables: ICollideAble[]\r\n  public movables: IMovable[]\r\n  public renderables: IRenderable[]\r\n  public map: Tile[]\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {Settings} settings\r\n   * @param {InputManager} inputManager\r\n   */\r\n  constructor (settings: Settings, inputManager: InputManager) {\r\n    super()\r\n    this.running = false\r\n    this.paused = false\r\n    this.entities = []\r\n    this.quadTree = new QuadTree(new HitBox(0, 0, settings.gameSize.width, settings.gameSize.height))\r\n    this.collideables = []\r\n    this.movables = []\r\n    this.renderables = []\r\n    this.state = {\r\n      kills: 0,\r\n      cash: 0\r\n    }\r\n  }\r\n\r\n  public update (dt: number): void {\r\n    this.movables.forEach(movable => movable.move(dt))\r\n  }\r\n\r\n  public reset (): void {\r\n    this.entities.forEach(entity => entity.init())\r\n  }\r\n\r\n  public scorePoints (points: number): void {\r\n    this.state.cash += points\r\n    this.state.kills++\r\n    this.notify()\r\n  }\r\n}\r\n","export default class Ajax {\r\n  private static defaults = {\r\n    url: '',\r\n    method: 'GET',\r\n    contentType: 'text/html',\r\n    async: true,\r\n    data: null\r\n  }\r\n\r\n  /**\r\n   * Create and send an XML-HTTP request.\r\n   * Requires an options object.\r\n   *\r\n   * @param opts Possible option properties:\r\n   * url = url to send the request to.\r\n   * method = request method. GET, POST, PUT, DELETE.\r\n   * contentType = specify the content type of the request.\r\n   * async = boolean flag for async calls. Defaults to true.\r\n   * data = request body.\r\n   * @param callback success callback function\r\n   */\r\n  public static create (opts, callback): void {\r\n    let xHttp = new XMLHttpRequest()\r\n    xHttp.addEventListener('load', () => {\r\n      callback(xHttp.response)\r\n    })\r\n    xHttp.open(\r\n      opts.method ? opts.method : Ajax.defaults.method,\r\n      opts.url ? opts.url : Ajax.defaults.url,\r\n      opts.async ? opts.async : Ajax.defaults.async\r\n    )\r\n    if (opts.hasOwnProperty('contentType')) {\r\n      xHttp.setRequestHeader(\r\n        'Content-Type',\r\n        opts.contentType ? opts.contentType : Ajax.defaults.contentType\r\n      )\r\n    }\r\n    if (opts.hasOwnProperty('responseType')) {\r\n      xHttp.responseType = opts.responseType\r\n    }\r\n    if (opts.hasOwnProperty('data') && typeof opts.data === 'object') {\r\n      opts.data = JSON.stringify(opts.data)\r\n    }\r\n    xHttp.send(opts.data ? opts.data : null)\r\n  }\r\n}\r\n","/**\r\n * Sprite sheet definition.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class SpriteSheet {\r\n  public image: HTMLImageElement\r\n  public frameWidth: number\r\n  public frameHeight: number\r\n  public framesPerRow: number\r\n\r\n  /**\r\n   * Constructor. Sets frame dimensions and calculates number of frames.\r\n   *\r\n   * @param image\r\n   * @param frameWidth\r\n   * @param frameHeight\r\n   */\r\n  constructor (image: HTMLImageElement, frameWidth, frameHeight) {\r\n    this.image = image\r\n    this.frameWidth = frameWidth\r\n    this.frameHeight = frameHeight\r\n    this.framesPerRow = Math.floor(image.width / frameWidth)\r\n  }\r\n}\r\n","import SpriteSheet from '../graphics/2D/SpriteSheet'\r\nimport Sound from '../audio/Sound'\r\nimport Ajax from '../ajax/Ajax'\r\nimport { AssetId } from '../../enum/AssetId'\r\nimport AudioManager from './AudioManager'\r\n\r\nexport enum AssetType {\r\n  SPRITE = 'sprite', SPRITE_SHEET = 'sprite-sheet', AUDIO = 'audio', AUDIO_AMB = 'audio-amb'\r\n}\r\n\r\n/**\r\n * Asset manager Class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class AssetManager {\r\n  private cache\r\n  private assetsDir: string\r\n  private queue\r\n  private downloadCount: number\r\n  private audioManager: AudioManager\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {AudioManager} audioManager\r\n   */\r\n  constructor (audioManager: AudioManager) {\r\n    this.cache = []\r\n    this.assetsDir = 'assets/'\r\n    this.downloadCount = 0\r\n    this.queue = []\r\n    this.audioManager = audioManager\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns {boolean}\r\n   */\r\n  done (): boolean {\r\n    return this.downloadCount === this.queue.length\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {AssetId} id\r\n   * @param {AssetType} type\r\n   * @param {any} opts\r\n   */\r\n  queueDownload (id: AssetId, type: AssetType, opts = null): void {\r\n    this.queue.push({ id: id, path: this.assetsDir + type + '/' + id + '.png', type: type, opts: opts })\r\n  }\r\n\r\n  /**\r\n   * Build an AJAX Request to loadAudio audio file into the buffer cache.\r\n   *\r\n   * @param item object with name of file and path to file\r\n   * @param callback function to execute on done\r\n   */\r\n  loadAudio (item, callback): void {\r\n    Ajax.create({\r\n      method: 'GET',\r\n      url: item.path,\r\n      responseType: 'arraybuffer'\r\n    }, response => {\r\n      this.audioManager.decodeAudio(response, item.id, buffer => {\r\n        this.cache[item.id] = buffer\r\n        this.downloadCount += 1\r\n        if (this.done()) {\r\n          callback()\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param item\r\n   * @param callback\r\n   */\r\n  loadSprite (item, callback): void {\r\n    let sprite = new Image()\r\n    sprite.addEventListener('load', () => {\r\n      this.downloadCount++\r\n      if (this.done()) {\r\n        callback()\r\n      }\r\n    })\r\n    sprite.src = item.path\r\n    this.cache[item.id] = sprite\r\n  }\r\n\r\n  /**\r\n   * Load sprites sheet.\r\n   *\r\n   * @param item sprite sheet info\r\n   * @param callback called upon downloading all\r\n   */\r\n  loadSpriteSheet (item, callback): void {\r\n    let spriteSheet = new Image()\r\n    spriteSheet.addEventListener('load', () => {\r\n      this.cache[item.id] = new SpriteSheet(spriteSheet, item.opts.frameWidth || 0, item.opts.frameHeight || 0)\r\n      this.downloadCount += 1\r\n      if (this.done()) {\r\n        callback()\r\n      }\r\n    })\r\n    spriteSheet.src = item.path\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param callback\r\n   */\r\n  downloadAll (callback): void {\r\n    this.queue.forEach(item => {\r\n      if (item.type === AssetType.AUDIO) {\r\n        this.loadAudio(item, callback)\r\n      } else if (item.type === AssetType.SPRITE) {\r\n        this.loadSprite(item, callback)\r\n      } else if (item.type === AssetType.SPRITE_SHEET) {\r\n        this.loadSpriteSheet(item, callback)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Create an audio buffer source node from cached buffer.\r\n   * Send it to the destination of the audio context and play it.\r\n   *\r\n   * @param {AssetId} id File id\r\n   * @param {AssetType} type\r\n   */\r\n  get (id: AssetId, type: AssetType = AssetType.SPRITE): any {\r\n    if (type === AssetType.AUDIO || type === AssetType.AUDIO_AMB) {\r\n      let ambient = type === AssetType.AUDIO_AMB\r\n      return this.audioManager.createSound(this.cache[id], ambient)\r\n    } else {\r\n      console.log(this.cache[id])\r\n      return this.cache[id]\r\n    }\r\n  }\r\n}\r\n","import Observable from '../observer/Observable'\r\nimport Settings from '../../config/Settings'\r\n\r\n/**\r\n * Input manager class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class InputManager extends Observable {\r\n  inputMap\r\n  touches\r\n\r\n  /**\r\n   *\r\n   */\r\n  constructor (settings: Settings) {\r\n    super()\r\n    this.inputMap = settings.keyboard\r\n    this.init()\r\n    this.initializeTouchHandler()\r\n    this.touches = {\r\n      start: [],\r\n      move: []\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register pressed keys and notify observers.\r\n   */\r\n  init (): void {\r\n    window.addEventListener('keydown', event => {\r\n      let key = event.key !== ' ' ? event.key : 'space'\r\n      this.state[this.inputMap[key]] = true\r\n      this.notify()\r\n    })\r\n    window.addEventListener('keyup', event => {\r\n      let key = event.key !== ' ' ? event.key : 'space'\r\n      this.state[this.inputMap[key]] = false\r\n      this.notify()\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Maps swipe directions to key press booleans.\r\n   * Allows touch controls on mobile.\r\n   */\r\n  initializeTouchHandler (): void {\r\n    // Register the event listeners\r\n    let button = document.getElementById('move')\r\n    let el = button ? button : window\r\n    el.addEventListener('touchstart', handleTouchStart, false)\r\n    el.addEventListener('touchmove', handleTouchMove, false)\r\n    el.addEventListener('touchend', handleTouchEnd, false)\r\n    el.addEventListener('contextmenu', event => {\r\n      event.preventDefault()\r\n      return false\r\n    })\r\n\r\n    let start = []\r\n    let move = []\r\n    let touchstartX = 0\r\n    let touchstartY = 0\r\n    let toucheMoveX = 0\r\n    let touchMoveY = 0\r\n    let thisInstance = this\r\n\r\n    function handleTouchStart (evt): void {\r\n      evt.preventDefault()\r\n      start = evt.touches\r\n      touchstartX = evt.touches[0].pageX\r\n      touchstartY = evt.touches[0].pageY\r\n    }\r\n\r\n    function handleTouchMove (evt): void {\r\n      thisInstance.reset()\r\n      evt.preventDefault()\r\n      move = evt.changedTouches\r\n      toucheMoveX = evt.touches[0].pageX\r\n      touchMoveY = evt.touches[0].pageY\r\n      for (let i = 0; i < evt.touches.length; i++) {\r\n        // Positive values equals left. Negative values equals right\r\n        if (move[i].pageX < start[i].pageX) {\r\n          thisInstance.state[thisInstance.inputMap['a']] = true\r\n        }\r\n        if (move[i].pageX > start[i].pageX) {\r\n          thisInstance.state[thisInstance.inputMap['d']] = true\r\n        }\r\n        if (move[i].pageY < start[i].pageY) {\r\n          thisInstance.state[thisInstance.inputMap['w']] = true\r\n        }\r\n        if (move[i].pageY > start[i].pageY) {\r\n          thisInstance.state[thisInstance.inputMap['s']] = true\r\n        }\r\n        thisInstance.notify()\r\n      }\r\n    }\r\n\r\n    function handleTouchEnd (evt): void {\r\n      evt.preventDefault()\r\n      thisInstance.reset()\r\n    }\r\n  }\r\n\r\n  shoot (): void {\r\n    this.state[this.inputMap['space']] = true\r\n  }\r\n\r\n  cancelShoot (): void {\r\n    this.state[this.inputMap['space']] = false\r\n  }\r\n\r\n  reset (): void {\r\n    this.state[this.inputMap['w']] = false\r\n    this.state[this.inputMap['a']] = false\r\n    this.state[this.inputMap['s']] = false\r\n    this.state[this.inputMap['d']] = false\r\n  }\r\n}\r\n","import IGameState from '../lib/interfaces/IGameState'\r\nimport IGame from '../lib/interfaces/IGame'\r\nimport ICollisionManager from '../lib/interfaces/ICollisionManager'\r\nimport InputManager from '../lib/client/InputManager'\r\nimport AssetManager, { AssetType } from '../lib/client/AssetManager'\r\nimport { ContextId } from '../enum/ContextId'\r\nimport Settings from '../config/Settings'\r\nimport LegendState from './LegendState'\r\nimport AudioManager from '../lib/client/AudioManager'\r\nimport CollisionManager from '../lib/collision/CollisionManager'\r\nimport * as mapData from '../../public/definitions/maps.json'\r\nimport * as turretData from '../../public/definitions/turrets.json'\r\nimport Tile from '../model/Tile'\r\nimport Turret from '../model/Turret'\r\nimport Dimension from '../lib/geometry/Dimension'\r\nimport Vector2 from '../lib/math/Vector2'\r\nimport { AssetId } from '../enum/AssetId'\r\nimport BuildMenu from '../ui/BuildMenu'\r\n\r\n/**\r\n * Main game Class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class LegendOfTheVoid implements IGame {\r\n  audioManager: AudioManager\r\n  inputManager: InputManager\r\n  assetManager: AssetManager\r\n  collisionManager: ICollisionManager\r\n  state: IGameState\r\n  contexts: Map<ContextId, CanvasRenderingContext2D>\r\n  settings: Settings\r\n  buildMenu: BuildMenu\r\n  private TILE_SIZE = 60\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {Map<ContextId, CanvasRenderingContext2D>} contexts\r\n   * @param {Settings} settings\r\n   */\r\n  constructor (contexts: Map<ContextId, CanvasRenderingContext2D>, settings: Settings) {\r\n    this.audioManager = new AudioManager()\r\n    this.inputManager = new InputManager(settings)\r\n    this.assetManager = new AssetManager(this.audioManager)\r\n    this.state = new LegendState(settings, this.inputManager)\r\n    this.collisionManager = new CollisionManager(this.state.quadTree)\r\n    this.contexts = contexts\r\n    this.settings = settings\r\n    this.buildMenu = new BuildMenu('buildMenu', turretData, this.assetManager)\r\n  }\r\n\r\n  initMap (): void {\r\n    console.log(mapData)\r\n    let y = 0\r\n    mapData[0].tiles.forEach(row => {\r\n      let width = this.TILE_SIZE\r\n      let height = this.TILE_SIZE\r\n      let x = 0\r\n      row.forEach(col => {\r\n        const tile = new Tile(x, y, width, height, this.settings)\r\n        switch (col) {\r\n          case 0:\r\n            tile.blocked = true\r\n            tile.color = '#000000'\r\n            break\r\n          case 1:\r\n            tile.buildable = true\r\n            tile.color = '#ff00ff'\r\n            break\r\n          case 3:\r\n            tile.color = '#00ff00'\r\n            break\r\n          case 4:\r\n            tile.color = '#ff0000'\r\n            break\r\n        }\r\n        this.state.entities.push(tile)\r\n        this.state.renderables.push(tile)\r\n        x += width\r\n      })\r\n      y += height\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Initialize the game.\r\n   */\r\n  init (): void {\r\n    this.assetManager.queueDownload(AssetId.TURRET_LASER, AssetType.SPRITE )\r\n   this.initMap()\r\n    this.assetManager.downloadAll(() => {\r\n      console.log(this.state.renderables)\r\n      this.state.renderables\r\n        .filter(element => {return element.assetId !== AssetId.NONE })\r\n        .forEach(renderable => renderable.asset = this.assetManager.get(renderable.assetId))\r\n      this.state.reset()\r\n      this.buildMenu.init()\r\n    })\r\n  }\r\n\r\n  addTurret(type: string, position: Vector2) {\r\n    let turrets = (<any>turretData)\r\n    let turr = new Turret()\r\n    turr.fromJSON(turrets.filter(turret => {return turret.type === type})[0])\r\n    turr.position = position\r\n    turr.dimension = new Dimension(this.TILE_SIZE, this.TILE_SIZE)\r\n    turr.asset = this.assetManager.get(turr.assetId)\r\n    this.state.entities.push(turr)\r\n    this.state.renderables.push(turr)\r\n  }\r\n\r\n  /**\r\n   * Render current state.\r\n   */\r\n  render (): void {\r\n    this.state.renderables.forEach(renderable => renderable.render(this.contexts.get(renderable.contextId)))\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  clear (): void {\r\n    this.state.renderables.forEach(renderable => renderable.clear(this.contexts.get(renderable.contextId)))\r\n  }\r\n}\r\n","import LegendOfTheVoid from './application/LegendOfTheVoid'\r\nimport GameSettings from './config/Settings'\r\nimport { ContextId } from './enum/ContextId'\r\nimport LegendLoop from './application/LegendLoop'\r\nimport Vector2 from './lib/math/Vector2'\r\n\r\n/**\r\n * Entry script for legend of the void.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  const container = document.getElementById('contents')\r\n  const contexts = new Map<ContextId, CanvasRenderingContext2D>()\r\n  const bgCanvas = document.createElement('canvas')\r\n  const creepCanvas = document.createElement('canvas')\r\n  const playerCanvas = document.createElement('canvas')\r\n  const canvasSize = 660\r\n  container.appendChild(bgCanvas)\r\n  container.appendChild(creepCanvas)\r\n  container.appendChild(playerCanvas)\r\n  contexts.set(ContextId.BACKGROUND, bgCanvas.getContext('2d'))\r\n  contexts.set(ContextId.CREEPS, creepCanvas.getContext('2d'))\r\n  contexts.set(ContextId.PLAYER, playerCanvas.getContext('2d'))\r\n  bgCanvas.width = canvasSize\r\n  bgCanvas.height = canvasSize\r\n  creepCanvas.width = canvasSize\r\n  creepCanvas.height = canvasSize\r\n  playerCanvas.width = canvasSize\r\n  playerCanvas.height = canvasSize\r\n\r\n  bgCanvas.addEventListener('click', ev => {\r\n  })\r\n\r\n  const settings = new GameSettings(bgCanvas)\r\n  const game = new LegendOfTheVoid(contexts, settings)\r\n  const loop = new LegendLoop(game)\r\n\r\n  loop.start()\r\n  game.addTurret(\"laser\", new Vector2(2, 2))\r\n})"],"sourceRoot":""}