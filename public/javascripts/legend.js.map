{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/lib/geometry/Dimension.ts","webpack:///./src/lib/math/Vector2.ts","webpack:///./src/enum/AssetId.ts","webpack:///./src/enum/ContextId.ts","webpack:///./src/lib/entity/Entity.ts","webpack:///./src/lib/collision/HitBox.ts","webpack:///./src/lib/observer/Observable.ts","webpack:///./src/application/LegendLoop.ts","webpack:///./src/enum/Actions.ts","webpack:///./src/config/Settings.ts","webpack:///./src/ui/BuildMenu.ts","webpack:///./src/model/Turret.ts","webpack:///./src/model/Tile.ts","webpack:///./src/lib/collision/CollisionManager.ts","webpack:///./src/lib/audio/Sound.ts","webpack:///./src/lib/client/AudioManager.ts","webpack:///./src/lib/interfaces/ICollideAble.ts","webpack:///./src/lib/collision/QuadTree.ts","webpack:///./src/application/LegendState.ts","webpack:///./src/lib/ajax/Ajax.ts","webpack:///./src/lib/graphics/2D/SpriteSheet.ts","webpack:///./src/lib/client/AssetManager.ts","webpack:///./src/lib/client/InputManager.ts","webpack:///./src/application/LegendOfTheVoid.ts","webpack:///./src/app.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","default","[object Object]","width","height","this","factor","Vector2","x","y","v1","v2","vector","scalar","Error","Math","sqrt","magnitude","mag","divide","max","floor","normalize","multiply","pow","AssetId","ContextId","position","dimension","settings","JSON","stringify","json","keys","forEach","key","Vector2_1","ICollideAble_1","colliding","collidesWith","type","EntityType","BOX","push","PLAYER","other","includes","toString","observers","state","observer","filter","obs","update","game","lastTime","init","running","frameId","requestAnimationFrame","loop","bind","cancelAnimationFrame","stop","start","paused","time","diff","render","Actions","Dimension_1","Actions_1","canvas","gameSize","keyboard","w","UP","DOWN","ArrowUp","LEFT","ArrowDown","RIGHT","space","SHOOT","RESTART","newKey","action","oldKey","findKey","console","log","elementId","turretList","assetManager","element","document","getElementById","turret","turretBox","createElement","labelText","createTextNode","charAt","toUpperCase","slice","image","assetId","toolTipText","classList","add","textContent","description","appendChild","Entity_1","ContextId_1","AssetId_1","damage","TURRET_LASER","super","contextId","ctx","drawImage","asset","clearRect","dt","color","BACKGROUND","NONE","fillStyle","fillRect","quadTree","objects","getAllObjects","length","obj","findObjects","j","isCollideAbleWith","alive","audioContext","masterGain","buffer","gainNode","createGain","gain","connect","playing","source","createBufferSource","Sound_1","initAudioContext","window","AudioContext","webkitAudioContext","effectsGain","ambientGain","destination","e","data","id","callback","decodeAudioData","then","error","ambient","HitBox_1","QuadTree","hitBox","level","maxObjects","maxLevels","nodes","node","clear","returnedObjects","index","getIndex","Array","insert","split","splice","verticalMidpoint","horizontalMidpoint","topQuadrant","bottomQuadrant","subWidth","subHeight","QuadTree_1","Observable_1","inputManager","entities","collideables","movables","renderables","kills","cash","movable","move","entity","points","notify","Ajax","opts","xHttp","XMLHttpRequest","addEventListener","response","open","method","defaults","url","async","setRequestHeader","contentType","responseType","send","frameWidth","frameHeight","framesPerRow","SpriteSheet_1","Ajax_1","AssetType","audioManager","cache","assetsDir","downloadCount","queue","path","item","create","decodeAudio","done","sprite","Image","src","spriteSheet","AUDIO","loadAudio","SPRITE","loadSprite","SPRITE_SHEET","loadSpriteSheet","AUDIO_AMB","createSound","inputMap","initializeTouchHandler","touches","event","button","el","evt","preventDefault","touchstartX","pageX","touchstartY","pageY","thisInstance","reset","changedTouches","toucheMoveX","touchMoveY","InputManager_1","AssetManager_1","LegendState_1","AudioManager_1","CollisionManager_1","mapData","turretData","Tile_1","Turret_1","BuildMenu_1","contexts","TILE_SIZE","collisionManager","buildMenu","tiles","row","col","tile","blocked","buildable","queueDownload","initMap","downloadAll","renderable","turrets","turr","fromJSON","LegendOfTheVoid_1","Settings_1","LegendLoop_1","container","Map","bgCanvas","creepCanvas","playerCanvas","set","getContext","CREEPS","addTurret"],"mappings":"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","file":"legend.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 26);\n","/**\r\n * Dimension class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Dimension {\r\n  width: number\r\n  height: number\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {number} width Width\r\n   * @param {number} height Height\r\n   */\r\n  constructor (width: number, height: number) {\r\n    this.width = width\r\n    this.height = height\r\n  }\r\n\r\n  /**\r\n   * Scale the dimension.\r\n   *\r\n   * @param {number} factor\r\n   */\r\n  public scale (factor: number) {\r\n    this.width *= factor\r\n    this.height *= factor\r\n  }\r\n}\r\n","import IVector from '../interfaces/IVector'\r\n\r\n/**\r\n * 2D vector implementation.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Vector2 implements IVector {\r\n  public x: number\r\n  public y: number\r\n\r\n  /**\r\n   * Default constructor. Sets x and y values.\r\n   *\r\n   * @param {number} x initial x value\r\n   * @param {number} y initial y value\r\n   */\r\n  constructor (x: number, y: number) {\r\n    this.x = x\r\n    this.y = y\r\n  }\r\n\r\n  /**\r\n   * Static addVector method to combine two vectors into a new one.\r\n   *\r\n   * @param {Vector2} v1 first vector\r\n   * @param {Vector2} v2 second vector\r\n   * @returns {Vector2} combined vector\r\n   */\r\n  static addVector (v1: Vector2, v2: Vector2): Vector2 {\r\n    return new Vector2(v1.x + v2.x, v1.y + v2.y)\r\n  }\r\n\r\n  /**\r\n   * Subtract two vector from each other and put the result into a new vector.\r\n   *\r\n   * @param {Vector2} v1 first vector\r\n   * @param {Vector2} v2 second vector\r\n   * @returns {Vector2} resulting vector\r\n   */\r\n  static subtractVector (v1: Vector2, v2: Vector2): Vector2 {\r\n    return new Vector2(v1.x - v2.x, v1.y - v2.y)\r\n  }\r\n\r\n  /**\r\n   * Multiplies a vector with a scalar and returns the resulting vector.\r\n   *\r\n   * @param {Vector2} vector initial vector\r\n   * @param {number} scalar scalar to scale the vector\r\n   * @returns {Vector2} the resulting vector\r\n   */\r\n  static multiply (vector: Vector2, scalar: number): Vector2 {\r\n    return new Vector2(vector.x * scalar, vector.y * scalar)\r\n  }\r\n\r\n  /**\r\n   * Divides a vector by a scalar and returns the result in a new vector.\r\n   * Throws error if trying to divide by zero.\r\n   *\r\n   * @param {Vector2} vector vector to divide\r\n   * @param {number} scalar scalar used to divide vector\r\n   * @returns {Vector2} resulting vector\r\n   */\r\n  static divide (vector: Vector2, scalar: number): Vector2 {\r\n    if (scalar === 0) {\r\n      throw new Error('cannot divide vector by scalar with value \"0\"')\r\n    }\r\n    return new Vector2(vector.x / scalar, vector.y / scalar)\r\n  }\r\n\r\n  /**\r\n   * Set vector with both x and y values.\r\n   *\r\n   * @param {number} x new x value\r\n   * @param {number} y new y value\r\n   */\r\n  set (x: number, y: number): void {\r\n    this.x = x\r\n    this.y = y\r\n  }\r\n\r\n  /**\r\n   * Set vector location to another vector.\r\n   *\r\n   * @param {Vector2} vector other vector\r\n   */\r\n  setVector (vector: Vector2): void {\r\n    this.x = vector.x\r\n    this.y = vector.y\r\n  }\r\n\r\n  /**\r\n   * Add x and y to this vector.\r\n   *\r\n   * @param {number} x x value\r\n   * @param {number} y y value\r\n   */\r\n  add (x: number, y: number): void {\r\n    this.x += x\r\n    this.y += y\r\n  }\r\n\r\n  /**\r\n   * Add vector to this vector.\r\n   *\r\n   * @param {Vector2} vector other vector\r\n   */\r\n  addVector (vector: Vector2): void {\r\n    this.x += vector.x\r\n    this.y += vector.y\r\n  }\r\n\r\n  /**\r\n   * Subtraxt x and y from this vector.\r\n   *\r\n   * @param {number} x x value\r\n   * @param {number} y y value\r\n   */\r\n  subtract (x: number, y: number): void {\r\n    this.x -= x\r\n    this.y -= y\r\n  }\r\n\r\n  /**\r\n   * Subtract a vector from this vector.\r\n   *\r\n   * @param {Vector2} vector other vector\r\n   */\r\n  subtractVector (vector: Vector2): void {\r\n    this.x -= vector.x\r\n    this.y -= vector.y\r\n  }\r\n\r\n  /**\r\n   * Multiply this vector by scalar.\r\n   *\r\n   * @param scalar scalar to multiply the vector\r\n   */\r\n  multiply (scalar: number): void {\r\n    this.x *= scalar\r\n    this.y *= scalar\r\n  }\r\n\r\n  /**\r\n   * Divides this vector by a scalar.\r\n   * Throws error when trying to divide by zero.\r\n   *\r\n   * @param {number} scalar scalar used to divide this vector\r\n   */\r\n  divide (scalar: number): void {\r\n    if (scalar === 0) {\r\n      throw new Error('cannot divide vector by \"0\"')\r\n    }\r\n    this.x /= scalar\r\n    this.y /= scalar\r\n  }\r\n\r\n  /**\r\n   * Get the magnitude / elementsCount of this vector.\r\n   *\r\n   * @returns {number} magnitude / elementsCount of this vector\r\n   */\r\n  mag (): number {\r\n    return Math.sqrt(this.x * this.x + this.y * this.y)\r\n  }\r\n\r\n  /**\r\n   * Negate the x and y values of this vector and return the result as a new Vector2 object.\r\n   *\r\n   * @returns {Vector2}\r\n   */\r\n  negative (): Vector2 {\r\n    return new Vector2(-this.x, -this.y)\r\n  }\r\n\r\n  /**\r\n   * Normalize the vector.\r\n   */\r\n  normalize (): void {\r\n    let magnitude = this.mag()\r\n    if (magnitude !== 0) {\r\n      this.divide(magnitude)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Limit the vector to a maximum elementsCount.\r\n   *\r\n   * @param {number} max maximum elementsCount\r\n   */\r\n  limit (max: number): void {\r\n    if (Math.floor(this.mag()) > max) {\r\n      this.normalize()\r\n      this.multiply(max)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the distance of this vector to another vector.\r\n   *\r\n   * @param {Vector2} vector other vector\r\n   * @returns {number} calculated distance\r\n   */\r\n  distanceTo (vector: Vector2): number {\r\n    return Math.sqrt(Math.pow(vector.x - this.x, 2) + Math.pow(vector.y - this.y, 2))\r\n  }\r\n\r\n  /**\r\n   * Get the dot product between this vector and another vector.\r\n   *\r\n   * @param {Vector2} vector\r\n   * @returns {number} the dot product of this vector and the one passed as param.\r\n   */\r\n  dot (vector: Vector2): number {\r\n    return this.x * vector.x + this.y * vector.y\r\n  }\r\n\r\n  floor (): void {\r\n    this.x = Math.floor(this.x)\r\n    this.x = Math.floor(this.x)\r\n  }\r\n\r\n  /**\r\n   * Create a clone of this vector.\r\n   *\r\n   * @returns {Vector2} cloned vector\r\n   */\r\n  clone (): Vector2 {\r\n    return new Vector2(this.x, this.y)\r\n  }\r\n}\r\n","/**\r\n *\r\n */\r\nexport enum AssetId {\r\n  BASE_VOID = 'base-void',\r\n  TURRET_LASER = 'turret-laser',\r\n  CREEP_VOID_LEECHER = 'creep-void-leecher',\r\n  NONE = 'none'\r\n}\r\n","export enum ContextId {\r\n  BACKGROUND = 'background', CREEPS ='creeps' , PLAYER = 'player'\r\n}\r\n","import Vector2 from '../math/Vector2'\r\nimport Settings from '../../config/Settings'\r\nimport Dimension from '../geometry/Dimension'\r\nimport IJSONSerializable from '../interfaces/IJSONSerializable'\r\n\r\n/**\r\n * Base entity class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Entity implements IJSONSerializable {\r\n  id: string\r\n  dimension: Dimension\r\n  settings: Settings\r\n  position: Vector2\r\n\r\n  /**\r\n   * Constructor. Sets position and dimension of entity.\r\n   *\r\n   * @param {Vector2} position Initial position\r\n   * @param {Dimension} dimension Initial dimension\r\n   * @param {Settings} settings\r\n   */\r\n  constructor (position?: Vector2, dimension?: Dimension, settings?: Settings) {\r\n    this.position = position\r\n    this.dimension = dimension\r\n    this.settings = settings\r\n  }\r\n\r\n  public init (): void {\r\n    throw new Error('Implement in subclass.')\r\n  }\r\n\r\n  /**\r\n   * Create a JSON string from this object.\r\n   * \r\n   * @returns {string} The JSoN string\r\n   */\r\n  public toJSON (): string {\r\n    return JSON.stringify(this)\r\n  }\r\n\r\n  /**\r\n   * Load data into this object from JSON.\r\n   *\r\n   * @param json JSON string\r\n   */\r\n  public fromJSON (json: any): void {\r\n    // Map parsed object to the attributes of this entity.\r\n    Object.keys(json).forEach(key => {\r\n      if ( this.hasOwnProperty( key ) ) {\r\n        this[key] = json[key]\r\n      }\r\n    })\r\n  }\r\n}\r\n","import Vector2 from '../math/Vector2'\r\nimport ICollideAble, { EntityType } from '../interfaces/ICollideAble'\r\n\r\n/**\r\n * Hitbox used for defining collision boundaries.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class HitBox implements ICollideAble {\r\n  type: EntityType\r\n  collidesWith\r\n  colliding: boolean\r\n  position: Vector2\r\n  width: number\r\n  height: number\r\n\r\n  /**\r\n   * Initializes position and dimension.\r\n   * @param {number} x position x\r\n   * @param {number} y position y\r\n   * @param {number} width dimension width\r\n   * @param {number} height dimension height\r\n   */\r\n  constructor (x, y, width, height) {\r\n    this.position = new Vector2(x, y)\r\n    this.width = width\r\n    this.height = height\r\n    this.colliding = false\r\n    this.collidesWith = []\r\n    this.type = EntityType.BOX\r\n    this.collidesWith.push(EntityType.PLAYER)\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {ICollideAble} other\r\n   * @returns {boolean}\r\n   */\r\n  isCollideAbleWith (other: ICollideAble): boolean {\r\n    return this.collidesWith.includes(other.type.toString())\r\n  }\r\n}\r\n","import Observer from './Observer'\r\n\r\n/**\r\n * Observable class to be extended by a class that should be observed.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Observable {\r\n  protected observers: Observer[]\r\n  protected state: any\r\n\r\n  constructor () {\r\n    this.observers = []\r\n    this.state = {}\r\n  }\r\n\r\n  /**\r\n   * Register an observer on this observable.\r\n   *\r\n   * @param {Observer} observer Object implementing the Observer interface\r\n   */\r\n  register (observer: Observer): void {\r\n    this.observers.push(observer)\r\n  }\r\nd\r\n  /**\r\n   * Remove an observer from this observables observers list.\r\n   *\r\n   * @param {Observer} observer Object implementing the Observer interface\r\n   */\r\n  unRegister (observer: Observer): void {\r\n    this.observers = this.observers.filter(obs => {return obs !== observer})\r\n  }\r\n\r\n  /**\r\n   * Notify all observers.\r\n   */\r\n  notify (): void {\r\n    this.observers.forEach(observer => observer.update(this.state))\r\n  }\r\n}\r\n","/**\r\n * Legend of the void game loop class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nimport IGameLoop from '../lib/interfaces/IGameLoop'\r\nimport IGame from '../lib/interfaces/IGame'\r\n\r\nexport default class LegendLoop implements IGameLoop {\r\n  public game: IGame\r\n  public lastTime: number\r\n  public frameId: number\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {IGame} game Game instance\r\n   */\r\n  constructor (game: IGame) {\r\n    this.game = game\r\n    this.lastTime = null\r\n  }\r\n\r\n  /**\r\n   * Start the game loop.\r\n   */\r\n  public start (): void {\r\n    this.game.init()\r\n    this.game.state.running = true\r\n    this.frameId = requestAnimationFrame(this.loop.bind(this))\r\n  }\r\n\r\n  /**\r\n   * Stop the game loop.\r\n   */\r\n  public stop (): void {\r\n    this.game.state.running = false\r\n    if (this.frameId) {\r\n      cancelAnimationFrame(this.frameId)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop the game loop and start it again.\r\n   */\r\n  public restart (): void {\r\n    this.stop()\r\n    this.start()\r\n  }\r\n\r\n  /**\r\n   * Pause/unpause game.\r\n   */\r\n  public togglePause (): void {\r\n    this.game.state.paused = !this.game.state.paused\r\n  }\r\n\r\n  /**\r\n   * Main loop executing update and render methods.\r\n   */\r\n  public loop (time: number): void {\r\n    if (this.game.state.running) {\r\n      if (!this.game.state.paused) {\r\n        if (this.lastTime !== null) {\r\n          const diff = time - this.lastTime\r\n          this.game.state.update(diff / 1000)\r\n        }\r\n        this.lastTime = time\r\n        this.game.render()\r\n        this.frameId = requestAnimationFrame(this.loop.bind(this))\r\n      }\r\n    }\r\n  }\r\n}\r\n","export enum Actions {\r\n  UP = 'UP',\r\n  DOWN = 'DOWN',\r\n  LEFT = 'LEFT',\r\n  RIGHT = 'RIGHT',\r\n  SHOOT = 'SHOOT',\r\n  RESTART = 'RESTART',\r\n  ROTATE_LEFT = 'R-LEFT',\r\n  ROTATE_RIGHT = 'R-RIGHT'\r\n}\r\n","import Dimension from '../lib/geometry/Dimension'\r\nimport { Actions } from '../enum/Actions'\r\nimport Player from '../model/Player'\r\n/**\r\n * Pong game settings.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Settings {\r\n  gameSize: Dimension\r\n  canvas: HTMLCanvasElement\r\n  keyboard\r\n  player\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {HTMLCanvasElement} canvas\r\n   */\r\n  constructor (canvas: HTMLCanvasElement) {\r\n    this.gameSize = new Dimension(canvas.width, canvas.height)\r\n    this.canvas = canvas\r\n    this.keyboard = {\r\n      'w': Actions.UP,\r\n      's': Actions.DOWN,\r\n      'ArrowUp': Actions.LEFT,\r\n      'ArrowDown': Actions.RIGHT,\r\n      'space': Actions.SHOOT,\r\n      'r': Actions.RESTART\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param value\r\n   * @returns {string}\r\n   */\r\n  findKey (value): string {\r\n    return Object.keys(this.keyboard).filter(key => this.keyboard[key] === value)[0]\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param newKey\r\n   * @param {Actions} action\r\n   */\r\n  setKey (newKey, action: Actions): void {\r\n    let oldKey = this.findKey(action)\r\n    if (newKey !== oldKey) {\r\n      console.log('old:' + oldKey, ' new: ' + newKey + ' value: ' + action)\r\n      this.keyboard[newKey] = this.keyboard[oldKey]\r\n      delete this.keyboard[oldKey]\r\n    }\r\n  }\r\n}\r\n","import IGameState from '../lib/interfaces/IGameState'\r\nimport Turret from '../model/Turret'\r\nimport AssetManager from '../lib/client/AssetManager'\r\n\r\n/** \r\n * Build menu for building Towers etc.\r\n * \r\n * @author Daniel Peters\r\n * @version 1.0\r\n*/\r\nexport default class BuildMenu {\r\n  element: HTMLElement\r\n  state: IGameState\r\n  turretList: Turret[]\r\n  assetManager: AssetManager\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {string} elementId\r\n   * @param {Turret[]} turretList\r\n   * @param assetManager\r\n   */\r\n  constructor (elementId: string, turretList, assetManager: AssetManager) {\r\n    this.element = document.getElementById(elementId)\r\n    this.turretList = turretList\r\n    this.assetManager = assetManager\r\n  }\r\n\r\n  /**\r\n   * Initialize the menu.\r\n   */\r\n  init (): void {\r\n    this.turretList.forEach(turret => {\r\n      const turretBox = document.createElement('div')\r\n      const labelText = document.createTextNode(turret.type.charAt(0).toUpperCase() + turret.type.slice(1))\r\n      const image = this.assetManager.get(turret.assetId)\r\n      const toolTipText = document.createElement('span')\r\n      toolTipText.classList.add('tooltiptext')\r\n      toolTipText.textContent = turret.description\r\n      turretBox.classList.add('tooltip')\r\n      turretBox.classList.add('build-box')\r\n      turretBox.appendChild(image)\r\n      turretBox.appendChild(labelText)\r\n      turretBox.appendChild(toolTipText)\r\n      this.element.appendChild(turretBox)\r\n    })\r\n  }\r\n}\r\n","import Entity from '../lib/entity/Entity'\r\nimport Vector2 from '../lib/math/Vector2'\r\nimport Dimension from '../lib/geometry/Dimension'\r\nimport Settings from '../config/Settings'\r\nimport IRenderable from '../lib/interfaces/IRenderable'\r\nimport IMovable from '../lib/interfaces/IMovable'\r\nimport { ContextId } from '../enum/ContextId'\r\nimport { TurretType } from '../enum/TurretType'\r\nimport { AssetId } from '../enum/AssetId'\r\n\r\n/**\r\n * Turret class.\r\n * \r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Turret extends Entity implements IRenderable, IMovable {\r\n  type: TurretType\r\n  description: string\r\n  assetId: AssetId\r\n  damage: number\r\n  rate: number\r\n  range: number\r\n  asset\r\n  contextId: ContextId\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {number} x Starting position on x axis\r\n   * @param {number} y Starting position on y axis\r\n   * @param {number} width Turret width\r\n   * @param {number} height Turret height\r\n   * @param {number} damage Turret attack\r\n   * @param {Settings} settings Game settings.\r\n   * @param {TurretType} type\r\n   * @param {AssetId} assetId\r\n   */\r\n  constructor (x?: number, y?: number, width?: number, height?: number,\r\n               damage?: number, settings?: Settings, type?: TurretType, assetId: AssetId = AssetId.TURRET_LASER) {\r\n    super(new Vector2(x, y), new Dimension(width, height), settings)\r\n    this.type = type\r\n    this.damage = damage\r\n    this.contextId = ContextId.PLAYER\r\n    this.assetId = assetId\r\n  }\r\n\r\n  public init (): void {\r\n    \r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {CanvasRenderingContext2D} ctx \r\n   */\r\n  public render (ctx: CanvasRenderingContext2D) {\r\n    ctx.drawImage(this.asset, this.position.x, this.position.y, this.dimension.width, this.dimension.height)\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {CanvasRenderingContext2D} ctx \r\n   */\r\n  public clear (ctx: CanvasRenderingContext2D) {\r\n    ctx.clearRect(this.position.x, this.position.y, this.dimension.width, this.dimension.height)\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {number} dt \r\n   */\r\n  public move (dt: number) {\r\n\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  private shoot (): void {\r\n\r\n  }\r\n}\r\n","import Entity from '../lib/entity/Entity'\r\nimport Settings from '../config/Settings'\r\nimport Vector2 from '../lib/math/Vector2'\r\nimport Dimension from '../lib/geometry/Dimension'\r\nimport Turret from './Turret'\r\nimport IRenderable from '../lib/interfaces/IRenderable'\r\nimport { ContextId } from '../enum/ContextId'\r\nimport { AssetId } from '../enum/AssetId'\r\n\r\n/**\r\n * 2D Tower defense tile class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Tile extends Entity implements IRenderable {\r\n  contextId: ContextId\r\n  assetId: AssetId\r\n  asset\r\n  blocked: boolean\r\n  buildable: boolean\r\n  turret: Turret\r\n  color: string\r\n\r\n  /**\r\n   * Conscrutor.\r\n   *\r\n   * @param x\r\n   * @param y\r\n   * @param width\r\n   * @param height\r\n   * @param settings\r\n   */\r\n  constructor (x: number, y: number, width: number, height: number, settings: Settings) {\r\n    super(new Vector2(x, y), new Dimension(width, height), settings)\r\n    this.color = '#ffffff'\r\n    this.contextId = ContextId.BACKGROUND\r\n    this.assetId = AssetId.NONE\r\n  }\r\n\r\n  init (): void {\r\n\r\n  }\r\n\r\n  render (ctx: CanvasRenderingContext2D): void {\r\n    ctx.fillStyle = this.color\r\n    ctx.fillRect(this.position.x, this.position.y, this.dimension.width, this.dimension.height)\r\n  }\r\n\r\n  clear (ctx: CanvasRenderingContext2D): void {\r\n    ctx.clearRect(this.position.x, this.position.y, this.dimension.width, this.dimension.height)\r\n  }\r\n}\r\n","import QuadTree from './QuadTree'\r\nimport ICollisionManager from '../interfaces/ICollisionManager'\r\n\r\n/**\r\n * Collision Manager.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class CollisionManager implements ICollisionManager {\r\n  quadTree: QuadTree\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {QuadTree} quadTree\r\n   */\r\n  constructor (quadTree: QuadTree) {\r\n    this.quadTree = quadTree\r\n  }\r\n\r\n  /**\r\n   * Collision detection algorithm.\r\n   */\r\n  detectCollision (): void {\r\n    let objects = []\r\n    this.quadTree.getAllObjects(objects)\r\n    for (let i = 0; i < objects.length; i++) {\r\n      let obj = []\r\n      this.quadTree.findObjects(obj, objects[i])\r\n\r\n      for (let j = 0; j < obj.length; j++) {\r\n        if (objects[i].isCollideAbleWith(obj[j]) &&\r\n          (Math.floor(objects[i].position.x) < Math.floor(obj[j].position.x) + obj[j].dimension.width &&\r\n            Math.floor(objects[i].position.x) + objects[i].dimension.width > Math.floor(obj[j].position.x) &&\r\n            Math.floor(objects[i].position.y) < Math.floor(obj[j].position.y) + obj[j].dimension.height &&\r\n            Math.floor(objects[i].position.y) + objects[i].dimension.height > Math.floor(obj[j].position.y))\r\n        && objects[i].alive && obj[j].alive) {\r\n          console.log(objects[i])\r\n          objects[i].colliding = true\r\n          obj[j].colliding = true\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Sound class used to play a sound from a file.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Sound {\r\n  audioContext: AudioContext\r\n  source: AudioBufferSourceNode\r\n  gainNode: GainNode\r\n  masterGain: GainNode\r\n  buffer\r\n  playing: boolean\r\n\r\n  /**\r\n   *\r\n   * @param audioContext\r\n   * @param {GainNode} masterGain\r\n   * @param buffer\r\n   */\r\n  constructor (audioContext, masterGain: GainNode, buffer) {\r\n    this.audioContext = audioContext\r\n    this.masterGain = masterGain\r\n    this.buffer = buffer\r\n    this.gainNode = this.audioContext.createGain()\r\n    this.gainNode.gain.value = 0.2\r\n    this.gainNode.connect(this.masterGain)\r\n    this.playing = false\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {boolean} loop\r\n   */\r\n  play (loop = false): void {\r\n    this.source = this.audioContext.createBufferSource()\r\n    this.source.buffer = this.buffer\r\n    this.source.loop = loop\r\n    this.source.connect(this.gainNode)\r\n    this.source.start(0)\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  stop (): void {\r\n    if (this.source) {\r\n      this.source.stop(0)\r\n    }\r\n  }\r\n}\r\n","import Sound from '../audio/Sound'\r\n\r\n/**\r\n * Audio manager class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class AudioManager {\r\n  private audioContext: AudioContext\r\n  private masterGain: GainNode\r\n  private effectsGain: GainNode\r\n  private ambientGain: GainNode\r\n\r\n  /**\r\n   *\r\n   */\r\n  constructor () {\r\n    this.initAudioContext()\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  initAudioContext (): void {\r\n    try {\r\n      // Fix for browsers using prefixes\r\n      window.AudioContext = window.AudioContext || webkitAudioContext\r\n      this.audioContext = new AudioContext()\r\n      this.masterGain = this.audioContext.createGain()\r\n      this.effectsGain = this.audioContext.createGain()\r\n      this.ambientGain = this.audioContext.createGain()\r\n      this.masterGain.gain.value = 1\r\n      this.masterGain.connect(this.audioContext.destination)\r\n      this.effectsGain.connect(this.masterGain)\r\n      this.ambientGain.connect(this.masterGain)\r\n      this.ambientGain.gain.value = 1\r\n      this.effectsGain.gain.value = 1\r\n    } catch (e) {\r\n      console.log('Web Audio API is not supported in this browser')\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param data\r\n   * @param id\r\n   * @param callback\r\n   */\r\n  decodeAudio (data, id, callback): void {\r\n    this.audioContext.decodeAudioData(data).then(\r\n      buffer => callback(buffer),\r\n      error => { console.log('Error with decoding audio data' + error) }\r\n    )\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {number} value\r\n   */\r\n  adjustMasterVolume (value: number): void {\r\n    this.masterGain.gain.value = value\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {number} value\r\n   */\r\n  adjustAmbientVolume (value: number): void {\r\n    this.ambientGain.gain.value = value\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {number} value\r\n   */\r\n  adjustEffectsVolume (value: number): void {\r\n    this.effectsGain.gain.value = value\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param buffer\r\n   * @param {boolean} ambient\r\n   * @returns {Sound}\r\n   */\r\n  createSound (buffer, ambient: boolean): Sound {\r\n    return new Sound(this.audioContext, ambient ? this.ambientGain : this.effectsGain, buffer)\r\n  }\r\n}\r\n","export enum EntityType {\r\n  PLAYER = 'ship',\r\n  ENEMY = 'enemy',\r\n  ENEMY_BULLET = 'bulletEnemy',\r\n  PLAYER_BULLET = 'bullet',\r\n  BACKGROUND = 'background',\r\n  MAP = 'map',\r\n  GAME_OVER = 'gameOver',\r\n  LASER = 'laser',\r\n  MAIN_THEME = 'shockWave',\r\n  EXPLOSION_I = 'explosion1',\r\n  EXPLOSION_II = 'explosion2',\r\n  BOX = 'box',\r\n  ARENA = 'arena'\r\n}\r\n\r\n/**\r\n * Interface for collideable entities.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default interface ICollideAble {\r\n  collidesWith: EntityType[]\r\n  colliding: boolean\r\n  type: EntityType\r\n\r\n  /**\r\n   *\r\n   * @param {ICollideAble} other\r\n   * @returns {boolean}\r\n   */\r\n  isCollideAbleWith (other: ICollideAble): boolean\r\n}\r\n","import HitBox from './HitBox'\r\nimport ICollideAble from '../interfaces/ICollideAble'\r\n\r\n/**\r\n * QuadTree class used to optimize collision checking.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class QuadTree {\r\n  level: number\r\n  maxObjects: number\r\n  maxLevels: number\r\n  hitBox: HitBox\r\n  objects: ICollideAble[]\r\n  nodes: QuadTree[]\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {HitBox} hitBox\r\n   * @param {number} level\r\n   */\r\n  constructor (hitBox = new HitBox(0, 0, 0, 0), level = 0) {\r\n    this.level = level\r\n    this.maxObjects = 10\r\n    this.maxLevels = 5\r\n    this.hitBox = hitBox\r\n    this.objects = []\r\n    this.nodes = []\r\n  }\r\n\r\n  /**\r\n   * Clears the QuadTree and its sub nodes from all models objects.\r\n   */\r\n  clear (): void {\r\n    this.objects = []\r\n    this.nodes.forEach(node => node.clear())\r\n    this.nodes = []\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param returnedObjects\r\n   * @returns {any}\r\n   */\r\n  getAllObjects (returnedObjects) {\r\n    this.nodes.forEach(node => node.getAllObjects(returnedObjects))\r\n    this.objects.forEach(object => returnedObjects.push(object))\r\n    return returnedObjects\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param returnedObjects\r\n   * @param object\r\n   * @returns {any}\r\n   */\r\n  findObjects (returnedObjects, object) {\r\n    if (typeof object === 'undefined') {\r\n      console.log('UNDEFINED OBJECT')\r\n      return\r\n    }\r\n    let index = this.getIndex(object)\r\n    if (index !== -1 && this.nodes.length) {\r\n      this.nodes[index].findObjects(returnedObjects, object)\r\n    }\r\n    this.objects.forEach(obj => returnedObjects.push(obj))\r\n    return returnedObjects\r\n  }\r\n\r\n  /**\r\n   * Insert an object into the QuadTree.\r\n   *\r\n   * @param object\r\n   */\r\n  insert (object): void {\r\n    if (typeof object === 'undefined') {\r\n      return\r\n    }\r\n    if (object instanceof Array) {\r\n      object.forEach(element => this.insert(element))\r\n      return\r\n    }\r\n    if (this.nodes.length > 0) {\r\n      let index = this.getIndex(object)\r\n      // Only addVector the object to a sub node if it can fit completely within one\r\n      if (index !== -1) {\r\n        this.nodes[index].insert(object)\r\n        return\r\n      }\r\n    }\r\n    this.objects.push(object)\r\n\r\n    if (this.objects.length > this.maxObjects && this.level < this.maxLevels) {\r\n      if (typeof this.nodes[0] === 'undefined') {\r\n        this.split()\r\n      }\r\n      let i = 0\r\n      while (i < this.objects.length) {\r\n        let index = this.getIndex(this.objects[i])\r\n        if (index !== -1) {\r\n          this.nodes[index].insert((this.objects.splice(i, 1))[0])\r\n        } else {\r\n          i++\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the index of an object from the QuadTree.\r\n   *\r\n   * @param object\r\n   * @returns {number}\r\n   */\r\n  getIndex (object): number {\r\n    let index = -1\r\n    let verticalMidpoint = this.hitBox.position.x + this.hitBox.width / 2\r\n    let horizontalMidpoint = this.hitBox.position.y + this.hitBox.height / 2\r\n    // Object can fit completely within the top quadrant\r\n    let topQuadrant = (object.position.y < horizontalMidpoint && object.position.y + object.height < horizontalMidpoint)\r\n    // Object can fit completely within the bottom quadrant\r\n    let bottomQuadrant = (object.position.y > horizontalMidpoint)\r\n    // Object can fit completely within the left quadrants\r\n    if (object.position.x < verticalMidpoint && object.position.x + object.width < verticalMidpoint) {\r\n      if (topQuadrant) {\r\n        index = 1\r\n      } else if (bottomQuadrant) {\r\n        index = 2\r\n      }\r\n    } else if (object.position.x > verticalMidpoint) { // Object can fix completely within the right quadrants\r\n      if (topQuadrant) {\r\n        index = 0\r\n      } else if (bottomQuadrant) {\r\n        index = 3\r\n      }\r\n    }\r\n    return index\r\n  }\r\n\r\n  /**\r\n   * Split the tree on demand.\r\n   */\r\n  split (): void {\r\n    let subWidth = (this.hitBox.width / 2) | 0\r\n    let subHeight = (this.hitBox.height / 2) | 0\r\n    this.nodes[0] = new QuadTree(\r\n      new HitBox(this.hitBox.position.x + subWidth, this.hitBox.position.y, subWidth, subHeight), this.level + 1)\r\n    this.nodes[1] = new QuadTree(\r\n      new HitBox(this.hitBox.position.x, this.hitBox.position.y, subWidth, subHeight), this.level + 1)\r\n    this.nodes[2] = new QuadTree(\r\n      new HitBox(this.hitBox.position.x, this.hitBox.position.y + subHeight, subWidth, subHeight), this.level + 1)\r\n    this.nodes[3] = new QuadTree(\r\n      new HitBox(this.hitBox.position.x + subWidth, this.hitBox.position.y + subHeight, subWidth, subHeight), this.level + 1)\r\n  }\r\n}\r\n","import IGameState from '../lib/interfaces/IGameState'\r\nimport QuadTree from '../lib/collision/QuadTree'\r\nimport Entity from '../lib/entity/Entity'\r\nimport ICollideAble from '../lib/interfaces/ICollideAble'\r\nimport Settings from '../config/Settings'\r\nimport InputManager from '../lib/client/InputManager'\r\nimport IRenderable from '../lib/interfaces/IRenderable'\r\nimport IMovable from '../lib/interfaces/IMovable'\r\nimport Tile from '../model/Tile'\r\nimport Observable from '../lib/observer/Observable'\r\nimport HitBox from '../lib/collision/HitBox'\r\n\r\n/**\r\n * Legend of the void game state class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class LegendState extends Observable implements IGameState {\r\n  public running: boolean\r\n  public paused: boolean\r\n  public quadTree: QuadTree\r\n  public entities: Entity[]\r\n  public collideables: ICollideAble[]\r\n  public movables: IMovable[]\r\n  public renderables: IRenderable[]\r\n  public map: Tile[]\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {Settings} settings\r\n   * @param {InputManager} inputManager\r\n   */\r\n  constructor (settings: Settings, inputManager: InputManager) {\r\n    super()\r\n    this.running = false\r\n    this.paused = false\r\n    this.entities = []\r\n    this.quadTree = new QuadTree(new HitBox(0, 0, settings.gameSize.width, settings.gameSize.height))\r\n    this.collideables = []\r\n    this.movables = []\r\n    this.renderables = []\r\n    this.state = {\r\n      kills: 0,\r\n      cash: 0\r\n    }\r\n  }\r\n\r\n  public update (dt: number): void {\r\n    this.movables.forEach(movable => movable.move(dt))\r\n  }\r\n\r\n  public reset (): void {\r\n    this.entities.forEach(entity => entity.init())\r\n  }\r\n\r\n  public scorePoints (points: number): void {\r\n    this.state.cash += points\r\n    this.state.kills++\r\n    this.notify()\r\n  }\r\n}\r\n","export default class Ajax {\r\n  private static defaults = {\r\n    url: '',\r\n    method: 'GET',\r\n    contentType: 'text/html',\r\n    async: true,\r\n    data: null\r\n  }\r\n\r\n  /**\r\n   * Create and send an XML-HTTP request.\r\n   * Requires an options object.\r\n   *\r\n   * @param opts Possible option properties:\r\n   * url = url to send the request to.\r\n   * method = request method. GET, POST, PUT, DELETE.\r\n   * contentType = specify the content type of the request.\r\n   * async = boolean flag for async calls. Defaults to true.\r\n   * data = request body.\r\n   * @param callback success callback function\r\n   */\r\n  public static create (opts, callback): void {\r\n    let xHttp = new XMLHttpRequest()\r\n    xHttp.addEventListener('load', () => {\r\n      callback(xHttp.response)\r\n    })\r\n    xHttp.open(\r\n      opts.method ? opts.method : Ajax.defaults.method,\r\n      opts.url ? opts.url : Ajax.defaults.url,\r\n      opts.async ? opts.async : Ajax.defaults.async\r\n    )\r\n    if (opts.hasOwnProperty('contentType')) {\r\n      xHttp.setRequestHeader(\r\n        'Content-Type',\r\n        opts.contentType ? opts.contentType : Ajax.defaults.contentType\r\n      )\r\n    }\r\n    if (opts.hasOwnProperty('responseType')) {\r\n      xHttp.responseType = opts.responseType\r\n    }\r\n    if (opts.hasOwnProperty('data') && typeof opts.data === 'object') {\r\n      opts.data = JSON.stringify(opts.data)\r\n    }\r\n    xHttp.send(opts.data ? opts.data : null)\r\n  }\r\n}\r\n","/**\r\n * Sprite sheet definition.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class SpriteSheet {\r\n  public image: HTMLImageElement\r\n  public frameWidth: number\r\n  public frameHeight: number\r\n  public framesPerRow: number\r\n\r\n  /**\r\n   * Constructor. Sets frame dimensions and calculates number of frames.\r\n   *\r\n   * @param image\r\n   * @param frameWidth\r\n   * @param frameHeight\r\n   */\r\n  constructor (image: HTMLImageElement, frameWidth, frameHeight) {\r\n    this.image = image\r\n    this.frameWidth = frameWidth\r\n    this.frameHeight = frameHeight\r\n    this.framesPerRow = Math.floor(image.width / frameWidth)\r\n  }\r\n}\r\n","import SpriteSheet from '../graphics/2D/SpriteSheet'\r\nimport Ajax from '../ajax/Ajax'\r\nimport { AssetId } from '../../enum/AssetId'\r\nimport AudioManager from './AudioManager'\r\n\r\nexport enum AssetType {\r\n  SPRITE = 'sprite', SPRITE_SHEET = 'sprite-sheet', AUDIO = 'audio', AUDIO_AMB = 'audio-amb'\r\n}\r\n\r\n/**\r\n * Asset manager Class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class AssetManager {\r\n  private cache\r\n  private assetsDir: string\r\n  private queue\r\n  private downloadCount: number\r\n  private audioManager: AudioManager\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {AudioManager} audioManager\r\n   */\r\n  constructor (audioManager: AudioManager) {\r\n    this.cache = []\r\n    this.assetsDir = 'assets/'\r\n    this.downloadCount = 0\r\n    this.queue = []\r\n    this.audioManager = audioManager\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns {boolean}\r\n   */\r\n  done (): boolean {\r\n    return this.downloadCount === this.queue.length\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {AssetId} id\r\n   * @param {AssetType} type\r\n   * @param opts\r\n   */\r\n  queueDownload (id: AssetId, type: AssetType, opts = null): void {\r\n    this.queue.push({ id: id, path: this.assetsDir + type + '/' + id + '.png', type: type, opts: opts })\r\n  }\r\n\r\n  /**\r\n   * Build an AJAX Request to loadAudio audio file into the buffer cache.\r\n   *\r\n   * @param item object with name of file and path to file\r\n   * @param callback function to execute on done\r\n   */\r\n  loadAudio (item, callback): void {\r\n    Ajax.create({\r\n      method: 'GET',\r\n      url: item.path,\r\n      responseType: 'arraybuffer'\r\n    }, response => {\r\n      this.audioManager.decodeAudio(response, item.id, buffer => {\r\n        this.cache[item.id] = buffer\r\n        this.downloadCount += 1\r\n        if (this.done()) {\r\n          callback()\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param item\r\n   * @param callback\r\n   */\r\n  loadSprite (item, callback): void {\r\n    let sprite = new Image()\r\n    sprite.addEventListener('load', () => {\r\n      this.downloadCount++\r\n      if (this.done()) {\r\n        callback()\r\n      }\r\n    })\r\n    sprite.src = item.path\r\n    this.cache[item.id] = sprite\r\n  }\r\n\r\n  /**\r\n   * Load sprites sheet.\r\n   *\r\n   * @param item sprite sheet info\r\n   * @param callback called upon downloading all\r\n   */\r\n  loadSpriteSheet (item, callback): void {\r\n    let spriteSheet = new Image()\r\n    spriteSheet.addEventListener('load', () => {\r\n      this.cache[item.id] = new SpriteSheet(spriteSheet, item.opts.frameWidth || 0, item.opts.frameHeight || 0)\r\n      this.downloadCount += 1\r\n      if (this.done()) {\r\n        callback()\r\n      }\r\n    })\r\n    spriteSheet.src = item.path\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param callback\r\n   */\r\n  downloadAll (callback): void {\r\n    this.queue.forEach(item => {\r\n      if (item.type === AssetType.AUDIO) {\r\n        this.loadAudio(item, callback)\r\n      } else if (item.type === AssetType.SPRITE) {\r\n        this.loadSprite(item, callback)\r\n      } else if (item.type === AssetType.SPRITE_SHEET) {\r\n        this.loadSpriteSheet(item, callback)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Create an audio buffer source node from cached buffer.\r\n   * Send it to the destination of the audio context and play it.\r\n   *\r\n   * @param {AssetId} id File id\r\n   * @param {AssetType} type\r\n   */\r\n  get (id: AssetId, type: AssetType = AssetType.SPRITE): any {\r\n    if (type === AssetType.AUDIO || type === AssetType.AUDIO_AMB) {\r\n      let ambient = type === AssetType.AUDIO_AMB\r\n      return this.audioManager.createSound(this.cache[id], ambient)\r\n    } else {\r\n      return this.cache[id]\r\n    }\r\n  }\r\n}\r\n","import Observable from '../observer/Observable'\r\nimport Settings from '../../config/Settings'\r\n\r\n/**\r\n * Input manager class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class InputManager extends Observable {\r\n  inputMap\r\n  touches\r\n\r\n  /**\r\n   *\r\n   */\r\n  constructor (settings: Settings) {\r\n    super()\r\n    this.inputMap = settings.keyboard\r\n    this.init()\r\n    this.initializeTouchHandler()\r\n    this.touches = {\r\n      start: [],\r\n      move: []\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register pressed keys and notify observers.\r\n   */\r\n  init (): void {\r\n    window.addEventListener('keydown', event => {\r\n      let key = event.key !== ' ' ? event.key : 'space'\r\n      this.state[this.inputMap[key]] = true\r\n      this.notify()\r\n    })\r\n    window.addEventListener('keyup', event => {\r\n      let key = event.key !== ' ' ? event.key : 'space'\r\n      this.state[this.inputMap[key]] = false\r\n      this.notify()\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Maps swipe directions to key press booleans.\r\n   * Allows touch controls on mobile.\r\n   */\r\n  initializeTouchHandler (): void {\r\n    // Register the event listeners\r\n    let button = document.getElementById('move')\r\n    let el = button ? button : window\r\n    el.addEventListener('touchstart', handleTouchStart, false)\r\n    el.addEventListener('touchmove', handleTouchMove, false)\r\n    el.addEventListener('touchend', handleTouchEnd, false)\r\n\r\n    let start = []\r\n    let move = []\r\n    let touchstartX = 0\r\n    let touchstartY = 0\r\n    let toucheMoveX = 0\r\n    let touchMoveY = 0\r\n    let thisInstance = this\r\n\r\n    function handleTouchStart (evt): void {\r\n      evt.preventDefault()\r\n      start = evt.touches\r\n      touchstartX = evt.touches[0].pageX\r\n      touchstartY = evt.touches[0].pageY\r\n    }\r\n\r\n    function handleTouchMove (evt): void {\r\n      thisInstance.reset()\r\n      evt.preventDefault()\r\n      move = evt.changedTouches\r\n      toucheMoveX = evt.touches[0].pageX\r\n      touchMoveY = evt.touches[0].pageY\r\n      for (let i = 0; i < evt.touches.length; i++) {\r\n        // Positive values equals left. Negative values equals right\r\n        if (move[i].pageX < start[i].pageX) {\r\n          thisInstance.state[thisInstance.inputMap['a']] = true\r\n        }\r\n        if (move[i].pageX > start[i].pageX) {\r\n          thisInstance.state[thisInstance.inputMap['d']] = true\r\n        }\r\n        if (move[i].pageY < start[i].pageY) {\r\n          thisInstance.state[thisInstance.inputMap['w']] = true\r\n        }\r\n        if (move[i].pageY > start[i].pageY) {\r\n          thisInstance.state[thisInstance.inputMap['s']] = true\r\n        }\r\n        thisInstance.notify()\r\n      }\r\n    }\r\n\r\n    function handleTouchEnd (evt): void {\r\n      evt.preventDefault()\r\n      thisInstance.reset()\r\n    }\r\n  }\r\n\r\n  shoot (): void {\r\n    this.state[this.inputMap['space']] = true\r\n  }\r\n\r\n  cancelShoot (): void {\r\n    this.state[this.inputMap['space']] = false\r\n  }\r\n\r\n  reset (): void {\r\n    this.state[this.inputMap['w']] = false\r\n    this.state[this.inputMap['a']] = false\r\n    this.state[this.inputMap['s']] = false\r\n    this.state[this.inputMap['d']] = false\r\n  }\r\n}\r\n","import IGameState from '../lib/interfaces/IGameState'\r\nimport IGame from '../lib/interfaces/IGame'\r\nimport ICollisionManager from '../lib/interfaces/ICollisionManager'\r\nimport InputManager from '../lib/client/InputManager'\r\nimport AssetManager, { AssetType } from '../lib/client/AssetManager'\r\nimport { ContextId } from '../enum/ContextId'\r\nimport Settings from '../config/Settings'\r\nimport LegendState from './LegendState'\r\nimport AudioManager from '../lib/client/AudioManager'\r\nimport CollisionManager from '../lib/collision/CollisionManager'\r\nimport * as mapData from '../../public/definitions/maps.json'\r\nimport * as turretData from '../../public/definitions/turrets.json'\r\nimport Tile from '../model/Tile'\r\nimport Turret from '../model/Turret'\r\nimport Dimension from '../lib/geometry/Dimension'\r\nimport Vector2 from '../lib/math/Vector2'\r\nimport { AssetId } from '../enum/AssetId'\r\nimport BuildMenu from '../ui/BuildMenu'\r\n\r\n/**\r\n * Main game Class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class LegendOfTheVoid implements IGame {\r\n  audioManager: AudioManager\r\n  inputManager: InputManager\r\n  assetManager: AssetManager\r\n  collisionManager: ICollisionManager\r\n  state: IGameState\r\n  contexts: Map<ContextId, CanvasRenderingContext2D>\r\n  settings: Settings\r\n  buildMenu: BuildMenu\r\n  private TILE_SIZE = 60\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {Map<ContextId, CanvasRenderingContext2D>} contexts\r\n   * @param {Settings} settings\r\n   */\r\n  constructor (contexts: Map<ContextId, CanvasRenderingContext2D>, settings: Settings) {\r\n    this.audioManager = new AudioManager()\r\n    this.inputManager = new InputManager(settings)\r\n    this.assetManager = new AssetManager(this.audioManager)\r\n    this.state = new LegendState(settings, this.inputManager)\r\n    this.collisionManager = new CollisionManager(this.state.quadTree)\r\n    this.contexts = contexts\r\n    this.settings = settings\r\n    this.buildMenu = new BuildMenu('buildMenu', turretData, this.assetManager)\r\n  }\r\n\r\n  initMap (): void {\r\n    console.log(mapData)\r\n    let y = 0\r\n    mapData[0].tiles.forEach(row => {\r\n      let width = this.TILE_SIZE\r\n      let height = this.TILE_SIZE\r\n      let x = 0\r\n      row.forEach(col => {\r\n        const tile = new Tile(x, y, width, height, this.settings)\r\n        switch (col) {\r\n          case 0:\r\n            tile.blocked = true\r\n            tile.color = '#000000'\r\n            break\r\n          case 1:\r\n            tile.buildable = true\r\n            tile.color = '#ff00ff'\r\n            break\r\n          case 3:\r\n            tile.color = '#00ff00'\r\n            break\r\n          case 4:\r\n            tile.color = '#ff0000'\r\n            break\r\n        }\r\n        this.state.entities.push(tile)\r\n        this.state.renderables.push(tile)\r\n        x += width\r\n      })\r\n      y += height\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Initialize the game.\r\n   */\r\n  init (): void {\r\n    this.assetManager.queueDownload(AssetId.TURRET_LASER, AssetType.SPRITE)\r\n    this.initMap()\r\n    this.assetManager.downloadAll(() => {\r\n      //console.log(this.state.renderables)\r\n      this.state.renderables\r\n        .filter(element => {return element.assetId !== AssetId.NONE })\r\n        .forEach(renderable => renderable.asset = this.assetManager.get(renderable.assetId))\r\n      this.state.reset()\r\n      this.buildMenu.init()\r\n    })\r\n  }\r\n\r\n  addTurret (type: string, position: Vector2) {\r\n    let turrets = (<any>turretData)\r\n    let turr = new Turret()\r\n    turr.fromJSON(turrets.filter(turret => {return turret.type === type})[0])\r\n    turr.position = position\r\n    turr.dimension = new Dimension(this.TILE_SIZE, this.TILE_SIZE)\r\n    turr.asset = this.assetManager.get(turr.assetId)\r\n    this.state.entities.push(turr)\r\n    this.state.renderables.push(turr)\r\n  }\r\n\r\n  /**\r\n   * Render current state.\r\n   */\r\n  render (): void {\r\n    this.state.renderables.forEach(renderable => renderable.render(this.contexts.get(renderable.contextId)))\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  clear (): void {\r\n    this.state.renderables.forEach(renderable => renderable.clear(this.contexts.get(renderable.contextId)))\r\n  }\r\n}\r\n","import LegendOfTheVoid from './application/LegendOfTheVoid'\r\nimport GameSettings from './config/Settings'\r\nimport { ContextId } from './enum/ContextId'\r\nimport LegendLoop from './application/LegendLoop'\r\nimport Vector2 from './lib/math/Vector2'\r\n\r\n/**\r\n * Entry script for legend of the void.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  const container = document.getElementById('contents')\r\n  const contexts = new Map<ContextId, CanvasRenderingContext2D>()\r\n  const bgCanvas = document.createElement('canvas')\r\n  const creepCanvas = document.createElement('canvas')\r\n  const playerCanvas = document.createElement('canvas')\r\n  const canvasSize = 660\r\n  container.appendChild(bgCanvas)\r\n  container.appendChild(creepCanvas)\r\n  container.appendChild(playerCanvas)\r\n  contexts.set(ContextId.BACKGROUND, bgCanvas.getContext('2d'))\r\n  contexts.set(ContextId.CREEPS, creepCanvas.getContext('2d'))\r\n  contexts.set(ContextId.PLAYER, playerCanvas.getContext('2d'))\r\n  bgCanvas.width = canvasSize\r\n  bgCanvas.height = canvasSize\r\n  creepCanvas.width = canvasSize\r\n  creepCanvas.height = canvasSize\r\n  playerCanvas.width = canvasSize\r\n  playerCanvas.height = canvasSize\r\n\r\n  const settings = new GameSettings(bgCanvas)\r\n  const game = new LegendOfTheVoid(contexts, settings)\r\n  const loop = new LegendLoop(game)\r\n\r\n  loop.start()\r\n  game.addTurret(\"laser\", new Vector2(2, 2))\r\n})"],"sourceRoot":""}